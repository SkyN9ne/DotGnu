bin_PROGRAMS = ilrun ilverify
lib_LIBRARIES = libILEngine.a
man_MANS = ilrun.1 ilverify.1

FFI_INCLUDE =
if USING_LIBFFI
FFI_INCLUDE += -I../libffi/include
endif

GC_INCLUDE =
if USING_LIBGC
GC_INCLUDE += -I$(top_srcdir)/libgc/include
endif

CVM_INCLUDES = cvm.h cvm_arith.c cvm_branch.c cvm_call.c cvm_compare.c \
			   cvm_config.h cvm_const.c cvm_conv.c cvm_except.c cvm_format.h \
			   cvm_inline.c cvm_interrupt.c cvm_ptr.c cvm_stack.c cvm_var.c

CVMC_INCLUDES = cvmc_arith.c cvmc_branch.c cvmc_call.c cvmc_const.c \
				cvmc_conv.c cvmc_except.c cvmc_gen.h cvmc_obj.c cvmc_ptr.c \
				cvmc_setup.c cvmc_stack.c cvmc_var.c
				
INTERNAL_INCLUDES = int_table.c

JITC_INCLUDES = jitc.h \
				jitc_alloc.c \
				jitc_arith.c \
				jitc_array.c \
				jitc_branch.c \
				jitc_call.c \
				jitc_const.c \
				jitc_conv.c \
				jitc_delegate.c \
				jitc_diag.c \
				jitc_except.c \
				jitc_gen.h \
				jitc_inline.c \
				jitc_labels.c \
				jitc_locals.c \
				jitc_math.c \
				jitc_obj.c \
				jitc_pinvoke.c \
				jitc_profile.c \
				jitc_ptr.c \
				jitc_setup.c \
				jitc_stack.c \
				jitc_string.c \
				jitc_var.c

MD_ARM_INCLUDES = md_arm.h arm_codegen.h

MD_IA64_INCLUDES = md_ia64.h md_ia64_macros.h

MD_PPC_INCLUDES = md_ppc.h ppc_codegen.h

MD_X86_INCLUDES = md_x86.h x86_codegen.h

MD_AMD64_INCLUDES = md_amd64.h amd64_codegen.h

MD_INCLUDES = 	$(MD_AMD64_INCLUDES) \
				$(MD_ARM_INCLUDES) \
				$(MD_IA64_INCLUDES) \
				$(MD_PPC_INCLUDES) \
				$(MD_X86_INCLUDES) 

UNROLL_INCLUDES = unroll_arith.c \
				  unroll_branch.c \
				  unroll_const.c \
				  unroll_conv.c \
				  unroll_ptr.c \
				  unroll_var.c

VERIFY_INCLUDES = verify_ann.c \
				  verify_arith.c \
				  verify_branch.c \
				  verify_call.c \
				  verify_const.c \
				  verify_conv.c \
				  verify_except.c \
				  verify_obj.c \
				  verify_ptr.c \
				  verify_stack.c \
				  verify_var.c

EXTRA_DIST = $(man_MANS) cvm_doc.txt mkint.sh mklabel.sh

EXTRA_libILEngine_a_SOURCES = $(CVM_INCLUDES) \
							  $(CVMC_INCLUDES) \
							  gen_marshal.tc \
							  $(INTERNAL_INCLUDES) \
							  $(JITC_INCLUDES) \
							  $(MD_AMD64_INCLUDES) \
							  $(MD_ARM_INCLUDES) \
							  $(MD_IA64_INCLUDES) \
							  $(MD_PPC_INCLUDES) \
							  $(MD_X86_INCLUDES) \
							  $(UNROLL_INCLUDES) \
							  $(VERIFY_INCLUDES)

BUILT_SOURCES = gen_marshal.c \
				gen_marshal.h

libILEngine_a_SOURCES = cctormgr.c \
						cctormgr.h \
						cvm.c \
						box.c \
						call.c \
						coder.c \
						coder.h \
						convert.c \
						custom.c \
						cvm_dasm.c \
						cvm_lengths.c \
						cvmc.c \
						debugger.c \
						debugger.h \
						dumpconfig.c \
						engine.c \
						engine.h \
						engine_private.h \
						heap.c \
						int_proto.h \
						internal.c \
						jitc.c \
						layout.c \
						lib_appdomain.c \
						lib_array.c \
						lib_charinfo.c \
						lib_crypt.c \
						lib_decimal.c \
						lib_defs.h \
						lib_delegate.c \
						lib_diag.c \
						lib_dir.c \
						lib_emit.c \
						lib_encoding.c \
						lib_enum.c \
						lib_file.c \
						lib_gc.c \
						lib_helpers.c \
						lib_info.c \
						lib_marshal.c \
						lib_math.c \
						lib_misc.c \
						lib_monitor.c \
						lib_object.c \
						lib_profiling.c \
						lib_reflect.c \
						lib_regexp.c \
						lib_security.c \
						lib_serial.c \
						lib_socket.c \
						lib_stdio.c \
						lib_string.c \
						lib_stringbuilder.c \
						lib_task.c \
						lib_thread.c \
						lib_time.c \
						lib_type.c \
						lookup.c \
						md_default.h \
						method_cache.h \
						monitor.c \
						method_cache.c \
						null_coder.c \
						pinvoke.c \
						process.c \
						register.c \
						system.c \
						thread.c \
						throw.c \
						unroll.c \
						md_x86.c \
						md_amd64.c \
						md_arm.c \
						md_ia64.c \
						md_ppc.c \
						verify.c

PACKAGE_LIBS = $(GCLIBS) $(FFILIBS) $(SOCKETLIBS) $(WINLIBS)

if PNET_TOOLS

ilrun_SOURCES = ilrun.c
ilrun_LDADD = libILEngine.a ../dumpasm/libILDumpAsm.a \
			  ../image/libILImage.a ../support/libILSupport.a \
			  $(PACKAGE_LIBS) $(TERMCAPLIBS) $(JIT_LIBS)

ilverify_SOURCES = ilverify.c
ilverify_LDADD = libILEngine.a ../dumpasm/libILDumpAsm.a \
			     ../image/libILImage.a ../support/libILSupport.a \
			  	 $(PACKAGE_LIBS) $(TERMCAPLIBS) $(JIT_LIBS)

## We need "-fno-gcse" to stop gcc being overeager when it compiles
## the interpreter core in direct threading mode.
## GCC 3.4.0 also needs -fno-unit-at-a-time
## 'ffi.h' is autogenerated; thus, goes into build tree.
AM_CFLAGS = $(NO_GCSE) $(NO_INLINE_FUNCTIONS) \
			$(NO_UNIT_AT_A_TIME) \
			-I$(top_srcdir)/include -I$(top_srcdir)/support \
			$(GC_INCLUDE) \
			$(JIT_INCLUDE) \
			$(FFI_INCLUDE) -I. -DBUILD_PROFILE_NAME="\"$(PROFILE_NAME)\""

else

ilrun_SOURCES = ilrun.c
ilrun_LDADD = libILEngine.a \
			  ../image/libILImage.a ../support/libILSupport.a \
			  $(PACKAGE_LIBS) $(TERMCAPLIBS) $(JIT_LIBS)

ilverify_SOURCES = ilverify.c
ilverify_LDADD = libILEngine.a \
			     ../image/libILImage.a ../support/libILSupport.a \
			  	 $(PACKAGE_LIBS) $(TERMCAPLIBS) $(JIT_LIBS)

## We need "-fno-gcse" to stop gcc being overeager when it compiles
## the interpreter core in direct threading mode.
## GCC 3.4.0 also needs -fno-unit-at-a-time
## 'ffi.h' is autogenerated; thus, goes into build tree.
AM_CFLAGS = $(GC_INCLUDE) $(FFI_INCLUDE) \
			$(NO_GCSE) $(NO_INLINE_FUNCTIONS) $(NO_UNIT_AT_A_TIME) \
			-I$(top_srcdir)/include -I$(top_srcdir)/support -I. \
			$(JIT_INCLUDE) \
			-DIL_WITHOUT_TOOLS -Os

endif

cvmc.$(OBJEXT): cvmc.c $(CVMC_INCLUDES)

cvm.$(OBJEXT): cvm.c $(CVM_INCLUDES) cvm_labels.h

internal.$(OBJEXT): internal.c $(INTERNAL_INCLUDES)

jitc.$(OBJEXT): jitc.c $(JITC_INCLUDES)

md_x86.$(OBJEXT): md_x86.c $(MD_X86_INCLUDES) cvm_config.h

md_arm.$(OBJEXT): md_arm.c $(MD_ARM_INCLUDES) cvm_config.h

md_ia64.$(OBJEXT): md_ia64.c $(MD_IA64_INCLUDES) cvm_config.h

md_ppc.$(OBJEXT): md_ppc.c $(MD_PPC_INCLUDES) cvm_config.h

md_amd64.$(OBJEXT): md_amd64.c $(MD_AMD64_INCLUDES) cvm_config.h

unroll.$(OBJEXT): unroll.c $(UNROLL_INCLUDES) $(MD_INCLUDES)

verify.$(OBJEXT): verify.c $(VERIFY_INCLUDES)

cvm_labels.h: $(srcdir)/cvm.h $(srcdir)/mklabel.sh
	$(SHELL) $(srcdir)/mklabel.sh "$(AWK)" $(srcdir)/cvm.h >cvm_labels.h

gen_marshal.c: $(srcdir)/gen_marshal.tc
	$(TREECC) -f -o gen_marshal.c -h gen_marshal.h \
			$(srcdir)/gen_marshal.tc

gen_marshal.h: gen_marshal.c

CLEANFILES = cvm_labels.h gen_marshal.c gen_marshal.h
