2011-06-15  Klaus Treichel  <ktreichel@web.de>

	* support/allocate.c (PageInit, ILPageAlloc): Use a constant -1 file
	descriptor if MAP_ANON (or MAP_ANONYMOUS) is defined.

2011-06-13  Klaus Treichel  <ktreichel@web.de>

	* support/pt_defs.c (_ILThreadSuspendUntinResumed): Clear resumeRequested
	on exit.
	(_ILThreadInitHandleSelf): Set identifier to the native mach thread
	on Darwin.
	(_ILThreadInitSystem): Mask all signals during handling of an interrupt,
	abort and resume signal.
	Set identifier of the main thread to the native mach thread on Darwin.
	(ThreadStart): Set identifier to the native mach thread on Darwin.

	* support/pt_defs.h: (_ILThreadSuspendOther, _ILThreadResumeOther): Use
	thread_suspend and thread_resume on darwin.
	(_ILThreadResumeSelf): Don't clear resumeRequested.

	* support/thr_defs.h (struct _tagILThread): Add member identifier only if
	requeted by the backend.

	* support/thread.c (ILThreadSuspendRequest): Don't clear resumeRequested.
	Reset flags to IL_TS_SUSPEND_REQUESTED again if the thread has to
	suspend itself.
	(ILThreadResume): Clear suspendRequested if a thread is resumed before it
	had time to suspend itself.
	(ILThreadJoin): Don't clear resumeRequested.
	(_ILThreadLeaveWaitState): Don't clear resumeRequested.

	* support/w32_defs.h: Notify thr_defs.h that the thread identifier is
	needed for this backend.

	* support/wait.c (_ILLeaveWait):  Don't clear resumeRequested.

2011-04-26  Klaus Treichel  <ktreichel@web.de>

	* engine/coder.c (NestExceptionBlocks): Move from verify.c to here.
	(InsertExceptionBlock): likewise
	(FindOrAddTryBlock): likewise
	(AddHandlerBlock): likewise
	(_ILCoderAddExceptionBlock): Move AddExceptionBlock from verify.c to
	here.
	(_ILCoderFindExceptionBlock): Move FindExceptionBlock from verify_except.c
	to here.
	(_ILCoderThrowSystem): Move _ThrowSystem from verify_except.c to here.

	* engine/coder.h: Move definitiona of IL_VERIFY_* returncodes from
	verify.c and change the prefix to IL_CODER_.
	Add prototypes for the moved _ILCoder functions.

	* engine/verify.c: Move exception related functions to coder.c and adjust
	their usages to call the moved functions.

	* engine/verify_except.c (FindExceptionBlock): Move  to coder.c.
	(_ThrowSystem): Move to coder.c
	Adjust usages of the moved functions.

2011-04-14  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm_call.c (_ILPackCVMStackArgs): Remove unused variable x.

	* engine/cvmc_except.c (CVMCoder_OutputExceptionTable): Remove unused
	variable parent.

	* engine/lib_delegate.c (_ILCoderGenDelegateCtor): Remove unused variable
	classInfo.
	(GenDelegateInvoke): Remove unused variable thisType.
	(_ILCoderGenDelegateBeginInvoke): Remove unused variable delegateClass.

	* support/list.c (ILSinglelyLinkedListFind): Remove unused variable prev.
	(ILSinglelyLinkedListReverseFind): likewise

2011-04-10  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_delegate.c (CreateDelegateSignature): Remove the unused
	objectClass variable.

2011-04-09  Klaus Treichel  <ktreichel@web.de>

	* engine/Makefile.am: Add coder.c and coder.h to the sources.

	* engine/coder.c, engine/coder.h: Add code generation helper functions
	and move some functions from the verifyer to here.
	(_ILCoderBoxPtr) BoxPtr moved from verify_obj.c to here.
	(_ILCoderBoxValue) BoxValue moved from verify_obj.c to here.
	(_ILCoderGetParamType) GetParamType moved ftom verify_var.c to here.
	(_ILCoderSetReturnType) Moved from verify_call.c to here and include
	the handling of void return types too.

	* engine/convert.c (GenMethod): Add method for processing dynamic code
	generators.
	(ConvertMethod): Adjust to changed ILInternalInfo structure and handle
	dynamic code generators.

	* engine/engine.h (ILGenCodeFunc): Define signature for dynamic code
	generators.
	(ILInternalInfo): Modify struct to handle dynamic code generators.

	* engine/internal.c (_ILFindInternalCall): Adjust to changed
	ILInternalInfo structure.

	* engine/lib_array.c (_ILGetInternalArray): Adjust to changed
	ILInternalInfo structure.
 
	* engine/lib_delegate.c (_ILAsyncResult_SetOutParams): Add Check for null
	outParams and no invoke arguments.
	(Delegate_ctor): Replace by dynamic code generator.
	(Delegate_Invoke): likewise
	(Delegate_BeginInvoke): likewise
	(Delegate_EndInvoke): likewise
	(_ILGetInternalDelegate): Return the new code generators instead of the
	native functions for the constructor and the Invoke, BeginInvoke and
	EndInvoke methods.

	* engine/jitc.c: Move declaration of ILJITCoder, ILJitInlineFunc and
	ILJitMethodInfo to engine/jitc.h.
	(_ILJitFunctionIsInternal, _ILJitCompileInternal): Adjust to changed
	ILInternalInfo structure.
	(_ILJitSetMethodInfo): Adjust to changed ILInternalInfo structure.
	Use the dynamic code gereration for the delegate methods now.

	* engine/jitc.h: Move declaration of ILJITCoder, ILJitInlineFunc and
	ILJitMethodInfo from engine/jitc.c to here.

	* engine/jitc_call.c, engine/jitc_pinvoke.c, engine/jitc_setup.c,
	engine/jitc_stack.c: Adjust to changed ILInternalInfo structure.

	* engine/verify.c: Include coder.h

	* engine/verify_call.c (SetReturnType): Move to coder.c
	_ILCoderSetReturnType.
	Change calls to SetReturnType and the handling of void return type to
	call _ILCoderSetReturnType.
	Change call to BoxPtr to call _ILCoderBoxPtr.

	* engine/verify_obj.c (BoxPtr): Moved to coder.c _ILCoderBoxPtr.
	(BoxValue): Moved to coder.c _ILCoderBoxValue.
	Change call to BoxValue to call _ILCoderBoxValue.

	* engine/verify_var.c (GetParamType): Moved to coder.c
	_ILCoderGetParamType.
	Change calls to GetParamType to call _ILCoderGetParamType.

2011-02-28  Klaus Treichel  <ktreichel@web.de>

	* csdoc/src2xml.c (Convert): Use memmove instead of strcpy to move
	the contents of the text buffer because strcpy's behavior is undefined
	if the regions overlap.

	* cscc/Makefile.am: Use libtool for installing the programs to fix
	install problems where the actual binary is in the .libs directory.

2011-01-16  Klaus Treichel  <ktreichel@web.de>

	* include/il_coder.h: Add ILCoderExceptions and hasRethrow arguments
	to the coder setup function. This function has to setup the exception
	handling now too.
	Remove the setupExceptions function.

	* engine/cvmc.c: Remove the unused needTry member fron the cvm coder.
	Introduce the IL_CVMC_DECLARATIONS and IL_CVMC_FUNCTIONS defines to
	allow inclusion of parts of coder sources at defined places.
	Remove CVMCoder_SetupExceptions from the cvm coder instance.

	* engine/cvmc_except.c (CVMCoder_SetupExceptions): Rename function to
	CVMEntrySetupExceptions and add only the locals needed to the
	CVMEntryContext.

	* engine/cvmc_setup.c (CVMCoder_Setup): Call CVMEntrySetupExceptions
	after allocating the locals so that the space for locals and excepion
	slots will be allocated with one operation.
	Create the cache region now in this function too if there are any
	exception blocks.

	* engine/jitc.c: Remove JITCoder_SetupExceptions from the jit coder
	instance.

	* engine/jitc_except.c (JITCoder_SetupExceptions): Rename to
	SetupExceptions.
	Move block with initialization of the values needed for exception
	handling to the start of the function.
	(JITCoder_LeaveCatch): Reset the flag for handling of a thread abort
	now before rethrowing the thread abort exception.
	(JITCoder_OutputExceptionTable): Fix the handling of a thread abort.

	* engine/jitc_setup.c (JITCoder_Setup): Add call to SetupExceptions.

	* engine/null_coder.c (Coder_Setup): Add new arguments.
	(Coder_SetupExceptions): Remove.
	Remove Coder_SetupExceptions from the null coder instance.

	* engine/verify.c (_ILVerify): Move calls to ILCoderSetup and
	ILCoderProfileStart just before the start code verification after
	coder exception setup and label verification is done.
	Remove the call to ILCoderSetupExceptions.

2011-01-09  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.h: Add macros for accessing the current thrown
	exception in the ILExecThread structure.

	* engine/throv.c (ILExecThreadHasException): Replace implementation
	by the new internal macro.
	(ILExecThreadGetException): Likewise.
	(ILExecThreadClearException): Likewise.
	(ILExecThreadSetException): Likewise.
	Replace all calls to one of these functions with a call of the
	corresponding macro.

	* engine/call.c, engine/cctormgr.c, engine/convert.c: Replace all calls
	to functions that access the ILExecThread's thrownException and direct
	accesses to the ILExecThread's thrownException member with calls to the
	corresponding new macro.

	* engine/custom.c, engine/cvm.c, engine/cvm_call.c: Likewise.

	* engine/cvm_conv.c, engine/cvm_except.c, engine/heap.c: Likewise.

	* engine/ilrun.c, engine/jitc.c, engine/lib_crypt.c: Likewise.

	* engine/lib_delegate.c, engine/lib_object.c: Likewise.

	* engine/lib_thread.c, engine/lib_type.c, engine/pinvoke.c: Likewise.

	* engine/process.c, engine/system.c, engine/thread.c: Likewise.

2011-01-07  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.c, engine/cvm_interrupts.c: Do some reformatting.

	* engine/cvm_call.c: Pop the current jump buffer if interrupt based
	exceptions are used on exit from the interpreter.
	Jump to the new label in cvm_except in the case of a thrown exception
	in RESTORE_STATE_FROM_THREAD now.

	* engine/cvm_except.c: Pop the current jump buffer if interrupt based
	exceptions are used on exit from the interpreter.
	Add a jump label for the case theh the exception is allready in
	thread->thrownException.
	Refine some comments.

	* engine/cvm_config.h: Remove the memory clobber in the
	CVM_BREAK_BARRIER for x86_64.
	Add a missing clobber of ARM_WORK (r12) to the CVM_BREAK_BARRIER for
	arm.

2011-01-06  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.c, engine/cvm_config.c: Revert the optimizations for
	x86 because they seem to be gcc 4.4 optimizer specific.

2011-01-05  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.h, engine/lib_thread.c, engine/thread.c: Remove
	the now unused members currentException and threadAbortException from
	ILExecThread.

	* engine/amd64_codegen.h (amd64_alu_reg_imm_size): Replace check for
	reg == X86_EAX with reg == AMD64_RAX.

	* include/il_align.h: Use offsetof to determine the alignment of the
	types if available.

2011-01-04  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.c: Make the interpreter loop variables volatile again
	on x86.
	Mark the consditions that lead to exceptions most probably not true.
	(Interpreter): Move the exceptions to cvm_except.c in the throw opcode.

	* cvm_call.c: Mark the consditions that lead to exceptions most
	probably not true.

	* cvm_config.h: Add IL_EXPECT macro for __builtin_expect for gcc >= 3.
	Add optimizations for x86.

	* cvm_except.c (CVM_PREFIX_OP_THROW): Move the exceptions from cvm.c
	to here.

2011-01-02  Klaus Treichel  <ktreichel@web.de>

	* engine/call.c (_ILCallMethod): Don't copy the currentException back
	to the thrownException anymore if built with libjit.
	(_ILCallMethod): Remove copying the exceptHeight for cvm.

	* engine/cvm.c, engine/cvm_arith.c, engine/cvm_call.c, engine/cvm_except.c:
	Change exception handling from code to unwind table based.
	Fix catching exceptions in finally/fault blocks.
	Add support for filter based exceptions.

	* engine/cvm_call.c, engine/debugger.c : Remove copying the
	exceptHeight.

	* engine/cvm.h: Mark some prefixed opcodes for exception handling
	obsolete or replace them by new ones.
	Add declaration of the cvm unwind information structs.

	* engine/cvm_lengths.c: Adjust to the opcode changes in cvm.h

	* engine/cvmc.c: Adjust the cvm coder to match the new coder structure.

	* engine/cvmc_except.c (CVMCoder_jsr, CVMCoder_RetFromJsr): removed
	(CVMCoder_TryHandlerStart, CVMCoder_TryHandlerEnd): ditto
	(CVMCoder_Catch, CVMCoder_EndCatchFinally, CVMCoder_Finally): ditto
	(CVMCoder_CallFinally, CVMCoder_RetFromFinally): added
	(CVMCoder_LeaveCatch, CVMCoder_RetFromFilter): ditto
	(CVMCoder_OutputExceptionTable): Add function to convert the coder
	exception structure to the cvm structure.

	* engine/jitc.c: Adjust the jit coder to match the new coder structure.

	* engine/jitc_branch.c (JITCoder_Label): Add handling of start labels of
	catch and filter blocks.
	(OutputCompare): Do some reformatting.

	* engine/jitc_except.c: Rework generation of the exception handling code.

	* engine/jitc_labels.c: Add label type for filter block starts.

	* engine/null_coder.c: Adjust the null coder to match the new coder
	structure.

	* engine/system.c (FindAndSetStackTrace): Remove copying the
	exceptHeight.

	* engine/thread.c, engine/lib_thread.c: Remove initialization of
	abortHandlerEndPc and abortHandlerFrame.

	* engine/verify.c: Add functions for creating the coder exception block
	structure from the method's exception regions.
	(_ILVerify): Create the coder exception structure from the method's
	exception regions.
	Add more verification checks of the exception regions.
	Change the exceptional synchronized method exit handling to
	adding an extra fault block for the whole method to exit the monitor.

	* engine/verify_except.c: Rework verification and generation of exception
	handling opcodes. Fix support for filters.

	* engine/engine.h: Remove the now obsolete exceptHeight member from
	ILCallFrame and ILExecThread.
	Remove the now obsolete AbortHandlerFrame and abortHandlerEndPc from
	ILExecThread.

	* include/il_coder.h: Add coder specific exception block structs.
	Modify the coder structure and adjust the corresponding macros.

2010-12-26  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm_config.h: Add the vmbreak barrier definitions for arm
	and ppc.

	* engine/cvm.c: Remove the volatile from the volatile interpreter
	variable configuration for gcc 4.x and arm and ppc.

	* engine/cvm_ptr.c: Do some reformatting.

	* engine/cvmc_branch.c: Do some reformatting.

	* support/interlocked_ppc.h: Add an early clobber to the output of the
	interlocked	Add, Sub And and Or functions.

2010-12-25  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm_config.h: Move configuration of interpreter loop variables
	from cvm.c to here.
	Add optional definition of a vmbreak barrier if the unroller is used to
	clobber registers that are used by the unrolled code but not saved.

	* engine/cvm.c: Move configuration of interpreter loop variables to
	cvm_config.h
	Remove the volatile from the volatile interpreter variable configuration
	for gcc 4.x and x86_64 and x86 because they are not needed anymore.
	(_ILCVMInterpreter): Prepend a CVM_ to the configurable register
	variables.	

	* engine/mklabel.sh: Add the CVM_VMBREAK_BARRIER to the VMBREAK and
	VMBREAKNOEND definitions for the direct threaded mode.

	* engine/thread.c: Do some reformatting.

2010-10-24  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm_ptr.c: Fix cvmdoc generation for the
	COP_ELEM_ADDR_SHIFT_I4 opcode.

2010-10-22  Klaus Treichel  <ktreichel@web.de>

	* support/thread.c (ILThreadInit): Move initialization of the
	interlocked functions from here to the specific _ILThreadInitSystem
	functions

	* support/pt_defs.c, support/no_defs.c, support/w32_defs.c
	(_ILThreadInitSystem): Move initialization of the interlocked functions
	to here.

2010-07-18  Klaus Treichel  <ktreichel@web.de>

	* engine/unroll.c (FreeTopRegister): Fix build with unroller without
	float support like on ppc.

2010-06-06  Klaus Treichel  <ktreichel@web.de>

	* support/pt_defs.c (_ILThreadInitSystem): Use the new public libgc
	function GC_get_suspend_signal(void) to determine the signal used by
	libgc to suspend a thread instead of including libgs's private headers.

2010-06-05  Klaus Treichel  <ktreichel@web.de>

	* engine/Makefile.am: Add -I$(top_srcdir)/include to AM_CFLAGS if built
	with tools.
	Replace -I../include by -I$(top_srcdir)/include in AM_CFLAGS if built
	without tools.

	* libgc/include/gc_alloc.h: Remove obsolete file

	* libgc/include/gc_inl.h: likewise

	* libgc/include/gc_local_alloc.h: likewise

	* libgc/ChangeLog, libgc/EMX_MAKEFILE, libgc/Makefile.am,
	libgc/Makefile.direct, libgc/Makefile.dj, libgc/NT_MAKEFILE,
	libgc/NT_STATIC_THREADS_MAKEFILE, libgc/NT_X64_STATIC_THREADS_MAKEFILE,
	libgc/NT_X64_THREADS_MAKEFILE, libgc/PCR-Makefile, libgc/README.QUICK,
	libgc/SMakefile.amiga, libgc/allchblk.c, libgc/alloc.c, libgc/backgraph.c,
	libgc/blacklist.c, libgc/build_atomic_ops.sh,
	libgc/build_atomic_ops.sh.cygwin, libgc/checksums.c, libgc/compile,
	libgc/configure.ac, libgc/darwin_stop_world.c, libgc/dbg_mlc.c,
	libgc/depcomp, libgc/dyn_load.c, libgc/finalize.c, libgc/gc.mak,
	libgc/gc_cpp.cc, libgc/gc_dlopen.c,libgc/gcj_mlc.c, libgc/headers.c,
	libgc/install-sh, libgc/mach_dep.c, libgc/malloc.c, libgc/mallocx.c,
	libgc/mark.c, libgc/mark_rts.c, libgc/mips_sgi_mach_dep.s, libgc/misc.c,
	libgc/missing, libgc/mkinstalldirs, libgc/new_hblk.c, libgc/obj_map.c,
	libgc/os_dep.c, libgc/pthread_stop_world.c, libgc/pthread_support.c,
	libgc/ptr_chck.c, libgc/real_malloc.c, libgc/reclaim.c,
	libgc/sparc_mach_dep.S, libgc/stubborn.c,
	libgc/thread_local_alloc.c, libgc/typd_mlc.c, libgc/win32_threads.c,
	libgc/doc/README, libgc/doc/README.DGUX386, libgc/doc/README.arm.cross,
	libgc/doc/README.autoconf, libgc/doc/README.darwin,
	libgc/doc/README.environment, libgc/doc/README.macros,
	libgc/doc/README.solaris2, libgc/doc/README.win32,
	libgc/doc/README.win64, libgc/doc/doc.am, libgc/doc/gcdescr.html,
	libgc/doc/gcinterface.html, libgc/doc/simple_example.html, 
	libgc/include/cord.h, libgc/include/gc.h, libgc/include/gc_allocator.h,
	libgc/include/gc_backptr.h, libgc/include/gc_config_macros.h,
	libgc/include/gc_cpp.h, libgc/include/gc_gcj.h,
	libgc/include/gc_inline.h, libgc/include/gc_mark.h,
	libgc/include/gc_pthread_redirects.h, libgc/include/gc_typed.h,
	libgc/include/gc_version.h, libgc/include/javaxfc.h,
	libgc/include/new_gc_alloc.h, libgc/include/private/darwin_semaphore.h,
	libgc/include/private/darwin_stop_world.h,
	libgc/include/private/dbg_mlc.h, libgc/include/private/gc_hdrs.h,
	libgc/include/private/gc_locks.h, libgc/include/private/gc_pmark.h,
	libgc/include/private/gc_priv.h, libgc/include/private/gcconfig.h,
	libgc/include/private/pthread_stop_world.h,
	libgc/include/private/pthread_support.h,
	libgc/include/private/thread_local_alloc.h,
	libgc/tests/huge_test.c, libgc/tests/leak_test.c, libgc/tests/test.c,
	libgc/tests/test_cpp.cc, libgc/tests/tests.am,
	libgc/tests/thread_leak_test.c, libgc/tests/trace_test.c,
	libgc/libatomic_ops/ChangeLog, libgc/libatomic_ops/INSTALL,
	libgc/libatomic_ops/Makefile.in, libgc/libatomic_ops/README,
	libgc/libatomic_ops/aclocal.m4, libgc/libatomic_ops/compile,
	libgc/libatomic_ops/config.guess, libgc/libatomic_ops/config.sub,
	libgc/libatomic_ops/configure, libgc/libatomic_ops/configure.ac,
	libgc/libatomic_ops/depcomp, libgc/libatomic_ops/install-sh,
	libgc/libatomic_ops/missing, libgc/libatomic_ops/mkinstalldirs,
	libgc/libatomic_ops/doc/Makefile.am, libgc/libatomic_ops/doc/Makefile.in,
	libgc/libatomic_ops/doc/README.txt,
	libgc/libatomic_ops/doc/README_malloc.txt,
	libgc/libatomic_ops/doc/README_stack.txt,
	libgc/libatomic_ops/src/Makefile.am, libgc/libatomic_ops/src/Makefile.in,
	libgc/libatomic_ops/src/Makefile.msft,
	libgc/libatomic_ops/src/atomic_opss.c,
	libgc/libatomic_ops/src/atomic_ops.h,
	libgc/libatomic_ops/src/atomic_ops_stack.c,
	libgc/libatomic_ops/src/atomic_ops_stack.h,
	libgc/libatomic_ops/src/config.h.in,
	libgc/libatomic_ops/src/atomic_ops/Makefile.in,
	libgc/libatomic_ops/src/atomic_ops/generalize-small.h,
	libgc/libatomic_ops/src/atomic_ops/generalize.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/Makefile.am,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/Makefile.in,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/acquire_release_volatile.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/aligned_atomic_load_store.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/all_aligned_atomic_load_store.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/all_atomic_load_store.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/ao_t_is_int.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/atomic_load_store.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/char_acquire_release_volatile.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/char_atomic_load_store.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/generic_pthread.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/int_acquire_release_volatile.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/int_aligned_atomic_load_store.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/int_atomic_load_store.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/ordered.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/ordered_except_wr.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/read_ordered.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/short_acquire_release_volatile.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/short_aligned_atomic_load_store.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/short_atomic_load_store.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/standard_ao_double_t.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/test_and_set_t_is_ao_t.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/armcc/arm_v6.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/gcc/alpha.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/gcc/arm.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/gcc/hppa.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/gcc/ia64.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/gcc/m68k.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/gcc/mips.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/gcc/powerpc.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/gcc/s390.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/gcc/sparc.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/gcc/x86.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/gcc/x86_64.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/hpc/hppa.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/hpc/ia64.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/ibmc/powerpc.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/icc/ia64.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/msftc/x86.h,
	libgc/libatomic_ops/src/atomic_ops/sysdeps/msftc/x86_64.h,
	libgc/libatomic_ops/tests/Makefile.in: update

	libgc/CMakeLists.txt, libgc/configure_atomic_ops.sh,
	libgc/doc/README.cmake, libgc/extra/gc.c,
	libgc/include/private/config.h.in, libgc/m4/gc_set_version.m4,
	libgc/tests/CMakeLists.txt, libgc/tests/staticrootslib.c,
	libgc/tests/staticrootstest.c: Add

	* libgc/AmigaOS.c, libgc/MacOS.c, libgc/add_gc_prefix, libgc/gcname.c,
	libgc/if_mach.c, libgc/if_not_there.c, libgc/msvc_dbg.c, libgc/setjmp_t.c,
	libgc/threadlibs.c: Move to extras directory

	* libgc/extra/AmigaOS.c, libgc/extra/MacOS.c,  libgc/extra/add_gc_prefix,
	libgc/extra/gcname.c, libgc/extra/if_mach.c, libgc/extra/if_not_there.c,
	libgc/extra/msvc_dbg.c, libgc/extra/setjmp_t.c, libgc/extra/threadlibs.c:
	moved from libgc directory to here

	* libgc/NT_THREADS_MAKEFILE, libgc/acinclude.m4, libgc/tests/threadlibs.c:
	deleted

	Update libgc to 7.2alpha5 (current cvs)

2010-06-02  Klaus Treichel  <ktreichel@web.de>

	* engine/Makefile.am: Readd libgc's include directory to the compiler
	flags.

	* tests/Makefile.am: likewise.

2010-06-01  Klaus Treichel  <ktreichel@web.de>

	* support/pt_defs.h: Don't include libgc's private header gc_priv.h
	here anymore because SIG_SUSPEND is needed only in pt_defs.c.

	* support/pt_defs.c: Include libgc's private header gc_priv.h here
	now and handle it's definition of SIG_SUSPEND.
	Use one global static sigset now for the signals to wait for in a
	suspended thread.

	* engine/Makefile.am: Remove libgc's include directories from the compiler
	flags as they are not needed anymore.

	* tests/Makefile.am: likewise.

2010-04-25  Klaus Treichel  <ktreichel@web.de>

	* engine/md_amd64.h (md_tan_reg_float): Pop the additional 1 pushsed
	by the fptan opcode from the fpu register stack.

	* engine/md_x86.h (md_tan_reg_float): likewise.

2010-04-20  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_gc.c (_IL_GC_ReRegisterForFinalizeInternal): Set the
	finalization context for the reregistered finalizer.

	* engine/arm_codegen.h (arm_alu_reg_reg_lslimm, arm_muladd_reg_reg_reg):
	Add codegeneration macros.

	* engine/md_arm.h (md_lea_membase): Optimize
	(md_lea_memindex_shift, md_lea_memindex_mul): Add macros for calculating
	the effective addresses of array elements.

2010-04-18  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.h: Replace the opcode COP_CKARRAY_LOAD_I4 by the two
	opcodes COP_ELEM_ADDR_SHIFT_I4 and COP_ELEM_ADDR_MUL_I4.

	* engine/cvm_dasm.c: Sync opcode tables with cvm.h.

	* engine/cvm_lengths.h: Likewise

	* engine/cvm_ptr.c (COP_ELEM_ADDR_SHIFT_I4, COP_ELEM_ADDR_MUL_I4): 
	Implement the two new opcodes.
	(COP_CKARRAY_LOAD_I4): Remove implementation of this opcode.

	* engine/cvmc_ptr.c (GetArrayElementAddress): Add new support function
	for the cli LDELEMA opcode.
	(CVMCoder_ArrayAccess): Use the new function for the IL_OP_LDELEMA
	opcode.

	* engine/md_amd64.h (md_lea_memindex_shift): Add macro for unrolling the
	COP_ELEM_ADDR_SHIFT_I4 opcode.

	* engine/md_x86.h (md_lea_memindex_shift): Likewise.

	* engine/unroll_ptr.c (COP_ELEM_ADDR_SHIFT_I4, COP_ELEM_ADDR_MUL_I4):
	Add support for unrolling these opcodes.

2010-04-11  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Add check for the endianness of the target.

	* engine/arm_codegen.h: Rework loading and storing 16 bit values and
	signed bytes using the LDRH / STRH opcodes and the LDRSH and LDRSB
	opcodes if available (armv4 and later).

	* engine/cvm_config.h: Define CVM_LITTLE_ENDIAN for arm if the target
	is running in little endian mode.

	* engine/md_arm.c (_arm_alu_reg_imm): Add missing assignment of the
	returnvalue from the call to _arm_move_reg_imm to inst.

2010-04-10  Klaus Treichel  <ktreichel@web.de>

	* engine/md_arm.h: Fix loads and stores from/to single precision float
	arrays. Change some temporary variables in macros to distinct names.
	Implement truncation from double to single precision stack value.

2010-04-09  Klaus Treichel  <ktreichel@web.de>

	* engine/unroll.c: Rework register allocation for non stack organized
	floatingpoint units. Track the used word and floatingpoint registers
	in distinct bitmasks to allow up to 32 word registers and
	32 floatingpoint registers.

2010-04-08  Klaus Treichel  <ktreichel@web.de>

	* engine/unroll_conv.c (COP_F2I, COP_F2IU): Add unroller support for
	these cvm opcodes.

	* engine/md_arm.h: Add support for converting 32 bit ints from and to
	floatingpoint values. Add support for float array loads and stores.

	* engine/arm_codegen.h: Add code generation macros for int to float
	conversions and vice versa.
 
2010-04-07  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.h: Mark the no longer used opcode COP_CCTOR_ONCE unsused.
	Omit the padding of the CVMWord for arm eabi too.

	* engine/cvm_call.c: Remove the code for the COP_CCTOR_ONCE opcode.

	* engine/amd64_codegen.h: Add memindex addressing macros for fld and
	fst opcodes.

	* engine/x86_codegen.h:  Add memindex addressing macros for fld and
	fst opcodes.

	* engine/md_amd64.c: Some reformatting.

	* engine/md_amd64.h: Add conversion macros from signed and unsigned
	32 bit and signed 64 bit integer values to floats.
	Add macros for loading and storing floatingpoint values from/to arrays.

	* engine/md_x86.h: Add conversion macros from signed and unsigned
	32 bit and signed 64 bit integer values to floats.
	Add macros for loading and storing floatingpoint values from/to arrays.

	* engine/unroll.c (GetTopTwoWordAndFPRegisters): Function added for
	floatingpoint array stores.

	* engine/unroll_arith.c: Reenable unrolling of operations with longs for
	arm eabi.

	* engine/unroll_conv.c (COP_I2F, COP_IU2F, COP_L2F, COP_LU2F): Add
	unroller support for these cvm opcodes.

	* engine/unroll_ptr.c (COP_PREFIX_FREAD_ELEM, COP_PREFIX_DREAD_ELEM,
	COP_PREFIX_FWRITE_ELEM, COP_PREFIX_DWRITE_ELEM): Add unroller support
	for these cvm opcodes.

2010-04-06  Klaus Treichel  <ktreichel@web.de>

	* engine/amd64_codegen.h: Remove emitting the Rex prefix for some fpu
	opcodes where it's not needed.

	* engine/md_amd64.h: Add macros for unary float operations.

	* engine/md_x86.h: Add macros for unary float operations.

	* engine/unroll_arith.c (COP_PREFIX_COS, COP_PREFIX_SIN, COP_PREFIX_TAN):
	Add unroller support for these cvm opcodes.

2010-04-05  Klaus Treichel  <ktreichel@web.de>

	* engine/arm_codegen.h: Add code generation macros for arm vfp support.

	* engine/md_arm.c (_md_arm_cmp_float): Added.

	* engine/md_arm.h: Add unroller code generation macros for arm float
	support.

	* engine/unroll_arith.c (COP_PREFIX_ABS_R4, COP_PREFIX_ABS_R8,
	COP_PREFIX_SQRT): Add unroller support for these cvm opcodes.

2010-04-02  Klaus Treichel  <ktreichel@web.de>

	* support/interlocked_arm.h (ILInterlockedCompareAndExchangeI4): Use a
	branch out of the ldrex/strex block if the loaded value doesn't match
	the comparand because strexeq doesn't set state to successfull if the
	condition doesn't match on real hardware.
	(ILInterlockedCompareAndExchangeI4_Acquire): likewise
	(ILInterlockedCompareAndExchangeI4_Release): likewise
	(ILInterlockedCompareAndExchangeI4_Full): likewise
	(ILInterlockedCompareAndExchangeP): likewise
	(ILInterlockedCompareAndExchangeP_Acquire): likewise
	(ILInterlockedCompareAndExchangeP_Release): likewise
	(ILInterlockedCompareAndExchangeP_Full): likewise

	* support/interlocked.h: Include interlocked_mips.h.

	* support/interlocked_mips.h: Add interlocked functions for mips.

	* support/Makefile.am: Add interlocked_mips.h to the sources.

2010-03-27  Klaus Treichel  <ktreichel@web.de>

	* support/interlocked_arm.h: Disable the InterlockedExchange functions
	for arm architectures < 6 because they don't interoperate correctly with
	the emulated InterlockedCompareAndExchange functions.

	* support/interlocked_slist.c (ILInterlockedSListAppend): Exchange the
	list's tail with release semantics to make sure all changes done before
	are visible by other cpus at the time the exchange is done.

2010-03-06  Klaus Treichel  <ktreichel@web.de>

	* support/interlocked_slist.c, support/interlocked_slist.h: Add a
	lock free single linked list implementation.

	* support/Makefile.am: Add interlocked_slist.c and interlocked_slist.h
	to the sources.

	* tests/test_thread.c: Add tests for the interlocked slist.
 
2010-02-21  Klaus Treichel  <ktreichel@web.de>

	* support/monitor.c: Replace the single list of monitors by one with
	all monitors and one global free list.
	(_ILMonitorInit, _ILMonitorDestroy): Adjust for the two lists.
	(DestroyMonitorList): Rename to DestroyMonitorUsedList.
	(ListCount): Replace by the new functions FreeListCount and
	UsedListCount.
	(ILMonitorPrintStats): Relplace calls to ListCount by calls to the
	replacements.
	(_ILMonitorPoolDestoy): Destroy only the monitors on the used list
	because all monitors are on this list now..
	(_ILMonitorPoolAllocMonitor): Adjust for the two monitor lists and
	use _ILMonitorAcquire to get the ownership of a monitor on the global
	free list.
	(_ILMonitorPoolReclaimMonitor): Adjust for the two monitor lists.
	(_ILMonitorPoolMoveToFreeList): Rename to _ILMonitorPoolAddToFreeList.
	(_ILMonitorPoolAddListToFreeList): Add function for adding a monitor
	list to the fglobal free list.
	(_ILMonitorDestroyThread): Add function for cleaning up thread local
	monitor free lists.
	(ILMonitorTimedTryEnter): Add handling for thread local monitor free
	lists.
	(ILMonitorExit): likewise

	* support/no_defs.h, support/pt_defs.h, support/w32_defs.h: Add
	definitions for _ILMonitorAcquire and _ILMonitorRelease.

	* support/thr_defs.h: Add members for the thread local monitor free
	list to the ILThread declaration.
	(_ILMonitorDestroyThread): Add prototype.

	* support/thread.c (_ILThreadDeinit, ILThreadRunSelf, _ILThreadRun):
	Add calls to the new monitor cleanup function.

2010-02-14  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Extend the  --with-libffi switch so that it's possible
	now to choose between the system supplied libffi version (system), the
	one that comes with pnet (internal) or no libffi.

	* engine/Makefile.am: Handle the libgc and libffi dependend switches at
	one place now.

	* engine/pinvoke.c (_ILMakeClosureForDelegate): Use ffi_closure_alloc now
	for allocating the memory for the closure.
	Replace calls to the deprecated function ffi_prep_closure with calls to
	the new function ffi_prep_closure_loc.

2010-02-11  Klaus Treichel  <ktreichel@web.de>

	* support/pt_defs.c (_ILThreadInitSystem): Initialize a static signal
	mask for interrupting waiting threads.
	Use the static signal mask in the *INTERRUPTIBLE macros.

2010-02-07  Klaus Treichel  <ktreichel@web.de>

	* support/interlocked.c: Move the previously inlined backup functions
	from support/interlocked_any.h to this new file.

	* support/interlocked.h: Add prototypes for the backup functions.

	* support/interlocked_any.h: Move the backup functions to
	support/interlocked.c and replace then with prototypes if they are needed
	only conditionally (like 64bit versions on 32bit archs).

	* support/Makefile.am: Add interlocked.c to the sources.

	* support/thread.c (_ILThreadInit): Add initialization of the interlocked
	operations.

2010-01-31  Klaus Treichel  <ktreichel@web.de>

	* libffi/ChangeLog, libffi/Makefile.am: update to version 3.0.9
	* libffi/README, libffi/configure.ac, libffi/libtool-version: likewise
	* libffi/include/ffi.h.in, libffi/include/ffi_common.h: likewise
	* libffi/src/closures.c, libffi/src/debug.c: likewise
	* libffi/src/dlmalloc.c, libffi/src/java_raw_api.c: likewise
	* libffi/src/prep_cif.c, libffi/src/raw_api.c: likewise
	* libffi/src/types.c: likewise
	* libffi/src/alpha/ffi.c, libffi/src/alpha/ffitarget.h: likewise
	* libffi/src/alpha/osf.S: likewise
	* libffi/src/arm/ffi.c, libffi/src/arm/ffitarget.h: likewise
	* libffi/src/arm/sysv.S: likewise
	* libffi/src/cris/ffitarget.h: likewise
	* libffi/src/frv/eabi.S, libffi/src/frv/ffi.c: likewise
	* libffi/src/frv/ffitarget.h: likewise
	* libffi/src/ia64/ffi.c, libffi/src/ia64/ffitarget.h: likewise
	* libffi/src/ia64/ia64_flags.h, libffi/src/ia64/unix.S: likewise
	* libffi/src/m32r/ffi.c, libffi/src/m32r/ffitarget.h: likewise
	* libffi/src/m32r/sysv.S: likewise
	* libffi/src/m68k/ffitarget.h, libffi/src/m68k/sysv.S: likewise
	* libffi/src/mips/ffi.c, libffi/src/mips/ffitarget.h: likewise
	* libffi/src/mips/n32.S, libffi/src/mips/o32.S: likewise
	* libffi/src/pa/ffi.c, libffi/src/pa/ffitarget.h: likewise
	* libffi/src/pa/hpux32.S, libffi/src/pa/linux.S: likewise
	* libffi/src/powerpc/aix.S, libffi/src/powerpc/aix_closure.S: likewise
	* libffi/src/powerpc/ffi.c, libffi/src/powerpc/ffi_darwin.c: likewise
	* libffi/src/powerpc/ffitarget.h, libffi/src/powerpc/linux64.S: likewise
	* libffi/src/powerpc/linux64_closure.S: likewise
	* libffi/src/powerpc/ppc_closure.S, libffi/src/powerpc/sysv.S: likewise
	* libffi/src/s390/ffi.c, libffi/src/s390/ffitarget.h: likewise
	* libffi/src/s390/sysv.S: likewise
	* libffi/src/sh/ffi.c, libffi/src/sh/ffitarget.h: likewise
	* libffi/src/sh/sysv.S: likewise
	* libffi/src/sh64/ffi.c, libffi/src/sh64/ffitarget.h: likewise
	* libffi/src/sh64/sysv.S: likewise
	* libffi/src/sparc/ffi.c, libffi/src/sparc/ffitarget.h: likewise
	* libffi/src/sparc/v8.S, libffi/src/sparc/v9.S: likewise
	* libffi/src/x86/darwin.S, libffi/src/x86/darwin64.S: likewise
	* libffi/src/x86/ffi.c, libffi/src/x86/ffi64.c: likewise
	* libffi/src/x86/ffitarget.h, libffi/src/x86/sysv.S: likewise
	* libffi/src/x86/unix64.S, libffi/src/x86/win32.S: likewise
	* libffi/src/x86/freebsd.S, libffi/src/x86/win64.S: added
	* libffi/src/avr32/ffi.c, libffi/src/avr32/ffitarget.h: added
	* libffi/src/avr32/sysv.S: added

2010-01-30  Klaus Treichel  <ktreichel@web.de>

	* support/monitor.c (_ILMonitorInit): Initialize a monitor so that it's
	initially owned by the calling thread.
	(ILMonitorDestroy): Adjust the call to _ILMonitorDestroy to the new
	macro definitions.
	(_ILMonitorPoolAllocMonitor): Install the new monitor (now owned by the
	current thread) at the given monitor location now.
	(ILMonitorTimedTryEnter): Handle the case when there is no monitor
	attached to the given location completely in _ILMonitorPoolAllocMonitor
	now.
	
	* support/no_defs.h (_ILMonitorCreate, _ILMonitorDestroy): Change macros
	so that the return value is an additional argument.

	* support/pt_defs.h (_ILMonitorCreate, _ILMonitorDestroy): Change macros
	so that the return value is an additional argument.
	Add checks if semaphore or condition variable based locks should be used.
	Add definitions for condition variable based interruptible locks.

	* support/pt_defs.c: (SemWaitInterruptible, SemTimedWaitInterruptible,
	SemWaitUninterruptible): Rename to LockWaitInterruptible,
	LockTimedWaitInterruptible and LockWaitUninterruptible.
	(LockSignal, LockSignalCount, LockTrywait): Add functions for semaphore
	based interruptible locks.
	(LockSignal, LockSignalCount, LockTrywait, LockWaitInterruptible,
	LockTimedWaitInterruptible, LockWaitUninterruptible): Add implementations
	for condition variable based interruptible locks.
	(_ILThreadInterrupt): Add thread interrupt for condition variable based
	interruptible locks.
	(_ILMonitorExit): Call LockSignal now.
	(_ILMonitorTimedTryEnter): Call LockTryWait now if timeout is 0.
	Pass a timespec now to LockTimedWaitInterruptible instead of the number
	of milliseconds.
	(_ILMonitorPulse): Call LockSignal now.
	(_ILMonitorPulseAll): Call LockSignalCount now.

	* support/w32_defs.h (_ILCondMutexCreateOwned): Add macro.
	(_ILMonitorCreate, _ILMonitorDestroy): Change macros so that the return
	value is an additional argument.
	(_ILMonitorCreate): Change so that the monitor is initially owned by the
	calling thread.

	* tests/test_thread.c: Adjust the primitive monitor tests to the changed
	semantics of a new created monitor.

2010-01-10  Klaus Treichel  <ktreichel@web.de>

	* support/pt_defs.h: Disable longjmp out of signal handler for NetBSD.

	* support/pt_defs.c: Fix build if longjmp out of signal handler is not
	supported.

2009-12-31  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.h (_ILExecThreadClearExecutionState): Add prototype.

	* engine/heap.c (_ILFinalizeObject): Reclaim the monitor still attached
	to a finalized object.

	* engine/thread.c (_ILExecThreadClearExecutionState): Add function to
	clear the data not needed anymore after execution of the thread finished.

	* engine/lib_thread.c (__PrivateStreadStart): Clear the execution state
	of the thread after it finished execution to allow collection of the
	clr thread by the gc.
	(_IL_Thread_Start): Use the new monitor implementation instead of the
	ILWaitMonitor to lock the thread.

	* include/il_thread.h: Move the threading error code definitions and
	monitor prototypes from thr_defs.h to here.

	* support/thr_defs.h: Move the threading error code definitions and
	monitor prototypes to il_thread.h.

	* support/thread.c: Add more debugging support.
	Move running the thread's cleanup functions from _ILThreadRun to
	_ILPrivateThraedDestroy.

2009-12-30  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Add checks for the nanosleep and clock_nanosleep
	functions.

	* engine/engine.h: Add prototype for the _ILExecThreadHandleError
	function.

	* engine/lib_monitor.c: Use the new monitor implementation now.

	* engine/lib_thread.c (_IL_Thread_InternalSleep): Use the new function
	_ILExecThreadHandleError instead of _ILExecThreadHandleWaitResult for
	handling errors.

	* engine/thread.c (_ILExecThreadHandleError): Add new function.

	* support/monitor.c: Rework the monitor implementation.

	* support/no_defs.h, support/pt_defs.h, support/w32_defs.h: Add
	definitions for the new _ILCriticalSection type.
	(_ILThreadInterrupt, _ILThreadSleep): Add prototypes
	(_ILMonitorTimedWait, _ILMonitorWait): Change prototypes

	* support/pt_defs.h: Change the monitor to using two semaphores instead
	of a condition variable and a mutex to be able to interrupt the waits via
	calls to _ILThreadInterrupt.

	* support/no_defs.c (_ILThreadInterrupt, _ILThreadSleep): Added

	* support/pt_defs.c: Add support for interrupting waits.
	(_ILThreadInterrupt, _ILThreadSleep): Added
	Rework the primitive monitor with using semaphores.

	* support/w32_defs.c: Add support for using compiler tls for the current
	thread.
	(_ILThreadInterrupt, _ILThreadSleep): Added
	(_ILWaitHandleWaitInterruptible): Added to do an allertible wait on a
	 handle.
	Rework the primitive monitor implementation.

	* support/thr_defs.h: Replace _ILMutexes by _ILCriticalSections.
	Split the threadstate in a private and public part.
	Add the macros for critical sections.
	(_ILThreadEnterWaitState, _ILThreadLeaveWaitState): Add prototypes.
	Rework the ILMonitor definition.

	* support/thread.c: Replace _ILMutexes by _ILCriticalSections.
	Control destruction of the ILThread structure by a reference count.
	(_ILThreadEnterWaitState, _ILThreadLeaveWaitState): Add
	(ILThreadSpleep): Change to use the native _ILThreadSleep
	implementations.
	(ILThreadDestroy): Destroying a thread doesn't abort the thread to
	destroy anymore.

	* support/wait.c (_ILEnterWait, _ILLeaveWait): Redo

	* support/wait_event.c, support/wait_mutex.c, support/wait_mutex.h:
	Adjust to use critilal sections instead of mutexes and the splited
	thread state.

	* tests/test_thread.c: Adjust monitor tests to the new monitor
	implementation.
	Add tests for interrupting and aborting a thread while entering or
	waiting on a monitor.

2009-12-23  Klaus Treichel  <ktreichel@web.de>

	* engine/verify_except.c (OutputExceptiopnTable): Fix some whitespace
	formatting.

	* support/wakeup.c (_ILWakeupDestroy): likewise

	* support/thr_defs.h: likewise

	* support/thread.c: likewise

2009-12-22  Klaus Treichel  <ktreichel@web.de>

	* tests/Makefile.am: Fix make distcheck build.

2009-12-20  Klaus Treichel  <ktreichel@web.de>

	* support/thread.c (ILThreadIsAborting): Don't acquire the thread's lock
	for reading it's state.
	(ILThreadIsAbortRequested): likewise
	(ILThreadGetState): likewise
	(ILThreadCreate): Replace the locking and unlocking of the threading
	subsystem by a memory barrier.

	* support/thread.c: Use interlocked functions for loading and storing
	the thread's state.

	* support/wait.c: likewise

	* support/wait_mutex.h: likewise

2009-12-12  Klaus Treichel  <ktreichel@web,de>

	* engine/jitc_branch.c (JITCoder_Label): Revert the change from the
	previous commit.

	* engine/jitc_setup.c (JITCoder_Setup): Don't add the label for the
	0 offset anymore.

	* engine/verify.c: Some reformatting.

	* engine/verify_except.c (OutputExceptionTable): Invoke the coder
	TryHandlerStart, Throw and TryHandlerEnd functions only if there is at
	least one handler or a finally or fault clause for the region present.

2009-12-09  Klaus Treichel  <ktreichel@web,de>

	* engine/jitc_branch.c (JITCoder_Label): Don't add the label for offset
	0 here because that was already done during setup.

	* engine/jitc_locals.c (_ILJitLocalsInit): Create new blocks for the
	start and end label to make sure that they are on different blocks.

2009-11-24  Klaus Treichel  <ktreichel@web.de>

	* engine/verify_call.c (TryInlineLoad): Remove the extra check for value
	types.
	Fix the case in inlining a constant load where the first argument to the
	method to be inlined is not an object but a reference to a value type.

2009-11-15  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Add checks for the gcc options
	-fno-inline-small-functions and -fno-inline-functions-called-once and
	add them to NO_INLINE_FUNCTIONS.

	* engine/lib_socket.c (_IL_IPAddress_HostToNetworkOrder_l): Use a
	conversion helper union to fix a type pruned pointer warning.
	(_IL_IPAddress_HostToNetworkOrder_i): likewise
	(_IL_IPAddress_HostToNetworkOrder_s): likewise

	* engine/lib_stringbuilder.c (Append): Change type of value argument from
	ILInt16 * to ILUInt16 *.
	(_IL_StringBuilder_Append_ac): Cast value argument in call to Append from
	ILInt16 * to ILUInt16 *.
	(_IL_StringBuilder_Appendacii): likewise
	(_IL_StringBuilder_Insert_iStringi): Change type of buf from ILInt16 * to
	ILUInt16 *.

	* support/socket.c (ILSysIOSockesAccept): Change sa_len to socklen_t on
	non windows systems.
	(ILSysIOSocketRecvFrom): likewise
	(ILSysIOSocketGetName): likewise
	(ILSysIOSocketGetOption): Change optlen to socklen_t on non windows
	systems.
	(ILSysIOSocketGetLinger): Change size to socklen_t on non windows
	systems.
	(ILSysIODiscoverIrDADevices): Change nativeLen to int on windows systems
	and socklen_t otherwise.

2009-11-08  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.h: Centralize the declarations of METADATA_WRLOCK and
	METADATA_UNLOCK here.

	* engine/cctormgr.c: Remove local declarations of METADATA_WRLOCK and
	METADATA_UNLOCK;

	* engine/jitc.c: likewise

	* engine/heap.c (InitializeClass): Replace local implementation with
	usage of the macros METADATA_WRLOCK and	METADATA_UNLOCK.

	* engine/convert.c: Remove local declarations of METADATA_WRLOCK and
	METADATA_UNLOCK and adjust the usages so that the process is passed
	instead of the thread.

2009-11-07  Klaus Treichel  <ktreichel@web.de>

	* include/il_coder.h: Declare the ILCoderPrefixInfo struct and add a
	pointer to that struct as argument to coder functions where the used
	prefixes might be interresting.

	* engine/verify.c, engine/verify_call.c, engine/verify_obj.c,
	engine/verify_ptr.c, engine/verify_var.c: Change the prefix handling to
	storing the prefixes for a regular opcode in an ILCoderPrefixInfo struct
	and pass it to the coder function while processing the regular opcode.

	* engine/cvmc.c, engine/cvmc_obj.c, engine/cvmc_ptr.c: Add a pointer to
	the prefix info struct to the coder functions where needed.

	* engine/jitc.c, engine/jitc_array.c, engine/jitc_obj.c,
	engine/jitc_ptr.c: likewise

	* engine/null_coder.c: likewise
	
2009-10-29  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_grammar.y: Fix parsing for stackalloc.

	* cscc/csharp/cs_misc.tc: Implement semanalyzing and codegeneration for
	stackalloc.

	* support/pt_defs.c: Initialize the thread local variable _myThread
	with 0.

	* support/thr_defs.h: Add macros for internal use _ILHasThreads and
	_ILThreadSelf that should be used internally instead of the public
	functions with the same name without leading underscore.

	* support/hb_gc.c, support/thread.c: Replace calls to the public
	functions with the internal macros where appropriate.

	* tests/ilunit.h: Add prototype for test cleanup function
	ILUnitCleanupTests.

	* tests/ilunit.c (main): Call ILUnitCleanupTests after tests finished.

	* tests/test_crypt.c, tests/test_thread.c : Add ILUnitCleanupTests.

2009-10-28  Klaus Treichel  <ktreichel@web.de>

	* support/interlocked.h, support/interlocked_any.h,
	support/interlocked_arm.h, support/interlocked_ppc.h,
	support/interlocked_x86.h: Extend interlocked
	functions to support multiple native types.

	* support/monitor.c: Adjust calls to interlocked functions to the
	new extended name scheme with type specifier.

	* test/test_thread.c: likewise

	* engine/cvm_call.c: likewise

	* engine/lib_defs.h: likewise

	* engine/lib_object.c: likewise

	* engine/thread.c: likewise

	* engine/jitc.c: likewise

	* engine/lib_thread.c: Use the new interlocked functions where possible.

	* engine/jitc_profile.c (_ILJitInterlockedIncrement): Add wrapper
	function for ILInterlockedIncrementI4.
	(_ILJitProfileIncreaseMethodCallCount): Call the new wrapper function
	now instead of ILInterlockedIncrementI4 because this might be a macro.

	* engine/jitc_locals.c (_ILJitLocalsInit): Move the initialization blocks
	to the start of the function only if startlabel and endlabel belong to
	different blocks (non empty init block).
 
2009-10-11  Klaus Treichel  <ktreichel@web.de>

	* support/Makefile.am: add interlocked_arm.h and interlocked_ppc.h to
	the sources.

	* support/interlocked.h: Add notes ablut the now available relaxed,
	acquire, release and full memory order semantics of the available
	interlocked functions.
	Include interlocked_ppc.h.

	* support/interlocked_any.h: Add alternative implementations for the
	interlocked functions if no native implementation is available.

	* support/interlocked_arm.h: Add definitions for the interlocked
	functions with acquire, release and full semantics.

	* support/interlocked_x86.h: Append _Full to all interlocked functions
	because lock prefixed functions are a full memory barrier.

	* support/interlocked_ppc.h: Add native interlocked functions for
	32 bit powerpc.

	* tests/test_thread.c: Add tests for interlocked load and store.
	Change the interlocked functions in the thrash tests to acquire and
	release.

2009-09-13  Klaus Treichel  <ktreichel@web.de>

	* support/interlocked.h: Add note about the interlocked functions
	always available with a leading underscore using a mutex to protect
	the value.

	* support/interlocked_any.h: Change according to new note in
	interlocked.h.

	* support/interlocked_x86.h (ILInterlockedExchange,
	ILInterlockedExchangePointers): Fix these two native implementatios to
	use the xchg instead of the cmpxchg opcode.

2009-09-12  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_gc.c (GetGCHandleTable): Fix a bug where a thread could
	possibly see an uninitialized gcHandles table.

2009-09-11  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm_call.c (CHECK_MANAGED_BARRIER): Clear the thread's flags
	by using the new interlocked functions now.
	(VMCASE(COP_PREFIX_PROFILE_COUNT)): Fix a compiler warning by adding
	a cast to ILInt32 * for the pointer to the method call counter.

	* engine/engine.h: Change the member mabagedSafepointFlags to ILUInt32
	to be able to use interlocked functions.

	* engine/jitc.c (ILRuntimeHandleManagedSafePointFlags): Clear the
	thread's _IL_MANAGED_SAFEPOINT_THREAD_SUSPEND flag by using the new
	interlocked functions now.

	* engine/lib_thread.c (_IL_Thread_ResetAbort): Clear the thread's
	_IL_MANAGED_SAFEPOINT_THREAD_ABORT flag by using the new interlocked
	functions now.

	* engine/thread.c (_ILExecThreadSelfAborting, _ILExecThreadResumeThread,
	_ILExecThreadSuspendThread, _ILExecThreadAbortThread): Set and clear
	the managedSafepointFlags by using the new interlocked functions now.

	* support/interlocked.h: Include the file with new interlocked
	functions for arm.

	* support/interlocked_arm.h: Add interlocked functions for arm.

	* support/interlocked_x86.h (ILInterlockedAnd, ILInterlockedOr):  Add
	the "e" constraint to value so that gcc can use immediates directly
	instead of having to load them into a register first.

2009-09-10  Klaus Treichel  <ktreichel@web.de>

	Change internal organization of the interlocked functions.

	* support/interlocked.h: Add documentation notes for the implemented
	functions.

	* support/interlocked_any.h (ILInterlockedAdd): Add generic function
	for an atomic addition of two 32 bit integers.
	(ILInterlockedAnd): Add generic function for an atomic bitwise and of
	two 32 bit integers.
	(ILInterlockedSub): Add convinience macro for subtraction of two
	32 bit integers using ILInterlockedAdd.
	(ILInterlockedOr): Add generic function for an atomic bitwise or of
	two 32 bit integers.
	(ILInterlockedIncrement): Change to a macro using ILInterlockedAdd.
	(ILInterlockedDecrement): Change to a macro using ILInterlockedSub.

	* support/interlocked_x86.h (ILInterlockedIncrement): Change to more
	general function ILInterlockedAdd with an additional increment value
	argument.
	(ILInterlockedAnd): Add x86 version for an atomic bitwise and of two
	32 bit integers.
	(ILInterlockedOr): Add x86 version for an atomic bitwise or of two
	32 bit integers.

	* tests/test_thread.c: Add tests for the interlocked functions.

2009-09-08  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.c: Add support for restoring the interpreter state after
	returnining to the interpreter from a longjmp for X86_64 and ARM.
	Change restoring the interpreter register variables after returning to
	the interpreter from a lngjmp for x86.

	* engine/engine.h: Add x86_64 and ARM to the platforms that support
	interrupt based exception handling.

	* support/interrupt.h: Add the declaration of the interrupt contexts for
	x86_64 and ARM.

	* support/interrupt_posix.c (__sigaction_handler): Copy the information
	from the signal context to the interrupt context for x86_64 amd ARM now
	too.

2009-09-07  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Add check for the functions _setjmp, _lingjmp and
	__sigsetjmp (which is the actual implementation of sigsetjmp on linux).

	* support/interrupt.h: Fix the selection of sigsetjmp where sigsetjmp
	is actually a macro (using __sigsetjmp) and not found by configure.

	* support/interrupt_posix.c: Remove the definition of __USE_GNU as
	this is handled by configure now.

2009-09-06  Klaus Treichel  <ktreichel@web.de>

	* support/thr_defs.h: Add note for how to change a thread's state.
	Add IL_THREAD_ERR_ABORTED to the threading error codes.
	Change the member state in the ILThread to ILUInt16.
	Add IL_TS_INTERRUPTED_OR_ABORT_REQUESTED to the thread state masks.
	Add the ILWaitHandleVtable sructure to hold the members common to all
	waithandles of one kind.
	Replace the members common to waithandles of one kind with a reference
	to a ILWaitHandleVtable sructure.
	Add macros for accessing the members of a ILWaitHandle.

	* support/thread.c: Change the thread's state modification according
	to the new note in support/thr_defs.h.

	* support/wait.c: Change the thread's state modification according
	to the new note in support/thr_defs.h.
	Use the new macros for accessing the waithandle	members now.

	* support/wait_event.c: Define the waithandle vtable for events and
	store a reference in the new event's waithandle vtable.

	* support/wait_mutex.c: Define the waithandle vtables for wait mutexes,
	named wait mutexes and wait monitors and store a reference to the
	corresponding vtable in the new waithandle's vtable.
	Use the new macros for accessing the waithandle	members now.

	* support/wait_mutex.h: Change the thread's state modification according
	to the new note in support/thr_defs.h.
	Use the new macros for accessing the waithandle	members now.

2009-09-05  Klaus Treichel  <ktreichel@web.de>

	* engine/convert.c (ConvertMethod): Unlock the metadata here if the
	function doesn't return with success.

	* engine/jitc.c (_ILJitOnDemandDriver): Unlock the metadata on failure
	only if the on demand compiler function was != _ILJitCompile because
	the metadata was unlocked there in case of failure.
	(_ILJitCompile): Unlock the metadata if there is no method attached to
	the jit function to be consistent with _ILConvertMethod.

2009-09-03  Klaus Treichel  <ktreichel@web.de>

	* support/no_thread.c: Delete obsolete file

	* support/interrupt_posix.c: Replace calls to ILThreadSelf by calls to
	_ILThreadGetSelf.

	* support/interrupt_win32.c: likewise

	* support/wait.c: likewise

	* support/wait_mutex.c: likewise

2009-09-02  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Add configure switch --enable-tls to allow enabling
	usage of thread local storage if the compiler and kernel support is
	available.

	* support/pt_defs.h: Check if thread local storage should be used and
	use it for GCC for now. Change the declarations for _ILThreadGetSelf
	and _ILThreadSetSelf for this case and declare the thread local
	variable _myThread to hold the pointer to the current ILThread.

	* support/pt_defs.c (_ILThreadInitSystem): Don't allocate a pthread key
	for the	current thread if compiler tls is used.
	(ThreadStart): Simply store the current thread in _myThread if
	compiler tls is used instead of calling pthread_setspecific.

	* include/il_gc.h: Improve comments for ILGCAlloc and ILGCAllocAtomic.

2009-09-01  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Add checks for availability of pthread_mutex_timedlock,
	sem_timedwait and pthread_cond_timedwait.

	* support/Makefile.am: Add monitor.c to the sources.

	* support/monitor.c: Add monitor implementation.

	* support/no_defs.c (_ILMonitorTimedWait): Add dummy implementation that
	simply calls the predicate function.

	* support/no_defs.h: Add macros for the dummy monitor implementation.

	* support/pt_defs.c: Add pthread monitor implementation	Add replacements
	for pthread_mutex_timedlock and sem_timedwait if not available.
	(_ILCondMutexTimedLockUnsafe): Added
	(_ILSemaphoreTimedWait): Added
	(_ILCountSemaphoreSignalCount): Added
	(_ILCountSemaphoreSignalAll): Added
	(_ILCountSemaphoreTimedWait): Added

	* support/pt_defs.h: Add declarations for _ILCountSemaphore and
	_ILMonitor.

	* support/thr_defs.h: Add first threading error codes.
	Rename the current ILMonitor to ILWaitMonitor because it's not a real
	monitor implementation.
	Add declarations for the conforming monitor implementation.

	* support/w32_defs.c (_ILWaitHandleTimedWait): Added
	(_ILCountSemaphoreSignalCount): Added
	(_ILCountSemaphoreSignalAll): Added
	(_ILCountSemaphoreTimedWait): Added
	Add windows monitor implementation.

	* support/w32_defs.h: Add declarations for _ILCountSemaphore and
	_ILMonitor.

	* support/wait_mutex.c: Rename the occurances of ILMonitor to
	ILWaitMonitor.

	* tests/Makefile.am: Add additional include directries to AM_FLAGS
	needed for the additional tests.

	* tests/test_thread.c: Add first tests for the monitor primitives and
	the monitor implementation.

2009-08-13  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_gather.c (AddImplementedInterface): Add helper function
	for adding an interface to the implement list and check for duplicates.
	(CollectBaseClasses, AddBaseClasses): Use the new helper function for
	adding implemented interfaces to the list.

2009-08-10  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_nodes.tc (ILNode_VariableDeclarator): Added.

	* codegen/cg_stmt.tc (ILNode_GenDiscard(ILNode_LocalVarDeclaration)):
	Add generation of the discard code on varnames.
	(ILNode_GenDiscard(ILNode_VariableDeclarator)): Added

	* codegen/jv_stmt.tc (JavaGenDiscard(ILNode_LocalVarDeclaration)):
	Add generation of the discard code on varnames.
	(JavaGenDiscard(ILNode_VariableDeclarator)): Added

	* cscc/c/c_stubs (ILNode_CSemAnalysis(ILNode_VariableDeclarator)):
	Add to stubs.

	* cscc/csharp/cs_defs.tc (ILNode_ResourceDeclaration): Remove init
	member.
	(ILNode_UsingStatement): Replaces old ILNode_Using.
	(ILNode_Using): Add to handle one resource in a using statement.

	* cscc/csharp/cs_gather.c: Do some reformatting.

	* cscc/csharp/cs_grammar.y: Use the new ILNode_VariableDeclarator for
	a variable declaration and make VariableDeclarations an ILNode_List of
	variable declarations.
	Replace creation of Using nodes by UsingStatement nodes.

	* cscc/csharp/cs_lvalue.tc (ILNode_SemAnalyzis(ILNode_LocalVar)): Return
	a semantic value with the type of the local variable now.

	* cscc/csharp/cs_modifiers.c (ModifierError): Add handling of the new
	partial modifier.

	* cscc/csharp/cs_stmt.tc (AddLocalToMethod): Added to replace individual
	implementations in various places.
	(HandleFixedExpr, ILNode_SemAnalysis(ILNode_CatchClause),
	ILNode_SemAnalysis(ILNode_Fixed)) : like here
	(CheckIfDisposable): Add to check if a type implements the
	System.IDisposable interface and print an error if doesn't.
	(FindLocalType): Add function to find a local type incl. handling of the
	var type.
	(HandleLocalDecl): Added to handle the declaration of a local with var
	type handling.
	(HandleForeachVarDecl): Added to handle declaration of the foreach indexer
	variable.
	(ILNode_SemAnalysis(ILNode_Foreach)): Add handling of the local var type.
	(ILNode_SemAnalysis(ILNode_UsingStatement)): Convert the declared
	resources to a number of nested ILNode_Using nodes now.
	(ILNode_GenDiscard(ILNode_UsingStatement)): Generate the discard code on 
	the resources which have been  replaced by using nodes during
	semanalyzing.
	(ILNode_GenDiscard(ILNode_Using)): Generate discard code for one declared
	resource.
	(ILNode_SemAnalysis(ILNode_VariableDeclarator)): Added
	(ILNode_SemAnalysis(ILNode_ResourceDeclaration)): Code removed because
	it is handled completely now in ILNode_SemAnalysis(ILNode_UsingStatement).

2009-08-01  Klaus Treichel  <ktreichel@web.de>

	* codegen/cs_decls.tc (DumpClassMembers): Add helper function for dumping
	class members which hadles partial types.
	(ILNode_GenDiscard(ILNode_ClassDefn)): Do nothing for additional part
	declarations for a type and use DumpClassMembers for dumping the members.

	* codegen/cg_nodes.tc: Add additional members to ILNode_ClassDefn for
	partial type handling.

	* cscc/csharp/cs_attrs.c (CollectAttributes): Added to collect the
	attributes from one attribute tree. (Moved from CSProcessAttrs to here).
	(CSProcessAttrs): Use CollectAttributes for collecting the attributes now.
	(CSProcessAttrsForClass): Added for processing the attributes for a class
	node including it's additional parts.

	* cscc/csharp/cs_decls.tc (HandleStaticCtor): Add handling of the
	additional partial declarations of a type.
	(ILNode_SemAnalysis(ILNode_ClassDefn)): Call CSProcessAttrsForClass
	instead of CSProcessAttrs for processing the attributes of all partial
	declarations of a type in one run. Perform semantic analysis on
	additional partial declarations prior to semanalyzing the main part.
	(CSAddInitCtor): Make sure the pseudo .init method on the main part is
	used.

	* cscc/csharp/cs_gather.c (NumBases): Add helper function to get the
	number of base classes and interfaces for all partial definitions of one
	type.
	(FlagTypeToName): Add helper function.
	(DeclareTypePart): Added to handle the declaration of additional parial
	declarations of a type.
	(AddBaseClasses): Handle the base classes and implemented interfaces of
	all partial declarations for a type.
	(CreateType): Create types only for non partial declarations and the main
	part of a partial type declaration. For additional partial declarations
	handle only the nested typed of that part.
	(CreateField, CreateProperty): Use the modifiers of the main part to
	determine if the owner class is static.
	(CreateMembers): Create the members of additional partial declerations of
	a type too.
	(DeclareTypes): Add handling of partial type declarations.

	* cscc/csharp/cs_grammar.y: Add handling of the 2.x partial type modifier.

	* cscc/csharp/cs_internal.h: Add the CS_MODIFIER_PARTIAL modifier flag.

2009-07-30  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_cast.tc (CSCastMethod): Use CS_MODIFIER_STATIC instead
	of IL_META_METHODDEF_STATIC with the modifiers now.

	* cscc/csharp/cs_decls.tc (AppendStaticCtor): Guard the initialization
	with a SemGuard node if required.
	(CheckStaticCtor): Add helper function to check for multiple static
	constructors.
	(CreateStaticCtorMethod): Move logic from
	ILNode_SemAnalysis(ILNode_ClassDefn) to this helper function.
	(HandleStaticCtor): Move logic from ILNode_SemAnalysis(ILNode_ClassDefn)
	to this new helper function.
	(CSAddInitCtor): Perform semantic analysis on the initialization
	statement in the context of the class node where it is defined here.

	* cscc/csharp/cs_gather.c (CloneLine): New helper function
	(GetMemberVisibilityFromModifiers): likewise
	(PrefixName): likewise
	(GetImplicitParent): likewise.
	(CollectBaseClasses): Move collecting the base classes and implemented
	interfaces from AddBaseClases to this separate function.
	(AddBaseClasses): see CollectBaseClasses.
	(GetTypeAttrs): Add helper function for determining the correct type
	attributes for an ILNode_ClassDefn (Logic moved from cs_grammar.y to here).
	(CreateNestedTypes): Add helper function.
	(AddTypeToList): likewise.
	(AddDefaultCtor): Logic moved from cs_grammar.y to here.
	(CreateType): Move handling of implicit parent classes from cs_grammar.y
	to here. Use the new small helper functions CreateNestedTypec,
	AddTypeToList) instead of having the logic inlined.
	Creation of the default constructor moved to here.
	(GetFieldAttrs): Add helper function for determining the correct field
	attributes for an ILNode_FieldDeclaration (Logic moved from cs_grammar.y
	to here).
	(CreateField): Move check for static classes from cs_grammar.y to here.
	(GetMethodAttrs): Add helper function for determining the correct method
	attributes for an ILNode_MethodDeclaration (Logic moved from cs_grammar.y
	to here).
	(CreateMethod): Move check for static classes from cs_grammar.y to here.
	(CreateProperty): Move check for static classes from cs_grammar.y to
	here.
	(GetEventAccessorModifiers): Add helper function for determining the
	correct attributes for an event accessor.
	(CreateEventDeclMethods): Moved to from cs_grammar.y to here.
	(CreateEventMethods): likewise
	(CreateEventDecl): Move check for static classes from cs_grammar.y to
	here.
	General: Use the new CS_MODIFIER_* flags instead of the metadata
	attribute flags with the node modifiers members.
	Pass the ClassDefn node to the Create* functions indtead of the classInfo.

	* cscc/csharp/cs_grammar.y (GetAccessorAttrs): Rename to
	GetAccessorModifiers to reflect the new purpose to return the accessor
	modifiers instead of the attributes.
	(CreatePropertyMethods): Rename attrs to modifiers and GetAccessorAttrs
	and store the modigfiers in the ILNode_MethodDeclarations.
	(CreateEventDeclMethods): Moved to cs_gather.c
	(CreateEventMethods): likewise
	(parser): Move the checks for static classes to the corresponding Create*
	functions in cs_gather.c.
	Move the modifier to attribute conversions to cs_gather.c and store the
	C# modifiers in the modifiers member of the nodes instead.
	Move the default constructor creation to cs_gather.c
	Move adding the implicit base classes to cs_gather.c

	* cscc/csharp/cs_internal.h: Add additional CS_MODIFIER_ flags used
	during type gathering and semantic analysis.
	(CSProcessAttrsForClass): Add prototype.

	* cscc/csharp/cs_invoke.tc
	(ILNode_SemAnalysis(ILNode_InvokationExpression),
	DelegateCreationSem): likewise

	* cscc/csharp/cs_lvalue.tc (CheckForInstanceAccess,
	(ILNode_SemAnalysis(ILNode_This), ILNode_SemAnalysis(ILNode_Identifier),
	ILNode_SemAnalysis(ILNode_BaseAccess),
	ILNode_SemAnalysis(ILNode_BaseElement)): likewise

	* cscc/csharp/cs_modifiers.c: Omit the CS_SPECIALATTR_* flags from the
	returned attribute flags because the modifiers member holds the modifiers
	from the source now instead of the type/member attributes.

2009-07-25  Klaus Treichel  <ktreichel@web.de>

	* codegen/jv_misc.tc: Add operations JavaGenDiscard for  ILNode_AsIs
	and ILNode_ToConst.

	* cscc/common/cc_main.c (LoadLibrary, LoadLibraryFromPath): Return the
	image or 0 on error instead of simply 0 or 1.
	(LoadLib): Added wrapper for compatibility and error output.
	(InitCodeGen): Set the system image in the context if it is loaded.

2009-07-12  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_misg.tc: Add operations ILNode_GenDiscard for ILNode_AsIs
	and ILNode_ToConst.

	* codegen/cg_scope.c (ILScopeDeclareType): Return the scope where a type
	was declared the first time on attempt to redeclare the same type.

	* cscc/common/cc_preproc.c (RefillLineBuffer): Ignore lines with the
	#pragma directive in builds with a version > 1.

2009-06-28  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_nodes.tc (ILParameterModifier): Add ILParamMod_methodgroup.

	* cscc/csharp/cs_cast.tc (CSCastMethod): Add function to cast a function
	to a delegate.
	(ILNode_SemAnalysis(ILNode_UserCast)): Add support for casting a function
	to a delegate.

	* cscc/csharp/cs_invoke.tc (CSEvalArguments, CSItemIsCandidate): Handle
	function arguments.

	* cscc/csharp/cs_oper.tc (AssignSem): Handle function assignments.

2009-06-13  Klaus Treichel  <ktreichel@web.de>

	* include/il_image.h (ILImageGetSectionSize, ILImageNumMetaEntries):
	Change return type to ILUInt32.
	(ILImageGetSection, ILImageGetMetaEntry, ILImageMetaEntryInfo): Change
	size parameter to ILUInt32 *.
	(ILImageGetString, ILImageGetBlob, ILImageGetUserString): Change offset
	parameter to ILUInt32 and the size parameter to ILUInt32 *.
	(ILImageAddString, ILImageAddBlob, ILImageAddUserString,
	ILImageAddEncodedUserString): Change returned offset to ILUInt32.
	(ILImageAddBlob): Change len parameter to ILUInt32.

	* image/assembly.c: Adjust parameters according to changed prototypea.

	* image/attr.c: likewise

	* image/create.c: likewise

	* image/image.c: likewise

	* include/il_meta.h (ILMetaDataRead): Change len member to ILUInt32.
	(ILMetaCompressData): Change data parameter to ILUInt32.
	(ILMetaCompressToken): Change data parameter to ILToken.
	(ILMetaCompressInt): Change data parameter to ILInt32.

	* image/compress.c: Adjust parameters according to changed prototypea.
	Perform compression using 32 bit values.
: 
	* include/il_program.h (ILAttributeGetValue. ILAssemblyGetOriginator,
	ILAssemblyGetHash, ILConstantGetValue, ILFieldMarshalGetType,
	ILDeclSecurityGetBlob, ILFileDeclGetHash): Change len parameter to ILUInt32 *.
	(ILAttributeSetValue, ILAssemblySetOriginator, ILAssemblySetHash,
	ILConstantSetValue, ILDeclSecuritySetBlob, ILFileDeclSetHash): Change len
	parameter to ILUInt32.
	
	* image/misc_token.c:  Adjust parameters according to changed prototypea.

	* include/il_serialize.h (ILSerializeReaderInit): Change len parameter
	to ILUInt32.
	(ILSerializeWriterGetBlob): Change blobLen parameter to ILUInt32 *.

	* image/ser_parse.c: Adjust parameters according to changed prototypea.

	* image/ser_writer.c: Adjust parameters according to changed prototypea.

	* include/il_writer.h (ILWriterDebugString): Change return type to
	ILUInt32.
	(ILWriterDebugAdd, ILWriterDebugAddPseudo): Change len parameter to
	ILUInt32.

	* image/debug_writer.c: Adjust parameters according to changed prototypea.

	* codegen/cg_decls.tc (ILGenOutputAttributes): Use ILUInt32 values for
	processing blobs instead of unsigned long.

	* codegen/cg_genattr.c (StringToUTF16): Change len parameter to
	ILUInt32 *.
	(WriteCustomAttribute, MarshalAsAttribute, DefaultValueAttribute,
	WritePermissionSet): Use ILUInt32 values for blob processing instead of
	unsigned longs.

	* cscc/c/c_typeout.c (CGGenOutputAttributes): Use ILUInt32 values for blob
	processing instead of unsigned longs.

	* cscc/c/c_types.c (BitFieldLeftOver, BitFieldAdd, CloneStruct,
	CTypeLookupField): Use ILUInt32 values for blob processing instead of
	unsigned longs.

	* cscc/csharp/cs_attrs.c (CSAddDefaultMemberAttribute): likewise

	* cscc/csharp/cs_lvalue.tc (FieldToConstant): likewise

	* cscc/java/java_lvalue.tc (FieldToConstant): likewise

	* csdoc/doc_valil.c (AttributeToName): likewise

	* csdoc/il2doc.c (DumpParamType, AttributeToName): likewise

	* dumpasm/dump_attrs.c (DumpAttrBlob, ILDasmDumpCustomAttrs): likewise

	* dumpasm/dump_class.c (Dump_FieldDef): likewise

	* dumpasm/dump_const.c (ILDumpConstant): likewise

	* dumpasm/dump_global.c (Dump_Assembly, Dump_AssemblyRef, Dump_File):
	likewise

	* dumpasm/dump_method.c (DumpInstructions): likewise

	* dumpasm/dump_type.c (DumpParamType): likewise

	* dumpasm/dump_utils.c (ILDasmDumpSecurity): likewise

	* dumpasm/dump_data.c (ILDasmDumpDataSections): Use ILUInt2 values for
	section sizes instead of unsigned longs.

	* engine/cvm_dasm.c (_ILDumpCVMInsn): Use ILUInt32 values for blob
	processing instead of unsigned longs and ILToken for tokens.

	* engine/lib_emit.c (_IL_AssemblyBuilder_ClrAttributeCreate,
	_IL_FieldBuilder_CleFieldSetConstant,
	_IL_ModuleBuilder_ClrModuleCreateString,
	ILPropertyBuilder_ClrPropertySetConstant,
	IL_SignatureHelper_ClrSigGetBytes): Use ILUInt32 values for blob
	processing instead of unsigned longs.

	* engine/lib_enum.c (GetNextEnumField): likewise

	* engine/lib_string.c (_ILStringInternFromImage): likewise

	* engine/verify_const.c: likewise

	* ilalink/link_attrs.c (_ILLinkerConvertAttrs, _ILLinkerConvertSecurity,
	_ILLinkerConvertDebug): likewise

	* ilalink/link_create.c (ILLinkerCreateModuleAndAssembly): likewise

	* ilalink/link_field.c (_ILLinkerConvertConstant): likewise

	* engine/lib_reflect.c (DeSerializeAttribute, _IL_Assembly_GetFullName,
	FillAssemblyNameFromImage, _IL_FieldInfo_GetFieldFromHandle): likewise
	(CreateResourceStream, _IL_ClrResourceStream_ResourceRead,
	_IL_ClrResourceStream_ResourceReadByte,
	_IL_ClrResourceStream_ResourceGetAddress): Use ILUInt2 values for
	section sizes instead of unsigned longs.

	* ilalink/link_field.c (_ILLinkerConvertMarshal): Use ILUInt32 values for blob
	processing instead of unsigned longs and
	Use ILUInt2 values for section sizes instead of unsigned longs.

	* engine/method_cache.c _ILCacheMarkByteCode): Use ILUInt32 values for
	writing debug info to the cache instead of unsigned longs.

	* ilalink/link_image.c (ProcessImage, ILLinkerPerformLink): Use ILUInt32
	values for blob	processing instead of unsigned longs.

	* ilalink/link_library.c (ScanAssemblies): likewise

	* ilalink/link_method.c (ConvertCode): likewise

	* ilalink/link_module.c (_ILLinkerCreateAttribute, ILLinkerReadAttribute):
	likewise

	* ilasm/ilasm_grammar.y (PackString, PackLength, SetOriginator): likewise

	* ilasm/ilasm_output.c (OutputDebugInfo): likewise

	* ildasm/ildasm_main.c (dumpSectionInHex, dumpMetadataSection): Use
	ILUInt2 values for section sizes instead of unsigned longs.

	* ilsize/ilsize.c (loadImage, printSizes, printDetailed, printClassSizes):
	likewise

	* ilsize/ilsize_est.c (GetBlobSize): Use ILUInt32 values for blob
	processing instead of unsigned longs.

	* image/context.c (_ILContextPersistString): likewise

	* image/debug_reader.c (ILDebugContext): Change member offset to ILUInt32.

	* image/image.h: Change various members for section sizes and blob offsets
	from unsigned long to ILUInt32.

	* image/lib_attrs.c  (StringToUTF16): Change len parameter to
	ILUInt32 *.
	(ConvertAttribute, MarshalAsAttribute, DefaultValueAttribute,
	SecurityPermissionAttribute, GetAttributeUsage): Use ILUInt32 values for
	blob processing instead of unsigned longs.

	* image/link.c (SearchForDllMap): likewise

	* image/marshal.c (ILPinvokeGetMarshalType): likewise

	* image/meta_build.c (Load_Module): Use ILUInt2 values for section sizes
	instead of unsigned longs.

	* image/meta_header.c (GetMetaData): Change parameters len and headerLen
	to ILUInt32 *. Change return type to ILUInt32.
	(GetNextEntry): Change parameters numEntries, entryOffset and entrySize
	to ILUInt32 *.
	(ILImageGetMetaEntry): Change parameter size to ILUInt32 *.
	(ILImageNumMetaEntries): Change return type to ILUInt32.
	(ILImageMetaEntryInfo): Change parameter size to ILUInt32 *.

	* image/meta_index.c (TokenSize, ParseToken): Change to process 32bit
	token counts.

	* image/pecoff_loader.c (_ILImageGetSection): Change size parameter to
	ILUInt32 *.

	* image/sig_writer.c: Use ILUInt32 values for blob processing instead
	of unsigned longs.

	* resgen/resgen.c (loadResources, extractResource): Use ILUInt32 values
	for blob processing instead of unsigned longs.

2009-06-12  Klaus Treichel  <ktreichel@web.de>

	* dumpasm/dump_type.c (DumpVariantType, DumpNativeType): Use ILUInt32
	instead of unsigned long where appropriate.

	* engine/method_cache.c (InitDebugReader): Make value ILInt32 instead of
	long.

	* ilalink/link_attrs.c (_ILLinkerConvertDebug): Make local values
	ILUInt32 instead of unsigned long where appropriate.

	* image/debug_reader.c (ILDebugGetString): Make argument offset ILUInt32
	instead of unsigned long.

	* image/image.c (ILImageGetBlob, ILImageGetUserString): Cast the return
	value of ILMetaUncompressData to unsigned long.

	* image/marshal.c (ILPinvokeGetCharSet): Make size ILUInt32 instead of
	unsigned long.

	* image/meta_index.c (ParseToken): Remove now unnecessary cast of the
	return value of ILMetaUncompressData to ILUInt32.

	* image/sig_parse.c (ParseArrayShape, ParseElemType, ParseSignature,
	ILTypeFromFieldSig, ILTypeFromLocalVarSig): Make values ILUInt32 instead
	of unsigned long where appropriate.

	* image/uncompress.c (ILMetaUncompressData): Change return value to
	ILUInt32 and use ILUInt32 instead of unsigned long values for calculation.
	* image/uncompress.c (ILMetaUncompressToken): Change return value to ILToken.
	* image/uncompress.c (ILMetaUncompressInt): Change return value to ILInt32
	and use ILUInt32 instead of unsigned long values for calculation.

	* include/il_debug.h (ILDebugGetString): Adjust prototype.

	* include/il_image.h: Include il_meta.h before including stdio.h to make
	sure that il_config.h is included before any system include files.
	Move declaration of ILToken to il_meta.h.

	* include/il_meta.h: Move declaration of ILToken to here.
	Add inclusion of il_values.h. Adjust changed prototypes for uncompressing
	metadata functions (see uncompress.c).

2009-06-06  Klaus Treichel  <ktreichel@web.de>

	* .gitignore: Add more autogenerated files and compiler results.

	* clrwrap/.gitignore: likewise

	* codegen/.gitignore: likewise

	* csant/.gitignore: likewise

	* cscc/.gitignore: likewise

	* cscc/bf/.gitignore: likewise

	* cscc/c/.gitignore: likewise

	* cscc/common/.gitignore: likewise

	* cscc/cpp/.gitignore: likewise

	* cscc/csharp/.gitignore: likewise

	* cscc/java/.gitignore: likewise

	* cscc/vb/.gitignore: likewise

	* csdoc/.gitignore: likewise

	* dumpasm/.gitignore: likewise

	* engine/.gitignore: likewise

	* ilalink/.gitignore: likewise

	* ilasm/.gitignore: likewise

	* ildasm/.gitignore: likewise

	* ildd/.gitignore: likewise

	* ilfind/.gitignore: likewise

	* ilgac/.gitignore: likewise

	* ilheader/.gitignore: likewise

	* ilnative/.gitignore: likewise

	* ilranlib/.gitignore: likewise

	* ilsize/.gitignore: likewise

	* ilstrip/.gitignore: likewise

	* image/.gitignore: likewise

	* include/.gitignore: likewise

	* libffi/.gitignore: likewise

	* libffi/include/.gitignore: likewise

	* libffi/src/.gitignore: likewise

	* libgc/.gitignore: likewise

	* resgen/.gitignore: likewise

	* support/.gitignore: likewise

	* tests/.gitignore: likewise

	* libgc/libatomic_ops-1.2/src/.gitignore: Added

2009-06-04  Klaus Treichel  <ktreichel@web.de>

	* include/il_varargs.h: Add macro IL_VA_ARG(va, type).

	* engine/call.c, engine/lib_array.c: Remove the local vararg macros and
	use the ones from il_varargs.h instead.

2009-05-14  Heiko Weiss <heiko.weiss@de.trumpf-laser.com>

	* support/time.c: use tzset() to get timezone changes.

2009-05-10  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_genattr.c, codegen/cg_genattr.h: Add handling of security
	attributes.

	* cscc/csharp/cs_attrs.c (CSAddDefaultMemberAttr): Set the custom
	attribute blob header here now.

	* image/ser_writer.c (ILSerializeWriterInit): Don't write a custom
	attribute header here.

	* include/il_meta.h: Add definition of the security permission flags.

2009-05-09  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_decls.tc (ILGenOutputAttributes): Iterate over the security
	items attached to a program item instead of dumping only the first one.

	* dumpasm/dump_utils.c (ILDAsmDumpSecurity): likewise.

	* ilalink/link_attrs.c (_ILLinkerConvertSecurity): Iterate over the
	security items attached to a program item instead of converting only the
	first one.

	* ilsize/ilsize_est.c (GetMetadataSizeWithAttrs): Iterate over the
	security items attached to a program item instead of calculating only
	the size of the first one.

	* image/item.c (ILProgramItemNextDeclSecurity): Add function for
	iterating over the secutity items attached to a program item.

	* image/misc_token.c (SearchForOwnedItem): Allow more than one security
	item attached to the same owner.

	* include/il_program.h (ILProgramItemNextDeclSecurity): Add prototype.

2009-05-03  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_decls.tc (ILGenOutputAttributes): Print the .permissionset
	instead of the .capability keyword for decarative security attributes.

	* dumpasm/dump_utils.c (ILDAsmDumpSecurity): likewise.

	* ilalink/linker.h (_ILLinkerConvertConstant): Add prototype.

	* ilalink/link_field.c (_ILLinkerConvertConstant): Move logic for
	converting constants from _ILLinkerConvertMarshal to here and call
	_ILLinkerConvertConstant in _ILLinkerConvertMarshal instead.

	* ilalink/link_misc.c (_ILLinkerConvertProperty): Add conversion of
	constants attached to a property.

2009-04-23  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_genattr.c (DllImportAttribute): Set the correct default
	values for calling convention and characterset.
	
2009-04-21  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_genattr.c (DefaultValueAttribute): Use the ctor argument
	type if the value cannot be casted to the type of the field, property
	or parameter.

2009-04-20  Klaus Treichel  <ktreichel@web.de>

	* include/Makefile.am: Add il_varargs.h to the sources.

2009-04-19  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_errors.c, codegen/cg_errors.h: Add codegen functions to
	handle errors and warnings.

	* codegen/cg_gen.c (ILGenInfoInit): Initialize the new members
	errFunc and warnFunc of the ILGenInfo structure.

	* codegen/cg_gen.h: Add the new members errFunc and warnFunc to the
	ILGenInfo structure.

	* codegen/cg_genattr.c, codegen/cg_genattr.h: Add handling of custom
	attributes. Add check for AllowMultiple and the IndexerNameAttribute.

	* codegen/cg_intl.h: Add include for internationalization.

	* codegen/cg_output.c (ILGenModulesAndAssemblies): Add output of the
	assembly hash algorithm, version and locale.

	* codegen/Makefile.am: Add the new files cg_errors.c, cg_errors.h,
	cg_genattr.c, cg_genattr.h and cg_intl.h to the codegen sources.

	* cscc/common/cc_errors.c (CCErrorOnLineV, CCWarningOnLineV): Add
	versions of the error and warning functions with a va_list as last
	argument instead of an elypsis for callbacks from codegen.
	Use the vararg definitions from il_vararg.h instead of defining our own.

	* cscc/common/cc_errors.h (CCErrorOnLineV, CCWarningOnLineV): Add
	declarations.
	Use the IL_PRINTF from il_vararg.h instead of defining CC_PRINTF.

	* cscc/common/cc_main.c (InitCodeGen): Set errFunc and warnFunc in the
	ILGenInfo structure.

	* cscc/csharp/cs_attrs.c: Use the new custom attribute handling in
	codegen.

2009-04-18  Klaus Treichel  <ktreichel@web.de>

	* image/class.c (_ILClassExtCreate): Add function to create class
	extensions (cache or java strings).
	(_ILClassExtFind): Add function to find the first cached entry of a
	given kind.

	* image/java_loader.c, image/java_writer.c, writer.c: Change to use
	the new	functions in class.c instead of accessing the ext member of
	the class directly.

	* image/lib_attrs.c: Add functions for deserializing an
	AttributeUsageAttribute, caching the result and retrieving the members.

	* include/il_program.h: Add opaque type ILAttributeUsageAttribute.
	Add declarations for ILFindCustomAttribute, ILClassGetAttributeUsage,
	ILAttributeUsageAttributeGetValidOn,
	ILAttributeUsageAttributeGetAllowMultiple, and
	ILAttributeUsageAttributeGetInherited.

	* include/il_varargs.h: Add include file for general vararg handling.

2009-04-16  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_decls.tc (ILGenOutputGenericParamAttributes): Add support
	function to emit custom attributes arrached to a generic parameter.
	(ILNode_GenDiscard(ILNode_ClassDefn)): Emit custom attributes attached
	to generic parameters.
	(MethodGenDiscard): likewise.

	* codegen/cg_gen.h: Add prototype for ILGenOutputGenericParamAttributes.

	* codegen/cg_nodes.tc (ILNode_GenericTypeParameter): Rename member attrs
	to attributes for more consistency.

	* cscc/csharp/cs_attrs.c: Change usages of CS_ATTR_* to
	IL_ATTRIBUTE_TARGET_* to use the defines moved to il_program.h.

	* cscc/csharp/cs_decls.tc:  Change usages of CS_ATTR_* to
	IL_ATTRIBUTE_TARGET_* to use the defines moved to il_program.h.
	(ILNode_SemAnalysis(ILNode_ClassDefn)): Perform semantic analysis of the
	generic type parameters later in the process and set the context propperly.
	(ILNode_SemAnalysis(ILNode_GenericTypeParameter)): Process the custom
	attributes attached to the generic parameter.

	* cscc/csharp/cs_gather.c (_AddTypeFormalWithCheck): Store the generic
	parameter created in the ILNode_GenericTypeParameter.

	* cscc/csharp/cs_internal.h: Remove the CS_ATTR_* definitions.

	* cscc/csharp/cs_grammar.y: Allow and handle custom attributes in
	TypeFormals.

	* include/il_program.h: Add definition of the attribute targets.

2009-04-15  Klaus Treichel  <ktreichel@web.de>

	* cacc/csharp/cs_grammar.y (GetAccessorAttrs): Add function for handling
	modifiers applied to property accessors.
	(CreatePropertyMethods): Change handling of property accessor methods.
	The methods are now allways created here.
	Change Grammar to allow modifiers for property accessors in classes and
	structs. Allow attributes in property accessors in interfaces.

	* cscc/csharp/cs_internal.h: Add structs for handling of accessors.

2009-04-02  Klaus Treichel  <ktreichel@web.de>

	* ilasm/ilasm_grammar.y (TypeSpecification): Convert a primitive type to
	a typedef or typeref instead of a typespec (Thanks, Ettore Speziale).

2009-03-31  Heiko Weiss <heiko.weiss@de.trumpf-laser.com>

	* engine/lib_thread.c: check for thread is NULL.
	* support/thread.c: check for thread or handle is NULL.

2009-03-28  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_stmt.tc (CGSetSwitchTableType): Move the duplicate function
	SwitchTableType from cscc/c/c_stmt.tc and cscc/csharp/cs_stmt.tc to here.
	Generate simple ifs only for tables with less than 3 switchentries instead
	of 4 and generate switch tables too if the range of the constant values
	is less than 128.
 
	cscc/c/c_stmt.tc (SwitchTableType): Move to codegen/cg_stmt.tc.
	(ILNode_CSemAnalysis(ILNode_Switch)): Set the switch type in the node
	and call CGSetSwitchTableType instead of SwitchTableType.

	cscc/csharp/cs_stmt.tc (SwitchTableType): Move to codegen/cg_stmt.tc.
	(ILNode_SemAnalysis(ILNode_Switch)): Call CGSetSwitchTableType instead
	of SwitchTableType.

2009-03-25  Klaus Treichel  <ktreichel@web.de>

	* dumpasm/dump_class.c (Dump_PropertyDef): Add output of the constant
	attached to a property.

2009-03-22  Klaus Treichel  <ktreichel@web.de>

	* ilalink/link_class.c (CreateClass): Set new class in <Module> even if
	the new class existed before to be able to link C style libraries to one
	new module.
	(ConvertClassParents, ConvertClassMembers): Return 1 even if the new
	class is not set.

	* ilalink/link_create.c (ReportUnresolved): Do some reformatting.

	* ilalink/link_method.c (_ILLinkerConvertMemberRef): likewise.

	* ilalink/link_module.c (ILLinkerFindAttribute): likewise.

2009-03-19  Heiko Weiss <heiko.weiss@de.trumpf-laser.com>

	* engine/lib_thread.c, support/wait_event.c: check if handle is zero before 
	use for wait handles.

2009-03-16  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_decls.tc (ILNode_GenDiscard(ILNode_PropertyDeclaration)):
	Dump attached constant if present.

	* dumpasm/dump_flags.c (ILAssemblyFlags): Add the 2.0 ECMA flag
	retargetable.

	* dumpasm/dump_type.c (DumpNativeType): Dump a native array in the
	format type[int32 + int32] now instead of the old format.

	* ilalink/link_image.c (ProcessImage): Handle the 2.0 assembly flag
	retargetable.

	* ilasm/ilasm_grammar.y: Handle constants attached to properties.

	* ilasm/ilasm_scanner.l: Add the 2.0 keyword retargetable.

	* include/il_meta.h: Define IL_META_ASSEM_RETARGETABLE.

	* include/il_program.h: Add macro ILAssembly_Retargetable.

2009-02-22  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Add checking for x86_64-*-linux* when checking which
	thread library to use if not specified.
	Add checks for existance of the round, rint and trunc functions.
	Add AC_GNU_SOURCE.

	* cscc/c/c_grammar.y, cscc/csharp/cs_grammar.y, cscc/vb/vb_grammar.y,
	ilasm/ilasm_grammar.y: Include il_config.h before including any other
	file for having _GNU_SOURCE propperly defined.

	* engine/int_proto.h, engine/int_table.c: Regenerate

	* engine/lib_math.c (Math_Round): Use the rint function if present.
	Add support and internal functions for midpoint rounding away from zero
	and System.Math.Truncate (rounding towards zero).

	* libgc/Makefile.am: Remove libtool.m4 from extra dists.

	* support/thr_defs.h: Remove definition of _GNU_SOURCE because it will be
	defined by il_config.h now if applicable.

2009-02-15  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_cast.tc (CSTypeToName): Add handling of generic type
	instances. Remove unnecessary casts to char * in calls to ILInternString.

	* cscc/csharp/cs_gather.c (AddBaseClasses): Add the parent class at the
	earliest point possible so that value types can be distinguished from
	reference types while semanalyzing the base class lists.
	(FindInterfaceMatch): Instantiate generic interfaced before looking for
	interface member implementations.

	* cscc/csharp/cs_grammar.y: Make sure that the declaration order in the
	base type list is preserved so that the checks in cs_gather.c can be
	performed.

	* cscc/csharp/cs_invoke.tc (CSItemToName): Handle members if generic
	instances.

2009-02-08  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_interface.c (ImplementsInterface): Instantiate a generic
	interface prior to checking if all members are implemented.

	* cscc/csharp/cs_lvalue.tc
	(ILNode_SemAnalysisType(ILNode_GenericQualIdent)): Return the main type
	if in type gathering.

2009-02-01  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_info.c (_IL_InfoMethods_GetPlatformID): Return 4 for Unix
	instead of 128 to be in sync with the 2.0 enumeration.

2009-01-06  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_oper.tc (AssignSem): Handle operations with pointers
	for the += and -= expressions.

2009-01-03  Klaus Treichel  <ktreichel@web.de>

	* engine/int_proto.h, engine/int_table.c: Regenerate

	* engine/mkint.sh: Set collation to en_US prior to generating the
	internal table to make sure it's ordered the same way every time.

	* engine/lib_array.c (_IL_Array_Clone): Add internal function for
	Array.Clone.

	* engine/lib_object.c (_IL_Object_MemberwiseClone): Remove handling
	of arrays because this is done now in Array.Clone.

2009-01-02  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_lvalue.tc (ILNode_GenRef(ILNode_Deref)): Add code generation
	for getting the address of of a dreferencing node.

	* codegen/cg_misc.tc: Add support operations for the new node types
	ILNode_RefInit and ILNode_RefValueTypeCreationExpression.

	* codegen/cg_nodes.tc: Add node types ILNode_RefInit and
	ILNode_RefValueTypeCreationExpression for optimizing initialization of
	value types (structs) where the target is a node where a reference can be
	computed.
	Change parent of ILNode_Deref from ILNode_LValueNoRef to ILNode_LValue.

	* codegen/jv_misc.tc: Stub out JavaGenValue operation for the new node
	types ILNode_RefInit and ILNode_RefValueTypeCreationExpression.

	* cscc/c/c_name.tc, cscc/c/c_stubs.tc: Stub out operations for the new
	node types ILNode_RefInit and ILNode_RefValueTypeCreationExpression.

	* cscc/csharp/cs_oper.tc (ILNode_SemAnalysis(ILNode_Assign)): Optimize
	assignment to a value type from a new expression if a reference to the
	target can be computed.
	Stub out operations for the new node types ILNode_RefInit and
	ILNode_RefValueTypeCreationExpression because they will never be
	semanalyzed.
	(ILNode_SemAnalysis(ILNode_AddressOf)): Add a check if the address of the
	expression can be computed.

2008-12-30  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_arith.tc (ReduceOperator): Add more basic optimizations and
	apply them even if no optimization is specified.
	(ILNode_GenValue(ILNode_Add)): Add call to ReduceOperator.

	* cscc/csharp/cs_oper.tc (CreateSizeOf, PointerDelta): Add functions for
	handling of unsafe constructs involving pointers in an uniform way.
	(PointerOp): Add function for performing addition or substraction of a
	numeric value and a pointer value.
	(ILNode_SemAnalysis(ILNode_Add), ILNode_SemAnalysis(ILNode_Sub)): Use the
	new functions where appropriate.
	(ILNode_SemAnalysis(ILNode_PostDec)): Fix pointer post decrement.

	* cscc/csharp/cs_lvalue.tc (ILNode_SemAnalysis(ILNode_ArrayAccess)): Use
	the new functions in cs_oper.tc for pointer array access and perform
	constant propagation if possible.

	* cscc/csharp/cs_semvalue.c (_CSSemReplaceWithConstant): Add support for
	constant propagation for NativeInt and NativeUInt.

2008-12-27  Klaus Treichel  <ktreichek@web.de>

	* engine/jitc_string.c: Add support for inlining for String.get_Chars
	and String.NewString.

	* engine/jitc.c: Add the signature for the string allocator.
	(ILJitInit): Define the signature for the string allocator.
	(_ILJitSetMethodInfo): Set the method info for the new inlining
	functions.
	(ILJitTypeCreate): Mark the System.String class.

	* engine/jitc.h: Add a new type kind for the System.String class.
 
	* engine/Makefile.am: Add jitc_string.c to the jit coder sources.

2008-12-25  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_nodes.tc: Define the new nodetypes ILNode_Memcpy and
	ILNode_Memset for memcpy and memset.

	* codegen/cg_stmt.tc: Add discard methods for the new node types which
	generates cpblk for ILNode_Memcpy and initblk for ILNode_Memset.

	* codegen/jv_stmt.tc: Stub out JavaGenDiscard for the new node types.

	* cscc/c/c_stmt.tc, cscc/csharp/cs_stmt.tc: Add the functions for semantic
	analysis for the new node types.

2008-12-24  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_helpers.c (_IL_RuntimeHelpers_InternalOffsetToStringData):
	Fix compiler warning on 64bit archs.

	* engine/jitc_except.c (JITCoder_TryHandlerStart): Make sure the current
	ILExecThread is available on entry of a catch block if built without
	the thread in the signature.

	* engine/verify.c: include lib_defs.h

	* engine/verify_call.c, include/il_coder.h: Add support for inlining of
	OffsetToStringData in System.Runtime.CompilerServices.RuntimeHelpers.

2008-12-23  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_cast.tc: Allow cast from managed pointer to unmanaged
	pointer and vice versa.

	* codegen/cg_coerce.c (GetUnsafeConvertRules): Allow cast from managed
	pointer to unmanaged pointer in a fixed statement for the address of
	operator.

	* codegen/cg_decls.tc (DumpILLocals): Dump locals including prefixes.

	* cscc/csharp/cs_stmt.tc: Create a pinned local for the expressions in
	fixed expression and fixed address.

	* include/il_types.h: Add macro ILType_IsRef to check for managed
	pointers.

2008-12-21  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_stmt.tc (ILNode_SemAnalysis(ILNode_FixExpr)): Remove the
	handling of a simple array because this is done by the cast now.
	(ILNode_SemAnalysis(ILNode_Fixed)): Fix a compiler warning.

2008-12-14  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_coerce.c (GetUnsafeConvertRules): Handle cast from an array
	to a pointer to the array's element type.
	Allow casting a string or array to a pointer only if the new flag inFixed
	in the gen struct is set.
	(ApplyRules): Handle the array to element type pointer conversion.

	* codegen/cg_gen.c (ILGenInfoInit): Initialize  the new flag inFixed in
	the generator struct.

	* codegen/cg_gen.h: Add the new flag inFixed to the ILGenInfo struct.

	* codegen/cg_misc.tc: Add the codegen functions for the new node type
	ILNode_CastArrayToElementPtr.

	* codegen/cg_nodes.tc: Add the new node type ILNode_CastArrayToElementPtr.

	* codegen/jv_misc.tc: Add stubbs for the java codegen functions for the
	new node type ILNode_CastArrayToElementPtr.

	* cscc/c/c_name.tc, cscc/c/c_oper.tc, cscc/csharp/cs_oper.tc: Add the
	functions to handle the new node type ILNode_CastArrayToElementPtr.

	* cscc/csharp/cs_stmp,tc (ILNode_SemAnalysis(ILNode_Fixed)): Add check
	if the type in the fixed statement is a pointer type.
	Set the new inFixed flag before semanalyzing the FixedPointerDeclarators
	and reset it afterwards.

2008-12-12  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_misc.tc (ILNode_GenValue(ILNode_CastStringToCharPtr)): Add
	OffsetToStringData only if the String is nonnull.

2008-12-09  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_cast.tc: Replace the code generated for casts to bool with
	branchless alternatives.

	* codegen/cg_coerce.c (GetUnsafeConvertRules): Add Check for casts from
	System.String to a pointer to char.
	(ApplyRules): Handle the cast from string to char *.

	* codegen/cg_misc.tc: Add code genereration for the new nodetype
	ILNode_CastStringToCharPtr.
	(ILNode_GenValue(ILNode_Is)): Replace the code with branches with a
	branchless alternative.

	* codegen/cg_nodes.tc: Add the new node type ILNode_CastStringToCharPtr
	for casts from string to char *.

	* codegen/jv_misc.tc: Add dummy code genereration for the new nodetype
	ILNode_CastStringToCharPtr.

	* cscc/c/c_name.tc, cscc/c/c_oper.tc, cscc/csharp/cs_oper.tc: Add the
	functions needed for the new node type ILNode_CastStringToCharPtr.

	* engine/layout.c (LayoutClass): Generate jit functions only if not
	executed from ILVerify if built with jit.

	* engine/verify_conv.c (VERIFY_CONV): Allow casting an object reference
	to NativeInt in unsafe contexts.

2008-12-06  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_grammar.y; Fix cast to pointer to pointer (char **).

2008-11-26  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_decls.tc: Use the new function ILDumpProgramItem for output
	of class' parents or implemented interfaces.

	* codegen/cg_gen.c (ILTypeToClass): Create a TypeSpec for complex types
	and not only for generic types while converting them to an ILClass.
	(ILTypeToProgramItem): Added.

	* codegen/cg_gen.h (ILTypeToProgramItem): Add prototype.

	* codegen/cg_interface.c, codegen/cg_resolve.c, cscc/csdoc.c,
	cscc/c/c_invoke.tc, cscc/c/c_lvalue.tc, cscc/csharp/cs_lookup.c,
	cscc/java/java_gather.c, cscc/java/java_lookup.c, csdoc/doc_valil.c,
	csdoc/il2doc.c, engine/layout.c, engine/lib_emit.c, engine/lib_type.c,
	image/generic_class.c, image/java_loader.c, image/java_writer.c:
	Replace calls to ILImplementsGetInterface with macro invokations of
	ILImplements_InterfaceClass or ILImplements_UnderlyingInterfaceClass
	where appropriate.

	* cscc/csharp/cs_gather.c (AddBaseClasses, CreateType): Use program 
	items instead of classes for base types or implemented interfaces
	to avoid creation of synthetic classes at this point.
	(FindMemberByName, FindMemberBySignature, FindInterfaceMatchInParents):
	Replace calls to ILImplementsGetInterface with macro invokations of
	ILImplements_InterfaceClass.

	* cscc/csharp/cs_semantics.tc (CSSemBaseType): Change baseClass argument
	from ILClass ** to ILProgramItem **.

	* dumpasm/dump_class.c (Dump_TypeAndNested): Use the new function
	ILDumpProgramItem for output of class' parents and implemented interfaces.

	* dumpasm/dump_ident.c (ILDumpProgramItem): Add new function for dumping
	program items used as class parents and implemented interfaces.

	* ilalink/link_class.c (ConvertClassParents): Use
	_ILLinkerConvertProgramItemRef instead of _ILLinkerConvertClassRef for
	converting implemented interfaces.

	* ilasm/ilasm_grammar.y: Pass an ILProgramItem * to ILClassAddImplements
	instead of a synthetic class.

	* image/class.c (ILClassAddImplements): Change type of argument interface
	from ILClass * to ILProgramItem *.
	(ILImplementsGetInterface): Change type of return value from ILClass *
	to ILProgramItem *.
	(ILImplementsGetInterfaceClass, ILImplementsGetUnderlyingInterfaceClass):
	Add new support functions.

	* image/item.c (ILProgramItemFromType, ILProgramItemToType): Add new
	support functions.

	* image/meta_build.c (Load_InterfaceImpl): Store a program item instead
	of an ILClass as the implemented interface.

	* image/meta_writer.c (Format_InterfaceImpl): Use ProgramItemToToken for
	storing the implemented interface.

	* image/program.h: Change type of member interface from ILClass * to
	ILProgramItem in ILImplements struct.

	* include/il_dumpasm.h (ILDumpProgramItem): Add prototype.

	* include/il_program.h 	(ILImplementsGetInterfaceClass,
	ILImplementsGetUnderlyingInterfaceClass, ILProgramItemToType,
	ILProgramItemFromType): Add	prototypes.
	(ILClassAddImplements, ILImplementsGetInterface): Adjust prototypes
	according to changes in class.c.
	Add some new helper macros.

2008-11-25  Radek Polak  <psonek2@seznam.cz>

	* engine/int_proto.h, engine/int_table.c: Regenerate for new blocking
	ops namespace.

2008-11-23  Oscar Bacho  <oscar.bacho@gmail.com>

	* doc/cvmdoc.py: Make last change more portable.

2008-11-22  Oscar Bacho  <oscar.bacho@gmail.com>

	* doc/cvmdoc.py: Fix build error with python >= 2.5. Conditional use of
	regex_syntax module because it was eliminated from python 2.5.

2008-11-18  Klaus Treichel  <ktreichel@web.de>

	* include/il_program.h (ILClassCreate, ILClassSetParent): Change parameter
	parent from	ILClass * to ILProgramItem *.
	(ILClassGetParent): Change return value from ILClass * to
	ILProgramItem *.
	(ILProgramItemToUnderlyingClass, ILClassGetParentClass, ILTypeSpecImport):
	Add new support	functions and the corresponding macros.

	* include/il_types.c (ILTypeImport): Add new support function.

	* codegen/cg_coerce.c, codegen/cg_library.c, codegen/cg_lvalue.tc,
	codegen/cg_resolve.c, cscc/csdoc.c, cscc/c/c_invoke.tc,
	cscc/c/c_library.c, cscc/c/c_lvalue.tc, cscc/c/c_typeout.c,
	cscc/c/c_types.c, cscc/csharp/cs_attrs.c, cscc/csharp/cs_gather.c,
	cscc/csharp/cs_invoke.tc, cscc/csharp/cs_lvalue.tc,
	cscc/java/java_gather.c, cscc/java/java_invoke.tc,
	cscc/java/java_lvalue.tc, csdoc/doc_valil.c, dumpasm/dump_class.c,
	engine/call.c, engine/heap.c, engine/jitc.c, engine/layout.c,
	engine/lib_array.c, engine/lib_emit.c, engine/lib_marshal.c,
	engine/lib_reflect.c, engine/lib_type.c, engine/pinvoke.c,
	engine/verify_branch.c,	ilalink/link_module.c, ilasm/ilasm_build.c,
	ilasm/ilasm_build.h, ilasm/ilasm_grammar.y, image/generic_class.c,
	image/member.c, image/meta_build.c, image/meta_types.c,
	image/java_loader.c, image/java_writer.c, image/misc_token.c,
	image/ser_parse.c, image/synthetic.c: Replace invokation of
	ILClass_Parent with ILClass_ParentClass. Adjust the parent parameter
	types. Use ILClass_UnderlyingParentClass instead of ILClass_Parent
	where appropriate.

	* ilalink/link_create.c, ilalink/link_library.c, ilalink/link_main.c,
	image/meta_build.c, image/member.c: Fix some formatting.

	* csdoc/il2doc.c (PrintProgramItemWithFlags): Add function to print a
	class' parent.

	* ilalink/link_class.c: Replace ConvertClass by three functions to do
	the import of TypeDefs into the new image in three steps for avoiding
	to create temporary TypeRefs for parents and implemented interfaces
	and for being able to process TypeSpecs correctly for parents and
	implemented interfaces.

	* image/program.h: Change member parend of an ILClass record from
	ILClass to ILProgramItem to be able to reflect the generrics structure
	better. Add some internal helprt macros for converting an ILProgramItem
	to the real program item in a safe way without having to do function
	calls.

	* image/class.c (CreateClass, ILClassCreate, ILClassSetParent): Change
	parameter type of parent from ILClass * to ILProgramItem *.
	(ILClassGetParent): Change return type from ILClass to ILProgramItem.
	(ILClassGetUnderlyingParentClass, ILClassGetParentClass): Add new
	support functions.

	* image/lib_attrs.c, image/member.c, image/meta_build.c: Use the new
	internal conversion macros where appropriate.

	* image/meta_types.c (ILTypeImport): Add support function for importing
	a type from a foreign image.

	* image/meta_writer.c (Format_TypeDef): Use the new function
	ProgramItemToToken for retrieving the parent token.

	* image/misc_token.c (ILTypeSpecImport): Add support function for
	importing a TypeSpec from a foreign image.

	* image/item.c (ILProgramItemToUnderlyingClass): Add support function
	for retrieving the underlying parent class or implemented interface.

	* ilalink/link_type.c (_ILLinkerConvertProgramItemRef): Add function
	for converting parent classes and implemented interfaces 

	* ilalink/linker.h (_ILLinkerConvertProgramItemRef): Add prototype.

2008-11-11  Heiko Weiss <heiko.weiss@de.trumpf-laser.com>

	* engine/lib_string.c: small bugfix.
	* support/unicode.c: fix comparing unicode strings.

2008-11-09  Klaus Treichel  <ktreichel@web.de>

	* include/il_meta.h: Set constant IL_META_PARAMDEF_OPTIONAL tp 0x10
	instead of 0x04 to be ECMA compliant.

2008-10-30  Kirill Kononenko  <krokas@aport.ru>

	* engine/jitc_pinvoke.c (ILJitDelegateGetClosure): Use
	IL_JIT_CALLCONV_DEFAULT abi instead of jit_abi_cdecl for invokation
	of the delegate.

2008-10-27  Klaus Treichel  <ktreichel@web.de>

	* libgc/build_atomic_ops.sh, libgc/build_atomic_ops.sh.cygwin: Added

	* libgc/configure_atomic_ops.sh: Removed

	* libgc/ChangeLog, libgc/Makefile.am, libgc/Makefile.direct,
	libgc/alloc.c, libgc/configure.ac, libgc/dbg_mlc.c, libgc/dyn_load.c,
	libgc/finalize.c, libgc/gcj_mlc.c, libgc/mach_dep.c, libgc/malloc.c,
	libgc/mallocx.c, libgc/mark.c, libgc/mark_rts.c, libgc/misc.c,
	libgc/mkinstalldirs, libgc/obj_map.c, libgc/os_dep.c,
	libgc/pthread_support.c, libgc/ptr_chck.c, libgc/stubborn.c,
	libgc/thread_local_alloc.c, libgc/typd_mlc.c, libgc/win32_threads.c,
	libgc/include/gc.h, libgc/include/gc_config_macros.h,
	libgc/include/gc_cpp.h, libgc/include/gc_gcj.h, libgc/include/gc_mark.h,
	libgc/include/gc_typed.h, libgc/include/javaxfc.h,
	libgc/include/private/gc_locks.h, libgc/include/private/gc_priv.h,
	libgc/include/private/thread_local_alloc.h, libgc/tests/test.c: Update to
	bdwgc cvs till 2008-10-27.

2008-10-22  Klaus Treichel  <ktreichel@web.de>

	* libgc/ChangeLog, libgc/alloc.c, libgc/configure.ac,
	libgc/darwin_stop_world.c, libgc/dbg_mlc.c, libgc/dyn_load.c,
	libgc/finalize.c, libgc/gcj_mlc.c, libgc/mach_dep.c, libgc/mallocx.c,
	libgc/mark_rts.c, libgc/misc.c, libgc/mkinstalldirs, libgc/os_dep.c,
	libgc/pthread_stop_world.c, libgc/pthread_support.c, libgc/ptr_chck.c,
	libgc/reclaim.c, libgc/thread_local_alloc.c, libgc/typd_mlc.c,
	libgc/win32_threads.c, libgc/cord/cord.am, libgc/doc/README,
	libgc/doc/README.DGUX386, libgc/doc/README.autoconf,
	libgc/doc/debugging.html, libgc/doc/gcinterface.html,
	libgc/doc/leak.html, libgc/doc/simple_example.html,
	libgc/include/gc.h, libgc/include/gc_allocator.h,
	libgc/include/gc_config_macros.h, libgc/include/gc_mark.h,
	libgc/include/gc_typed.h, libgc/include/javaxfc.h,
	libgc/include/new_gc_alloc.h, libgc/include/private/dbg_mlc.h,
	libgc/include/private/gc_locks.h,, libgc/include/private/gc_pmark.h,
	libgc/include/private/gc_priv.h, libgc/include/private/gcconfig.h,
	libgc/libatomic_ops-1.2/ChangeLog,
	libgc/libatomic_ops-1.2/src/atomic_ops.c,
	libgc/libatomic_ops-1.2/src/atomic_ops.h,
	libgc/libatomic_ops-1.2/src/atomic_ops_stack.c,
	libgc/libatomic_ops-1.2/src/atomic_ops_stack.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/aligned_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/all_aligned_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/all_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/char_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/int_aligned_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/int_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/short_aligned_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/short_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/arm.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/x86.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/x86_64.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/hpc/hppa.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/hpc/ia64.h,
	libgc/tests/test.c: Include the	latest libgc changes.

2008-10-19  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_lvalue.tc (ILQualIdentGetName): Add function to get the name
	component of an identifier node.
	(ILQualIdentTwo, ILQualIdentName): Adjust for new layout of
	ILNode_OualIdent.
	(ILIsQualIdent): Adjust for new layout of ILNode_OualIdent and add
	handling of ILNode_Generic_QualIdent.

	* codegen/cg_nodes.tc: Replace the right node by a name in
	ILNode_QualIdent. Add ILNode_GenericQualIdent.

	* codegen/cg_scope.c (ResolveQualIdent, ILScopeResolveType): Adjust for
	new layout of ILNode_OualIdent.

	* codegen/jv_lvalue.tc: Add dummy operations for ILNode_GenericQualIdent.

	* cscc/c/c_grammar.y: Adjust creation of an ILNode_QualIdent for the new
	layout.

	* cscc/c/c_lvalue.tc: Add dummy operation ILNode_CSemAnalysis for
	ILNode_GenericQualIdent.

	* cscc/c/c_name.tc: Add dummy operation ILNode_CName for
	ILNode_GenericQualIdent.

	* cscc/c/c_types.c (CTypeFromCSharp): Adjust for new layout of
	ILNode_OualIdent.

	* cscc/csharp/cs_attrs.c (ModifyAttrName): Adjust for new layout of
	ILNode_OualIdent.

	* cscc/csharp/cs_defs.tc: Remove now obsolete ILNode_GenericReference.

	* cscc/csharp/cs_gather.c (GetFullAndBasicNames): Adjust for new layout of
	ILNode_OualIdent and add dummy handling of ILNode_GenericQualIdent.
	(CreateMethod, CreateProperty, CreateEventDecl): Replace
	ILNode_GenericReference by ILNode_GenericQualIdent.

	* cscc/csharp/cs_grammar.y: Adjust for new layout of ILNode_OualIdent.
	Fix generic method declaration. Replace	ILNode_GenericReference by
	ILNode_GenericQualIdent.

	* cscc/csharp/cs_internal.h: Change the member identifier in
	struct MemberName to const char *.

	* cscc/csharp/cs_lvalue.tc: Adjust for new layout of ILNode_OualIdent and
	add the operations ILNode_SemAnalysis and ILNode_SemAnalysisType for
	ILNode_GenericQualIdent.

	* cscc/csharp/cs_types.tc: Remove the operations ILNode_SemAnalysis and
	ILNode_SemAnalysisType for ILNode_GenericReference.

	* cscc/java/java_gather.c, cscc/java/java_grammar.y,
	cscc/java/java_lvalue.tc, cscc/vb/vb_grammar.y: Adjust for new layout of
	ILNode_OualIdent.

2008-10-05  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_grammar.y: Handle the implied constructor constraint
	with the struct constraint propperly.

	* ilalink/link_method.c (_ILLinkerConvertMemberRef): Use
	ILTypeSpecGetClassWrapper instead of ILTypeSpecGetClassRef to avoid
	creating a synthetic class here.
	Revert this one for now because it raises a problem with multidimensional
	arrays.

	* ilalink/link_type.c (ConvertClassRef): Handle synthetic classes that
	are actually TypeSpecs and create a wrapper class for them after the
	TypeSpec is imported in the current image.

	* image/debug_reader.c (ILDebugGetString): Fix a compiler warning.

	* image/java_loader.c (LocateJarDirectory, LoadJarClasses): Fix compiler
	warnings.

	* image/meta_build.c (Load_InterfaceImpl): Handle generic interface
	implementations.

	* image/pecoff_loader.c (ImageLoad): Fix a compiler warning.

2008-10-04  Klaus Treichel  <ktreichel@web.de>

	* ilalink/link_generics.c (_ILLinkerConvertGenerics): Add new file
	with the consolidated generics stuff. Add copying primary, secondary
	and ctor constraints and the attributes for the generic parameters.

	* ilalink/linker.h (_ILLinkerConvertGenerics): Add prototype.

	* ilalink/link_class.c (ConvertClass),
	ilalink/link_method.c (_ILLinkerConvertMethod): Use the new common
	function instead of having the code duplicated.

	* ilalink/Makefile.am: Add link_generics.c to the sources.

	* ilalink/link_attrs.c (_ILLinkerConvertDebug): Fix some compiler
	warnings.

2008-10-02  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_grammar.y: Fix some shift/reduce conflicts and the
	bison warning about OptSpecificCatchClauses.

2008-10-01  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.h (COP_PREFIX_PROFILE_START, COP_PREFIX_PROFILE_END): Add
	two new opcodes for enhanced profiling support.

	* engine/cvm_call.c (DO_PROFILING_START, DO_PROFILING_STOP): Remove the
	now obsolete macros for enhanced profiling.
	(COP_PREFIX_PROFILE_START, COP_PREFIX_PROFILE_END): Add processing of the
	two new opcodes for enhanced profiling.
	(COP_PREFIX_PROFILE_COUNT): Wrap the native call in BEGIN_NATIVE_CALL and
	END_NATIVE_CALL.

	* engine/cvmc.c (CVMCoder_ProfileStart, CVMCoder_ProfileEnd): Implement
	the new enhanced profiling functions of the coder.

	* engine/cvmc_setup.c (CVMEntryGen): Remove emitting
	COP_PREFIX_PROFILE_COUNT here as this is done by _ILVerify now by calling
	ProfileStart now.

	* engine/engine.h: Change profileTime in the call frame to ILInt64 to
	hold a performance counter now.

	* image/lib_attrs.c (MarshalAsAttribute): Fix a compiler warning.

2008-09-29  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.h (_ILProfilingStart, _ILProfilingEnd): Change the
	profiling timestamp to the performance counter.

	* engine/int_proto.h, engine/int_table.c: regenerate

	* engine/jitc.c: Remove the now obsolete jit type for ILCurrTime.

	* engine/jitc_profile.c (_ILJitProfileStart, _ILJitProfileEnd): Replace the
	timestamp with the performance counter.

	* engine/lib_profiling (_ILProfilingStart, _ILProfilingEnd): Use the new
	functions in support/time.c now to get the performance counter.

	* engine/lib_time.c (_IL_Stopwatch_GetPerformanceFrequency,
	_IL_Stopwatch_GetPerformanceCounter): Add internal support functions for
	the System.Diagnostics.Stopwatch class.

	* image/progam.h: Change the profile time counter from ILUInt32 to ILUInt64
	to be able to hold a performance counter.

	* include/il_system.h (ILGetLocalTime, ILGetPerformanceCounterFrequency,
	ILGetPerformanceCounter): Add prototypes.

	* support/time.c (ILGetLocalTime): Add function to retrieve the local time.
	(ILGetPerformanceCounterFrequency, ILGetPerformanceCounter): Add functions
	for performance counter access.

2008-09-21  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c (ILJitGetVtablePointer): Add function to get the jit
	vtable entry for an ILMethod.

	* engine/jitc.h (ILJitGetVtablePointer): Add prototype.

	* engine/layout.c (LayoutClass): Move layout of the static class members
	to the end so that the vtable is complete at that point.
	Create virtual jit functions now during overriding the ancestors.
	Create non virtual jit functions after the vtable is complete.

2008-08-30  Klaus Treichel  <ktreichel@web.de>

	* libgc/allchblk.c, libgc/alloc.c, libgc/backgraph.c, libgc/bdw-gc.pc.in,
	libgc/blacklst.c, libgc/ChangeLog, libgc/checksums.c, libgc/configure.ac,
	libgc/darwin_stop_world.c, libgc/dbg_mlc.c, libgc/dyn_load.c,
	libgc/finalize.c, libgc/gc_cpp.cc, libgc/gc_dlopen.c, libgc/gcj_mlc.c,
	libgc/headers.c, libgc/mach_dep.c, libgc/Makefile.direct, libgc/malloc.c,
	libgc/mallocx.c, libgc/mark.c, libgc/mark_rts.c, libgc/misc.c,
	libgc/new_hblk.c, libgc/obj_map.c, libgc/os_dep.c,
	libgc/pthread_stop_world.c, libgc/pthread_support.c, libgc/ptr_chck.c,
	libgc/reclaim.c, libgc/stubborn.c, libgc/thread_local_alloc.c,
	libgc/typd_mlc.c, libgc/win32_threads.c, libgc/doc/gcdescr.html,
	libgc/doc/gc.man, libgc/doc/README, libgc/include/gc_config_macros.h,
	libgc/include/gc_cpp.h, libgc/include/gc_gcj.h, libgc/include/gc.h,
	libgc/include/gc_inline.h, libgc/include/gc_mark.h,
	libgc/include/gc_version.h, libgc/include/javaxfc.h,
	libgc/include/private/gcconfig.h, libgc/include/private/gc_hdrs.h,
	libgc/include/private/gc_pmark.h, libgc/include/private/gc_priv.h,
	libgc/libatomic_ops-1.2/aclocal.m4, libgc/libatomic_ops-1.2/ChangeLog,
	libgc/libatomic_ops-1.2/config.guess, libgc/libatomic_ops-1.2/config.sub,
	libgc/libatomic_ops-1.2/configure, libgc/libatomic_ops-1.2/Makefile.in,
	libgc/libatomic_ops-1.2/doc/Makefile.in,
	libgc/libatomic_ops-1.2/doc/README.txt,
	libgc/libatomic_ops-1.2/src/atomic_ops.h,
	libgc/libatomic_ops-1.2/src/Makefile.in,
	libgc/libatomic_ops-1.2/src/atomic_ops/generalize.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/generalize-small.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/generalize-small.template,
	libgc/libatomic_ops-1.2/src/atomic_ops/Makefile.in,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/acquire_release_volatile.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/aligned_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/ao_t_is_int.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/char_acquire_release_volatile.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/char_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/generic_pthread.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/int_acquire_release_volatile.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/int_aligned_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/int_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/Makefile.am,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/Makefile.in,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/read_ordered.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/short_acquire_release_volatile.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/short_aligned_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/short_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/armcc/arm_v6.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/arm.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/m68k.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/mips.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/powerpc.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/s390.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/ibmc/powerpc.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/icc/ia64.h,
	libgc/libatomic_ops-1.2/tests/Makefile.in, libgc/tests/trace_test.c:
	Update libgc to latest cvs version for 7.2 alpha1.

2008-08-25  Heiko Weiss <heiko.weiss@de.trumpf-laser.com>
	* engine/lib_profiling.c: format profiling outputs with tabs.
	
2008-08-24  Klaus Treichel  <ktreichel@web.de>

	* engine/cvmc.c (CVMCoder_SetOptimizationLevel,
	CVMCoder_GetOptimizationLevel): Add new functions for managing the
	optimization level.
	(CVMCoder_Create): Initialize the optimizationLevel.

	* engine/engine.h: Add prototypes for the new profiling functions
	_ILProfilingDump, _ILProfilingStart and _ILProfilingEnd.

	* engine/ilrun.c (main): Add new option -O to set the optimization level
	for the coder.

	* engine/jitc.c (ILJitInit): Create the jit types and signatures needed
	for enhanced profiling.
	(JITCoder_SetOptimizationLevel,  JITCoder_GetOptimizationLevel): Add new
	coder functions.
	(_ILJitCallInternal): Add emitting profiling information for the internal
	call.
	(_ILJitCompileInternal): Intitialize members needed in the the jitCoder.

	* engine/jitc_call.c (JITCoder_CallMethod): Remove increasing the call
	count of the called method.

	* engine/jitc_pinvoke.c (_ILJitCompilePinvoke): Add initialization of
	more coder members needed by profiling.
	(_ILJitInlinePinvoke): Add emitting profiling information.

	* engine/jitc_profile.c: Add support for enhanced profiling.

	* engine/jitc_setup.c (JITCoder_Setup): Remove increasing the call count
	of the current method. Initialize the new members for enhanced profiling.

	* engine/lib_profiling.c (_ILProfilingStart, _ILProfilingEnd): Add new
	functions for enhanced profiling support.
	(_ILProfilingDump): Move the common code for dumping profiling information
	from the coders to here.

	* engine/null_coder.c (Coder_ProfileStart, Coder_ProfileEnd,
	Coder_SetOptimizationLevel, Coder_GetOptimizationLevel): Add the stubs
	for the new coder members.

	* engine/verify.c (_ILVerify): Get the optimization level used by the
	coder. Add call to ILCoderProfileStart after the call to ILCoderSetup.
	Pass coderFlags to OutputExceptionTable.

	* engine/verify_call.c (IL_OP_CALL): Enable inlining if the optimization
	level used is > 0 instead of checking the coder flags.
	(IL_OP_RET): Add call to ILCoderProfileEnd before calling
	ILCoderReturnInsn.

	* engine/verify_except.c (OutputExceptionTable): Add call to
	ILCoderProfileEnd before rethowing the exception to the caller.
	(IL_OP_THROW): likewise.

	* include/il_coder.h: Add some comments to the coder flags.
	Add the new coder members: profileStart, profileEnd, setOptimizationLevel
	and getOptimizationLevel.

2008-08-21  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.h: Add opcodes for inlining array copy and clear for vectors
	where the elements can be verified at code generation time.

	* engine/cvm_inline.c: Implement the new opcodes.

	* engine/cvmc_call.c (CVMCoder_CallInlineable): Add the new argument
	elementSize. Add codegeneration for the new opcodes.

	* engine/jitc.c (ILJitInit): Create the signatures for the new array
	functions.

	* engine(jitc_call.c (JITCoder_CallInlineable): Add the new argument
	elementSize. Add codegeneration for calling the new inlined functions.

	* engine/lib_array.c (ValidateCopyArgs_AAI4, ValidateCopyArgs_AI4AI4I4,
	ValidateClearArgs_AI4I4, ILSArrayCopy_AAI4, ILSArrayCopy_AI4AI4I4,
	ILSArrayClear_AI4I4): Add functions to support Array.Copy and Array.Clear
	for vectors where the elements have been verified during verification
	time.

	* engine/lib_defs.h (ILSArrayCopy_AAI4, ILSArrayCopy_AI4AI4I4,
	ILSArrayClear_AI4I4): Add prototypes.

	* engine/null_coder.c (Coder_CallInlineable):  Add the new argument
	elementSize.

	* engine/verify.c (PUSH_SYNC_OBJECT, _ILVerify): Add the new argument
	elementSize to the calls of ILCoderCallInlineable with the value 0.

	* engine/verify_except.c (OutputExceptionTable, IL_OP_THROW): likewise.

	* engine/verify_call.c (IL_OP_RET): likewise.
	(IL_OP_CALL): Handle the new inlines for Array.Copy and Array.Clear.
	(GetArrayCopyHandler, GetArrayClearHandler): Add support functions to
	verify array types.

	* include/il_coder.h: Add the new inline functions for Array.Copy and
	Array.Clear. Add argument elementSize to ILCoderCallInlineable.

2008-08-18  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c (_ILJitOnDemandDriver): Add check if the current function
	is compiled after holding the metadata lock to prevent the function from
	being compiled multiple times if called from different threads at the
	same time (race).

	* support/hb_gc.c: Change the type of GC_bytes_found from signed_word to
	GC_signed_word.

2008-08-17  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.c (ILExecEngineDestroy): Clear some of the thread's stack
	and do a final collection after unloading all processes.

	* engine/int_table.c, engine/int_proto.h: Regenerated.

	* engine/lib_gc.c: Append Internal to the names of the internalcalls.
	(_IL_GC_CollectionCountInternal): Added
	
	* engine/process.c (_ILExecProcessUnloadInternal): Move clearing the
	thread's stack just before the collection is done.
	Use the new function ILGCFullCollection instead of ILGCCollect.
	(ILExecProcessDestroy): Change check of returnvalue from
	ILGCDisableFinalizers to == 0 to be consistent with the other functions.

	* include/il_gc.h (ILGCFullCollection, ILGCCollectionCount): Add
	prototypes for the new functions.

	* support/def_gc.c (ILGCCollect): Increment the internal fake collection
	counter.
	(ILGCFullCollection): Added.
	(ILGCCollectionCount): likewise
	(ILGCInvokeFinalizers, ILGCDisableFinalizers): Add returning 1.

	* support/hb_gc.c: Add the static value _FinalizingCount and the
	declaration of GC_bytes_found.
	Replace the %d in GC_TRACE with %p for printing the thread.
	(_FinalizerThreadFunc): Increment _FinalizingCount before executing the
	finalizers and clear the thread's stack after all finalizers are executed.
	(ILGCInit): Set GC_no_dls to 1 to prevent scanning of data segments of
	loaded shared libraries.
	(ILGCDeinit): Call ILGCFullCollection instead of GCCollect for the final
	collection.
	(ILGCFullCollection): Add function to perform collections as long as
	anything is done (finalizers executed or memory reclaimed).
	(ILGCCollectionCount): Added to return the total number of collections
	executed.
	(ILGCInvokeFinalizers, ILGCDisableFinalizers): Swap the returnvalues to
	be consistent with the rest of the code.

2008-08-15  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_lookup.c (CheckForSealedImplementation): Add function to
	check if a virtual method is implemented by the type on which the method
	is called and thy type is sealed. If that's the case replace the method
	in the CSMemberLookupInfo with the sealed implementation.
	This is done to avoid boxing of value types if they implement the method
	to call. This can be done with a non virtual call then.
	(TrimMemberList): Call CheckForSealedImplementation if the
	resulting CSMemberLookupInfo consists of one or more methods.

	* cscc/csharp/cs_lvalue.tc (SemToLRValue): Fix a bug with the this type
	on a method invocation with base acces. The parent type was used as
	this type instead of the actual type which caused wrong code to be
	generated if the this type is a value type.
	(ILNode_SemAnalysis(ILNode_BaseElement)): Fix two bugs with returning an
	uninitialized value.

2008-08-14  Klaus Treichel  <ktreichel@web.de>

	* support/time.c (ILGetSinceRebootTime): Fix assignments to the members
	of timevalue for FreeBSD. Set type of len to size_t to fix a compiler
	warning.
 
2008-08-12  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.c (ILExecDeinit): Unregister the current thread for
	managed execution before unloading the processes.
	(ILExecEngineCreate): Initialize the new lastId member.
	(ILExecEngineDestroy): Don't destroy the processes but let the gc
	do it except it's built without multiple appdomain support.

	* engine/engine.h: Add member lastId to the ILExecEngine. Add member id
	to the ILExecProcess.

	* engine/int_table.c, engine/int_proto.h: Regenerated.

	* engine/lib_appdomain.c: Replace ILNativeInt appdomain by
	ILObject *appDomain in all function prototypes.
	(_IL_AppDomain_GetIdInternal): Added to implement the AppDomain.Id
	property.

	* engine/process.c (ILExecProcessJoinEngine): Fill the new id property.
	(_ILExecProcessCreateInternal): Allocate the process block including the
	ILObjectHeader even if that's not used by now.
	(_ILExecProcessDestroyInternal): Set the destroyed member references to 0.
	(_ILExecProcessUnloadFunc): Added thread func to run the unloading from a
	different thread.
	(ILExecProcessUnload): Implement unloading the process from a different
	thread if the current thread is in the process to be unloaded.
	(ILExecProcessDestroy): Handle the additional object header when
	deallocating the process block.

2008-08-10  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.c (ILExecDeInit): Reset the console mode to normal here
	now and not on destruction of an ILExecProcess.

	* engine/engine.h: Add more process states. Add prototype for
	_ILExecProcessLoadStandard.

	* engine/ilrun.c (main): Use ILExecProcessExecuteFile now to execute the
	program. Remove explicit destruction of the process as this will be done
	on destruction of the engine.

	* engine/ilverify.c (main): Create the process with
	ILExecProcessCreateNull instead of ILExecProcessCreate to create a non
	executable process. Make sure that the current thread is managed and
	in the process created.

	* engine/int_table.c, engine/int_proto.h: Regenerated.

	* engine/layout.c (LayoutClass): Check if the coder is actually the jit
	coder if built with libjit prior to creating the libjit functions for
	the methods of the class.

	* engine/lib_appdomain.c: Added for implementing more appdomain support.
	Move _IL_AppDomain_GetAssemblies from lib_reflect to here.

	* engine/lib_reflect.c (_IL_AppDomain_GetAssemblies): Move to ...

	* engine/Makefile.am: Add lib_appdomain.c to the sources.

	* engine/process.c (ILExecProcessDestroy): Split this function into two
	parts (_ILExecProcessUnloadInternal, _ILExecProcessDestroyInternal) to be
	able to do AppDomain.Unload. Move resetting the console to standard to
	ILExecDeInit.
	(_ILExecProcessUnloadInternal): Added. Abort all managed threads except
	the	finalizer thread in the	process and disassociate the process from the
	engine.
	(_ILExecProcessDestroyInternal): Destroy the management contents of the
	process.
	(ILExecProcessFinalizer): Add finalizer function for an	ILExecProcess.
	(_ILExecProcessCreateInternal): Added. Allocate the ILExecProcessBlock
	collectable by the gc if built with appdomain support and attach the
	finalizer to the process. Dont initialize the coder here.
	(ILExecProcessCreate): Use _ILExecProcessCreateInternal to create the
	basic ILExecProcessBlock.
	Don't register the current thread for managed execution anymore and don't
	initialize the cvm unroll stack (this is done in
	ILExecProcessInitForExecute now).
	(ILExecProcessCreateNull): Added. Like ILExecProcessCreate but the
	NullCoder is used.
	(ILExecProcessUnload): Implement AppDomain.Unload. Unloading from a new
	thread if the current thread is in the unloaded process is still TODO.
	(LoadStandard): Rename to _ILExecProcessLoadStandard and make it public
	available. Check the process state and update it if done.
	(ILExecProcessInitForExecute): Added to setup the process for execution.
	Initialize the cvm unroll stack here now.
	(ILExecProcessExecuteFile): Added to execute a program in a specific
	process from managed and unmanaged code.

	* engine/thread.c (_ILThreadClearExecContext): Do some reformatting.
	(ILThreadRegisterForManagedExecution): Allow NULL process and change the
	check for an unloading/unloaded process.
	(_ILExecThreadAbortThread): Allow aborting a thread now from an unmanaged
	thread where thread is NULL.
	(_ILExecThreadCreate): Allow creating a managed thread without being
	associated to a process (process arg is NULL).
	Perform first check for the process state before doing anything. Reorder
	the member initialization so theat the process dependant stuff comes at
	the very end.
	(_ILExecThreadDestroy): Allowing destruction from a thread that has no
	connection to a process (thread->process is NULL).

	* include/il_engine.h: Add definitions for the IL_EXECUTE_* errors.
	Add prototypes for ILExecProcessExecuteFile and ILExecProcessCreateNull.

	* libgc/configure.ac: Remove the duplicate for --enable-munmap since it's
	provided by libgc now.

	* support/hb_gc.c (ILGCRunFunc): Use GC_call_with_stack_base instead of
	registering and unregistering the thread since this is implemented
	everywhere.

2008-08-06  Klaus Treichel  <ktreichel@web.de>

	* engine/cvmc.c (_ILCVMUnrollInitStack): Use the current thread for
	initializing the unroller stack instead of the mainthread of the
	process. The thread must be initialitzed for managed execution and
	running in the process.

	* engine/debugger.c (GetId, SetId): Use ILNativeUInt instead of ILUInt32
	for the ids for working correctly on 64bit systems.
	(ShowProfiling): Use ILNativeInt instead of ILInt32 for time and count to
	fix compiler warnings on 64bit systems.
	(ShowSourceFiles, DebugHook): Add additional casts to fix compiler
	warnings on 64bit systems.

	* engine/engine.c (ILExecInit, ILExecDeinit): Create the global engine
	without appdomain support too. Use the default stackSize only if built
	with cvm.
	(ILExecEngineCreate): Initialize the process list only if built with
	appdomain support.
	(ILExecEngineDestroy): Destroy the processes in the list only if built
	with appdomain support.

	* engine/engine.h: Include cvm specific members in ILExecThread,
	ILExecProcess and ILExecEngine only if built with cvm now.
	Change prototypes of ILExecEngineInstance and ILExecEngineCreate.
	Move the declaration of ILExecEngine from include/il_engine.h to here.

	*engine/ilrun.c, engine/il_verify.c (main): Use the general calls to
	ILExecInit and ILExecProcessCreate again.

	* engine/lib_diag.c(_ILBreak, _IL_Debugger_Break): compile code only if
	built with debugger support.

	* engine/lib_thread.c(_IL_Thread_ResetAbort): Handle cvm specific stuff
	only if built with cvm.

	* engine/process.c (ILExecProcessJoinEngine,
	ILExecProcessDetachFromEngine): Remove the IL_INLINE from the methods.
	Compile the methods with and without appdomain support. Add some sanity
	checks and don't add the default process to the list of attached
	processes. Handle the list of attached processes to the engine only if
	built with appdomain support.
	(ILExecProcessGetMain): Return the managed thread of the current thread
	instead of the process' main thread because this is what would have
	happened with the old implementation anyways.

	* engine/thread.c: Compile in cvm specific stuff only if built with cvm.

	* include/il_engine.h (ILExecInit, ILExecProcessCreate): Use the same
	prototypes independent of appdomain support.
	(ILExecProcessGetMain): Add some comments and mark it obsolete.
	Move the declaration of ILExecEngine to engine/engine.h
	
2008-08-04  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_object.c (_ILGetClrType): Optimize function so that the
	clrType will simply be returned if it was created previously without
	trying to layout the class again (and acquiring the metadata lock).
	Use ILInterlockedCompareAndExchangePointers to set the clrType to
	make sure that only one clrType will be used for one class (fix
	possible race codition).

	* include/il_image.h (ILContextGetShadowCopyFiles): Add missed prototype
	from previous commit.

	* include/il_program.h (ILClassNeedsExpansion, ILMemberIsGenericInstance):
	Add missing prototypes.
	
2008-08-03  Klaus Treichel  <ktreichel@web.de>

	* cscc/common/cc_main.c (InitCodeGen): Pass an array that can safely be
	modified and freed of the passed library directories to
	ILContextSetLibraryDirs because they will be freed on context destruction
	now.

	* cscc/cs_main.c (CCPluginInit): Remove erroneous comment about nothing
	to do.

	* engine/engine.h: Add friendlyName member to the ILExecProcess. Add macro
	_ILExecProcessGetFriendlyName for access to the new member.
	Fix prototype of ILExecEngineCreate,

	* engine/ilrun.c (main): Fill the array of library paths with allocated
	copies of the args because they might be modified and freed by the
	application.

	* engine/process.c (ILExecProcessSetFriendlyName,
	ILExecProcessSetFriendlyName): Add getter and setter for the friendlyName
	member.

	* image/context.c (PathListFree): Add function to free the memory used by
	a path list.
	(ILContextDestroy): Free the new introduced members.
	(ILContextSetLibraryDirs): Free the old library dirs.
	(ILContextSetApplicationBaseDir, ILContextGetApplicationBaseDir,
	ILContextSetCacheDir, ILContextGetCacheDir, ILContextGetDynamicBaseDir,
	ILContextSetDynamicBaseDir, ILContextGetLibraryDirs,
	ILContextClearLibraryDirs, ILContextSetRelativeSearchDir,
	ILContextGetRelativeSearchDir, ILContextSetShadowCopyDirs,
	ILContextGetShadowCopyDirs, ILContextClearShadowCopyDirs,
	ILContextSetShadowCopyFiles, ILContextGetShadowCopyFiles): Add functions
	to manage the new introduced members.

	* image/image.c (ILImageGetFileName): Add function to get the filename of
	the image.

	* image/image.h: Add members applicationBaseDir, relativeSearchDir,
	cacheDir, dynamicBaseDir, shadowCopyFiles and shadowCopyDirs to the
	ILContext struct.

	* image/link.c (TestPathForFile): Avoid adding an additional path separator
	if the last character in the path is allready one.
	(ILPinvokeResolveModule): Fix a compiler warning (posn is used only on non
	windows platforms). Look for the libraries starting with cyg instead of lib
	on cygwin systems too.

	* include/il_engine.h (ILExecProcessSetFriendlyName,
	ILExecProcessGetFriendlyName): Add prototypes.

	* include/il_image.h (ILContextSetApplicationBaseDir,
	ILContextGetApplicationBaseDir,	ILContextSetCacheDir,
	ILContextGetCacheDir, ILContextGetDynamicBaseDir,
	ILContextSetDynamicBaseDir, ILContextGetLibraryDirs,
	ILContextClearLibraryDirs, ILContextSetRelativeSearchDir,
	ILContextGetRelativeSearchDir, ILContextSetShadowCopyDirs,
	ILContextGetShadowCopyDirs, ILContextClearShadowCopyDirs,
	ILContextSetShadowCopyFiles, ILContextGetShadowCopyFiles): Add prototypes.
: 
2008-07-31  Klaus Treichel  <ktreichel@web.de>

	* support/hb_gc.c (ILGCRunFunc): Use the new functions for registering
	and unregistering an existing thread in libgc 7.x to run the function
	under gc control.

	* engine/Makefile.am, support/Makefile.am: Add the directory of
	libatomic_ops to the directories to search for include files because it's
	needed by gc_priv.h now.

	* libgc/doc/Makefile.am, libgc/include/Makefile.am,
	libgc/include/private/solaris_threads.h, libgc/tests/trace_test.c,
	libgc/configure.in, libgc/gcc_support.c, libgc/pc_excludes,
	libgc/powerpc_darwin_mach_dep.s, libgc/solaris_pthreads.c,
	libgc/solaris_threads.c, libgc/version.h: Remove files no longer in the
	official libgc tarball of the 7.x versions.

	* libgc/ChangeLog,libgc/NT_X64_STATIC_THREADS_MAKEFILE,
	libgc/NT_X64_THREADS_MAKEFILE, libgc/bdw-gc.pc.in, libgc/compile,
	libgc/configure.ac, libgc/configure_atomic_ops.sh, libgc/msvc_dbg.c,
	libgc/thread_local_alloc.c, libgc/cord/cord.am,	libgc/doc/README.win64,
	libgc/doc/doc.am, libgc/doc/overview.html, libgc/doc/porting.html,
	libgc/include/gc_tiny_fl.h, libgc/include/gc_version.h,
	libgc/include/include.am, libgc/include/private/msvc_dbg.h,
	libgc/include/private/thread_local_alloc.h, libgc/include/extra/gc_cpp.h,
	libgc/include/extra/gc.h, libgc/tests/huge_test.c,
	libgc/tests/smash_test.c, libgc/tests/tests.am,
	libgc/libatomic_ops-1.2/aclocal.m4, libgc/libatomic_ops-1.2/AUTHORS,
	libgc/libatomic_ops-1.2/ChangeLog, libgc/libatomic_ops-1.2/compile,
	libgc/libatomic_ops-1.2/config.guess, libgc/libatomic_ops-1.2/config.sub,
	libgc/libatomic_ops-1.2/configure, libgc/libatomic_ops-1.2/configure.ac,
	libgc/libatomic_ops-1.2/COPYING, libgc/libatomic_ops-1.2/depcomp,
	libgc/libatomic_ops-1.2/INSTALL, libgc/libatomic_ops-1.2/install-sh,
	libgc/libatomic_ops-1.2/Makefile.am, libgc/libatomic_ops-1.2/missing,
	libgc/libatomic_ops-1.2/mkinstalldirs, libgc/libatomic_ops-1.2/NEWS,
	libgc/libatomic_ops-1.2/README, libgc/libatomic_ops-1.2/doc/COPYING,
	libgc/libatomic_ops-1.2/Makefile.in,
	libgc/libatomic_ops-1.2/doc/LICENSING.txt,
	libgc/libatomic_ops-1.2/doc/Makefile.am,
	libgc/libatomic_ops-1.2/doc/Makefile.in,
	libgc/libatomic_ops-1.2/doc/README_malloc.txt,
	libgc/libatomic_ops-1.2/doc/README_stack.txt,
	libgc/libatomic_ops-1.2/doc/README.txt,
	libgc/libatomic_ops-1.2/doc/README_win32.txt,
	libgc/libatomic_ops-1.2/src/atomic_ops.c,
	ibgc/libatomic_ops-1.2/src/atomic_ops.h,
	libgc/libatomic_ops-1.2/src/atomic_ops_malloc.c,
	libgc/libatomic_ops-1.2/src/atomic_ops_malloc.h,
	libgc/libatomic_ops-1.2/src/atomic_ops_stack.c,
	libgc/libatomic_ops-1.2/src/atomic_ops_stack.h,
	libgc/libatomic_ops-1.2/src/atomic_ops_sysdeps.S,
	libgc/libatomic_ops-1.2/src/config.h.in,
	libgc/libatomic_ops-1.2/src/Makefile.am,
	libgc/libatomic_ops-1.2/src/Makefile.in,
	libgc/libatomic_ops-1.2/src/Makefile.msft,
	libgc/libatomic_ops-1.2/src/atomic_ops/generalize.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/generalize-small.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/generalize-small.template,
	libgc/libatomic_ops-1.2/src/atomic_ops/Makefile.am,
	libgc/libatomic_ops-1.2/src/atomic_ops/Makefile.in,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/acquire_release_volatile.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/aligned_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/all_acquire_release_volatile.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/all_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/all_aligned_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/ao_t_is_int.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/char_acquire_release_volatile.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/char_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/emul_cas.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/generic_pthread.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/int_acquire_release_volatile.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/int_aligned_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/int_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/Makefile.am,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/Makefile.in,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/ordered_except_wr.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/ordered.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/README,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/read_ordered.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/short_acquire_release_volatile.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/short_aligned_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/short_atomic_load_store.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/standard_ao_double_t.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/test_and_set_t_is_ao_t.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/test_and_set_t_is_char.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/armcc/arm_v6.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/alpha.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/arm.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/cris.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/hppa.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/ia64.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/m68k.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/powerpc.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/s390.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/sparc.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/x86_64.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/x86.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/hpc/hppa.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/hpc/ia64.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/ibmc/powerpc.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/icc/ia64.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/msftc/x86_64.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/msftc/x86.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/sunc/sparc.h,
	libgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/sunc/sparc.S,
	libgc/libatomic_ops-1.2/tests/list_atomic.c,
	libgc/libatomic_ops-1.2/tests/list_atomic.template.
	libgc/libatomic_ops-1.2/tests/Makefile.am,
	libgc/libatomic_ops-1.2/tests/Makefile.in,
	libgc/libatomic_ops-1.2/tests/run_parallel.inc,
	libgc/libatomic_ops-1.2/tests/test_atomic.c,
	libgc/libatomic_ops-1.2/tests/test_atomic_include.h,
	libgc/libatomic_ops-1.2/tests/test_atomic.template,
	libgc/libatomic_ops-1.2/tests/test_malloc.c,
	libgc/libatomic_ops-1.2/tests/test_stack.c: Add new files in libgc 7.1

	* libgc/AmigaOS.c, libgc/BCC_MAKEFILE, libgc/EMX_MAKEFILE, libgc/MacOS.c,
	libgc/Makefile.am, libgc/Makefile.direct, libgc/Makefile.dj,
	libgc/NT_MAKEFILE, libgc/NT_STATIC_THREADS_MAKEFILE,
	libgc/NT_THREADS_MAKEFILE, libgc/OS2_MAKEFILE, libgc/PCR-Makefile,
	libgc/README.QUICK, libgc/SMakefile.amiga, libgc/WCC_MAKEFILE,
	libgc/add_gc_prefix.c, libgc/allchblk.c, libgc/alloc.c, libgc/backgraph.c,
	libgc/blacklst.c, libgc/checksums.c, libgc/darwin_stop_world.c,
	libgc/dbg_mlc.c, libgc/digimars.mak, libgc/dyn_load.c, libgc/finalize.c,
	libgc/gc.mak, libgc/gc_cpp.cc, libgc/gc_dlopen.c, libgc/gcj_mlc.c,
	libgc/gcname.c, libgc/headers.c, libgc/if_mach.c, libgc/if_not_there.c,
	libgc/mach_dep.cm libgc/malloc.c, libgc/mallocx.c, libgc/mark.c,
	libgc/mark_rts.c, libgc/misc.c, libgc/mkinstalldirs, libgc/new_hblk.c,
	libgc/obj_map.c, libgc/os_dep.c, libgc/pcr_interface.c,
	libgc/pthread_stop_world.c, libgc/pthread_support.c, libgc/ptr_chck.c,
	libgc/real_malloc.c, libgc/reclaim.c, libgc/setjmp_t.c,
	libgc/sparc_mach_dep.S, libgc/specific.c, libgc/stubborn.c,
	libgc/threadlibs.c, libgc/typd_mlc.c, libgc/win32_threads.c,
	libgc/cord/de_win.c, libgc/doc/README, libgc/doc/README.Mac,
	libgc/doc/README.changes, libgc/doc/README.darwin,
	libgc/doc/README.environment, libgc/doc/README.linux,
	libgc/doc/README.macros, libgc/doc/README.solaris2, libgc/doc/README.win32.
	libgc/doc/gcdescr.html, libgc/doc/gcinterface.html, libgc/doc/leak.html,
	libgc/doc/scale.html, libgc/include/gc.h, libgc/include/gc_allocator.h,
	libgc/include/gc_config_macros.h, libgc/include/gc_cpp.h,
	libgc/include/gc_gcj.h, libgc/include/gc_inline.h, libgc/include/gc_mark.h,
	libgc/include/gc_pthread_redirects.h, libgc/include/gc_typed.h,
	libgc/include/new_gc_alloc.h, libgc/include/private/dbg_mlc.h,
	libgc/include/private/gc_hdrs.h, libgc/include/private/gc_locks.h,
	libgc/include/private/gc_pmark.h, libgc/include/private/gc_priv.h,
	libgc/include/private/gcconfig.h, libgc/include/private/pthread_support.h,
	libgc/include/private/specific.h, libgc/tests/leak_test.c,
	libgc/tests/middle.c, libgc/tests/test.c, libgc/tests/test_cpp.cc,
	libgc/tests/thread_leak_test.c: Update existing files to libgc 7.1.

2008-07-29  Klaus Treichel  <ktreichel@web.de>

	* include/il_gc.h (ILGCRunFunc): Add prototype for the function that
	allows running a function under GC control by a thread not created
	by the GC functions.

	* support/def_gc.c, support/hb_gc.c (ILGCRunFunc): Implement the
	function.

	* support/thread.c (ILThreadRunSelf): Use ILGCRunFunc instead of calling
	libgc functions directly.

2008-07-20  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_relop.tc: Change the code generation for float compares.
	Replace the branches with branchless solutions using the unordered
	compares/branches.

	* engine/jitc_branch.c (JITCoder_Branch): Handle the unsigned/unordered
	branch opcodes correctly for float compares (Fixes result for NaN values).
	(JITCoder_Compare): Handle the unsigned/unordered check opcodes correctly
	for float values (Fixes result for NaN values).

	* engine/cvmc_branch.c (CVMCoder_Branch, CVMCoder_Compare): likewise.
	
2008-07-14  Klaus Treichel  <ktreichel@web.de>

	* engine/verify_branch.c (IL_PREFIX_OP_CEQ): Look for a following
	"ldc.i4.1;xor" and "ldc.i4.0;ceq" which are sequences for a logical not,
	pass the inverttest to the coder and skip the not sequence.
	* engine/verify_branch.c (IL_PREFIX_OP_Cxx): Add the check for
	"ldc.i4.0;ceq" too.

2008-07-12  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_logical.tc (ILNode_GenValue(ILNode_LogicalNot)): Change the
	code generated for a logical NOT from solution with branches to a simple
	GenValue(expr); ldc.i4.1: xor;.

2008-07-10  Klaus Treichel  <ktreichel@web.de>

	* support/pt_defs.h (_ILSemaphoreWait): Retry sem_wait in the case the
	call returned because the thread was interrupted.
	* support/pt_defs.h (_ILThreadSuspendOther, _ILThreadResumeOther): Use
	_ILSemaphoreWait instead of calling sem_wait directly (Heiko Weiss).

2008-06-01  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Add check for existence of the header execinfo.h and the
	functions backtrace and backtrace_symbols.

	* engine/jitc.c (ILJitBacktrace): Add helper function for printing
	backtraces in gdb.

	* engine/jitc_diag.c (_ILJitGetCallingMethod): Rewrite to use the new
	libjit unwind api.

2008-04-21  Aleksey Demakov  <ademakov@gmail.com>

	* engine/jitc.c: add ILJitTraceIn and ILJitTraceOut functions.

	* engine/jitc_setup.c (JITCoder_Setup): emit ILJitTraceIn call.

	* engine/jitc_call.c (JITCoder_ReturnInsn): emit ILJitTraceOut call.

2008-03-29  Radek Polak  <psonek2@seznam.cz>

	* engine/md_arm.h: Fix array start on ARM EABI.

	* engine/unroll_arith.c: Do not use unroller for working with long, because
	of 8 byte aligned CVM word on ARM EABI.

2008-03-24  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add creation of value types (structs/unions) including
	the struct fields in libjit (Needed for X86_64 SysV abi struct passing).

	* engine/jitc_arith.c: Fix shifts. The type to be shifted depends only
	on the value to be shifted.

	* engine/jitc_locals.c: Handle unions like structs in locals
	initialization.

2008-03-23  Klaus Treichel  <ktreichel@web.de>

	* support/wait_mutex.c: Fix compiler warnings on X86_64. Number of shifted
	bits of the pointer for the hashtable depends on the size of void * and
	not on the size of int.

2008-02-03  Andreas Färber  <andreas.faerber@web.de>

	* csdoc/doc_valil.c, engine/lib_string.c: Move variable declarations
	before any non variable declaration statements for gcc2 and ANSI C
	compliance in GetClassNameInner and WithTypeToNameInner (doc_valil.c)
	and _IL_String_FindInRange (lib_string.c). (patch #6394)

	* support/console.c, support/serial.c: Include sys/socket.h if present.
	That's needed for BeOS. (patch #6397)

	* support/socket.c: Support SOCK_RAW only if it's defined because BeOS
	has incomplete socket support. (patch #6398)

2008-01-06  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_array.c: Rename GetArrayBase to _ILJitSArrayGetBase and
	GetArrayLength to _ILJitSArrayGetLength. Pass the jit function instead of
	the coder to the two functions.

	* engine/jitc_pinvoke.c: Use the methods in jitc_array.c to get the base
	or length of a simple array. Use the offsetof macro to get the actual
	offset of the length in the array header instead of 0 when setting the
	new array length.

2008-01-05  Radek Polak  <psonek2@seznam.cz>

	* support/socket.c: Implemented IrDA device discovery. Fixed checking for
	return values from getsockopt and setsockopt.

2007-12-30  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Implemented local variables and function parameters
	for CVM coder.

2007-12-26  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Fix a bug in AdjustMixedBinary when checking for pointer
	types.

2007-12-20  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Fix connection shutdown. Now it terminates
	debugged program instead of endless loop.

2007-12-20  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Implemented debugger connecection to frontend. It
	can be specified by IP address, it can work on stdio and it can be
	tracing automat with output on stdout. Fixed unregistering debug hook
	properly.

	* engine/debugger.h: Added flag to not start IO thread.

	* include/il_debugger.h: Added one more variable for user data.

	* engine/ilrun.c: Removed unnecessary error output. Debugger
	parameters cleanup.

	* doc/debugger.txt: Added some documentation for debugger.

2007-12-11  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Clean up a not needed commented _IL_JIT_OPTIMIZE_LOCALS.
	Fix an argument array overflow when building signatures for internal
	functions in ILJitInit.

2007-12-11  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Implemented simple profiling support in debugger.

	* engine/debugger.h: Definitions for profiler.

2007-12-09  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.c: Move thread initialization in front of the creation
	of the global trace mutex because the thread library has to be initialized
	before any thread features can be used.
	This fixes a bug with pthreads where the global mutex attribute was not
	initialized when the global trace mutex was created.

	* configure.in, support/thr_choose.h: Add thread support for NetBSD.

	* configure.in: Install the libraries in the correct directory on
	multi os systems (like x86_64).

2007-12-07  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Fix debugger crash when watching "this" in struct
	members. The pointer to "this" has to be boxed before it is passed to
	DebuggerHelper as object reference.

2007-12-01  Klaus Treichel  <ktreichel@web.de>

	* libffi/fficonfig.h.in: Delete the autogenerated file again.

2007-11-30  Klaus Treichel  <ktreichel@web.de>

	* libffi/ChangeLog, libffi/Makefile.am, libffi/README,
	libffi/configure.ac, libffi/include/Makefile.am, libffi/include/ffi.h.in,
	libffi/include/ffi_common.h, libffi/src/debug.c,
	libffi/src/java_raw_api.c, libffi/src/prep_cif.c, libffi/src/raw_api.c,
	libffi/src/types.c, libffi/src/alpha/ffi.c, libffi/src/alpha/ffitarget.h,
	libffi/src/alpha/osf.S, libffi/src/arm/ffi.c, libffi/src/arm/ffitarget.h,
	libffi/src/arm/sysv.S, libffi/src/cris/ffi.c, libffi/src/frv/eabi.S,
	libffi/src/frv/ffi.c, libffi/src/ia64/ffi.c, libffi/src/m32r/ffi.c,
	libffi/src/m68k/ffi.c, libffi/src/m68k/ffitarget.h, libffi/src/m68k/sysv.S,
	libffi/src/mips/ffi.c, libffi/src/mips/ffitarget.h, libffi/src/mips/n32.S,
	libffi/src/mips/o32.S, libffi/src/pa/ffi.c, libffi/src/pa/ffitarget.h,
	libffi/src/pa/linux.S, libffi/src/powerpc/ffi.c,
	libffi/src/powerpc/ffi_darwin.c, libffi/src/powerpc/ffitarget.h,
	libffi/src/powerpc/linux64.S, libffi/src/powerpc/ppc_closure.S,
	libffi/src/powerpc/sysv.S, libffi/src/s390/ffi.c, libffi/src/sh/ffi.c,
	libffi/src/sh/sysv.S, libffi/src/sh64/ffi.c, libffi/src/sh64/sysv.S,
	libffi/src/sparc/ffi.c, libffi/src/x86/ffi.c, libffi/src/x86/ffi64.c,
	libffi/src/x86/ffitarget.h, libffi/src/x86/sysv.S: Update libffi

	* libffi/fficonfig.h.in, libffi/src/closures.c, libffi/src/dlmalloc.c,
	libffi/src/pa/hpux32.S, libffi/src/x86/darwin.S,
	libffi/src/x86/darwin64.S: Add new libffi files.

	* libffi/src/ffitest.c: Delete obsolete libffi file.

2007-11-29  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_stmt.tc: Attach the type of the constant to the value
	in the SemGuard node instead of the type of the constant's expression
	during semantic analysis for ILNode_LocalConstDeclaration.

2007-11-29  Radek Polak  <psonek2@seznam.cz>

	* engine/cvm.c: Fix building without debugger (thanks to Weaselweb).

2007-11-27  Heiko Weiss <heiko.weiss@de.trumpf-laser.com>
	* engine/cvmc.c, engine/jitc.c: do some better formatting for profiling 
	output.

2007-11-22  Radek Polak  <psonek2@seznam.cz>

	* engine/cvm.c: Break in debugger only if thread is breakable. This is needed
	for displaying watches from DebuggerHelper class.

2007-11-12  Klaus Treichel  <ktreichel@web.de>

	* csdoc/doc_load.c: Add support for parsing matadata attributes consisting
	of two parts like 'nested public'.
 
	* csdoc/doc_valil.c: Add support for generics. Add support for nested
	classes. Don't check the 'has secutity' flag in the attributes when
	comparing them. Add the GenericParameter attribute target. Handle 'out'
	and 'param' parameters in the signature. 

	* csdoc/il2doc.c: Add support for nested classes. Add the GenericParameter
	attribute target. Don't destroy only the image. This causes invalid
	values in the context's hash tables if more than one assembly is processed.

	* dumpasm/dump_string.c, include/il_dumpasm.h: Add the functions
	ILDumpXmlStringLen and ILDumpXmlString for dumping strings with
	xml quoting.

	* dumpasm/dump_type.c: Use the new functions for dumping type names if
	IL_DUMP_XML_QUOTING is set in the flags when dumping type names.

	* image/class.c, include/il_program.h: Add the function
	ILClassToPrimitiveType for trying to convert a class to a primitive type.

	* image/meta_types.c: Try to convert a class to a primitive type first
	before setting an array element or the return/parameter type in a
	signature or with type.

2007-11-07  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_decls.tc: Add the GenDiscard operations for
	ILNode_GenericTypeParameter and ILNode_GenericTypeParameters.

	* codegen/cg_nodes.tc: Change the node types of ILNode_GenericTypeParameter
	and ILNode_GenericTypeParameters from ILNode_Dummy to ILNode_Declaration.
	Add the enum ILGenParamTarget to handle method- and cass generic type
	parameters in the GenDiscard operation.

	* codegen/jv_decls.tc: Add stubs of the JavaGenDiscard operations for
	ILNode_GenericTypeParameter and ILNode_GenericTypeParameters.

	* cscc/csharp/cs_decls.tc: Add semantic analysis of the generic parameters
	during semantic analysis of the class and methods. Move the semantic
	analysis of ILNode_GenericTypeParameter and ILNode_GenericTypeParameters
	to this file.
	Add the stubs of the GatherStaticCtor operations for declarations for
	ILNode_GenericTypeParameter and ILNode_GenericTypeParameters.

	* cscc/csharp/cs_gather.c: Set the genParamTarget in the generic parameter
	during type gathering.

	* cscc/csharp/cs_lvalue.tc: Remove the samantic analysis operations that
	were moved to cs_decls.c.

	* cscc/java/java_decls.tc: Add stubs of the GatherStaticCtor operations
	for ILNode_GenericTypeParameter and ILNode_GenericTypeParameters.

	* csdoc/doc_sort.c: Add support for nested types by using the part in
	fullName before the name only part as namespace.

	* csdoc/il2doc.c: Add support for generics.

	* image/class.c: Return 0 instead of 1 in ILClassInheritable if a class
	might inherit itself.

	* image/meta_build.c: Fix a problem in Load_MemberRef with IL_DEBUG_META
	set if the member owner has no className.

2007-10-30  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_gen.c: Add handling of with types in ILTypeToClass.
	Initialize the new member accessCheck with ILClassAccessible.

	* codegen/cg_gen.h: Add the member accessCheck to the geninfo struct
	to hold the function to use for checking if a class is accessible /
	can be inherited by an other class.

	* cscc/csharp/cs_decls.tc: Remove the accesses to the currentTypeFormals
	because they are not needed anymore.

	* cscc/csharp/cs_gather.c: Split the type creation into two parts
	(Step 1: creation of the ILClass records and Step 2: setting the parent
	class and adding the implemented interfaces) to allow nested types to be
	used in generic types.
	Check the if the underlying base class is an interface instead of the
	base class which might be a TypeSpec.
	Remove the accesses to the currentTypeFormals member of the geninfo
	structure.

	* cscc/csharp/cs_lookup.c: Use the new geninfo member accessCheck to check
	if a class is accessible in the current scope.

	* cscc/csharp/cs_lvalue.tc: Remove the scortcut with resolving the member
	with namespace and name directly in
	ILNode_SemanalysisType(ILNode_MemberAccess) because that leads to wrong
	resolved classes if the an other class could be resolved by the normal
	member access processing.

	* cscc/csharp/cs_semantics.tc, cscc/csharp/cs_types.tc: Move the function
	SemWithType from cs_types.tc to CSSemWithType in cs_semanalysis.tc and
	change the existing calls to that function accordingly.
	
	* cscc/csharp/cs_semantics.tc: Change the accessCheck to
	ILClassInheritable in CSSemBaseType before semanalyzing the type and
	restore the value afterwards.

	* image/class.c: Initialize the new ILClass member numGenericPars to -1
	in ILClassCreate and 0 in ILClassCreateWrapper.
	Add the function ILClassInheritable to check if a class might be used as
	parent or an implemented interface. This is different from
	ILClassAccessible because the family (protected) case can not be checked
	in this case and should be handled like the public case.
	Add the function ILClassGetNumGerericPars and ILClassSetNumGenericPars
	to cache a previous value in the ILClass struct.

	* image/meta_types.c: Add the function ILTypeSetWithMain.

	* image/program.h: Add the member numGenericPars to the ILClass struct
	for caching metadata lookups because the value will be used very often
	with generics.

	* include/il_program.h: Add the declarations for the new functions
	ILClassInheritable, ILClassGetNumGenericPars and ILClassSetNumGenericPars.

	* include/il_types.h: Add the element type ILType_String.
	Add the declaration of the new function ILTypeSetWithMain.

2007-10-23  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_defs.c: Replace the type node with a left and an
	identifier node to be able to handle generic methods too.

	* cscc/csharp/cs_gather.c: Handle the GenericReference node in
	GetFullAndBasicNames so that type names are built correctly.
	Set the currentClass in the genInfo block to the current class instead
	of the nested parent in CreateType to be able to resolve generic type
	parameters correctly.

	* cscc/csharp/cs_grammar.y: replace the right shift token ">>" with two
	greater than tokens '>' '>' to be able to handle nested generic types
	(ECMA 334 version 4 9.4.5).
	Remove the GENERIC_LT token because the ECMA specs say that the
	distinction between '<', '>' and expresssions has to be handled different.
	Redo the grammar for qualified identifiers to be able to handle the changed
	generic	references.
	Replace the identifier in generic methods, classes, ... with
	GenericIdentifierStart which includes the '<' token.

	* cscc/csharp/cs_internal.h: Add structures to handle member accesses
	in the grammar.

	* cscc/csharp/cs_lookup.c: Change CSGetAccessScope so that the nested
	parent is used for the access scope if the current class is not yet
	created.

	* cscc/csharp/cs_scanner.l: Remove the right shift and the GENERIRIC_LT
	tokens.

	* cscc/csharp/cs_types.c: Add the ILNode_SemAnalysisType operation for
	generic references for sesolving generic types. Remove the functions for
	inserting expressions in TypeFormals and TypeActuals.

2007-10-22  Radek Polak  <psonek2@seznam.cz>

	* support/socket.c: Implement recieve and send timeouts socket
	options. This fixes bug #18785.

2007-10-22  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Dump information whether image contains entry
	point.

2007-10-15  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_output.c: Use the number of dimensions of the last nested
	array to specify the number of args for the ctor in ILGenArrayCtor instead
	of the first one.

2007-10-14  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_grammar.y: Redo the creation of extended types like
	pointer- and array types. Layout array types in the reverse order as
	specified in the ECMA specs.  Remove the GenericReference because that
	has to be done differently. Prepare some Expressions to be able to handle
	the generic references.

	* cscc/csharp/cs_internal.h: Add the structures to collect array ranks
	and the array type.

	* cscc/csharp/cs_misc.c: Change the semantic analysis for the new
	expression to handle arrays of arrays correctly.

2007-10-13  Klaus Treichel  <ktreichel@web.de>

	* support/read_float.c, support/write_float.c: Extend the number of bytes
	in the convert union to 8 in _ILReadDouble and _ILWriteDouble to match
	the correct length and fix compiler warnings with gcc 4.2.1.

	* cscc/csharp/cs_stmt.tc: Fix the using statement for expressions.
	(bug #20790)

2007-10-12  Radek Polak  <psonek2@seznam.cz>

	* engine/int_proto.h, engine/int_table.c, engine/lib_thread.c,
	include/il_thread.h, support/pt_defs.c, support/thread.c: Implement
	functions that allow sending IL_SIG_ABORT signal. This is used to
	cancel blocking operations (bug #20885).

	* engine/process.c: Send abort signal on background threads, when
	process is ending so that background threads do not prevent program to
	exit.
	

2007-10-11  Klaus Treichel  <ktreichel@web.de>

	* image/generic_class.c: Fix a warning by casting the event to an
	ILEvent instead of an ILField in ExpandInstantiations.
	Return the member instaed of 0 if the owner is no generic instance in
	ILClassGetMemberInstance.

	* image/generic_member.c: Remove the unused local variable owner to fix
	a compiler warning.
	
2007-10-10  Radek Polak  <psonek2@seznam.cz>

	* support/serial.c: Fix warnings on cygwin.

2007-10-10  Radek Polak  <psonek2@seznam.cz>

	* support/serial.c: Fix build on cygwin.

2007-10-09  Radek Polak  <psonek2@seznam.cz>

	* engine/int_proto.h, engine/int_table.c, engine/lib_serial.c,
	include/il_serial.h, support/serial.c: Implemented blocking with
	timeout on serial's port write operation. Changed function prototype
	to return error codes.

2007-10-08  Aleksey Demakov  <ademakov@gmail.com>

	* include/il_coder.h, engine/verify_branch.c, engine/null_coder.c,
	* engine/cvmc.c, engine/cvmc_branch.c, engine/jitc.c,
	* engine/jitc_branch.c, engine/jitc_labels.c: add SwitchEnd coder
	method, call it at the end of switch instruction handling. Make
	use of libjit jump tables to generate switch instruction in jit
	coder.

2007-09-23  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_nodes.tc: Add the member visited to the definitions of
	ILNode_GenericTypeParameter and ILNode_GenericTypeParameters.

	* cscc/csharp/cs_defs.tc: Add the node type ILNode_GenericTypeConstraint.

	* cscc/csharp/cs_gather.c: Fix resolving the class of generic type
	constraints so that primitive types are handled too.
	Move the semantic check of generic type parameters to the
	ILNode_Semanalysis operation of the nodes.

	* cscc/csharp/cs_grammar.y: Wrap the types for the type constraints in
	ILNode_GenericTypeConstraint nodes.

	* cscc/csharp/cs_lvalue.tc: Perform the semanalysis for generics in the
	correponding ILNode_Semanalysis operations.

2007-09-20  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_decls.c: Use ILDasmDumpGenericParams to dump the generic
	parameters instead of implementing it here too. Compile it conditional
	if IL_VERSION_MAJOR > 1.

	* codegen/cg_gen.h: Include the currentTypeFormals and currentMethodFormals
	only if IL_VERSION_MAJOR > 1.

	* codegen/cg_nodemap.c: Access the typeFormals in the genInfo only if
	IL_VERSION_MAJOR > 1.

	* codegen/cg_nodemap.h: Include the currentTypeFormals and
	currentMethodFormals in the ILGenItemContext only if IL_VERSION_MAJOR > 1.

	* codegen/cg_nodes.tc: Add the ILNode_GenericTypeParameter and
	ILNode_GenericTypeParameters node types. Add the typeFormals to the
	ILNode_MethodDeclaration.

	* cscc/cs_main.c: Initialize the memory pool for the member resolution
	on start and destroy it on exit.

	* cscc/c/c_lvalue.tc: Add dummy SemAnalysis for the new
	ILNode_GenericTypeParameter and ILNode_GenericTypeParameters node types.

	* cscc/csharp/cs_decls.tc: Save and restore the current formals only if
	IL_VERSION_MAJOR > 1. Pass the new argument typeFormals as 0 to
	ILNode_MethodDeclaration_create.

	* cscc/csharp/cs_defs.tc: Add numArgs and rename actuals to typeArguments
 	in the definition of ILNode_GenericReference. Add the new node type
	ILNode_GenericConstraint.

	* cscc/csharp/cs_gather.c: Add support for creating generic type parameters
	for classes and methods. Add the arity suffix for clscompliant generic
	classes. Pass the methodTypeFormals if needed to
	ILNode_MethodDeclaration_create. Handle renaming of overridden generic type
	parameters in nested parent classes.

	* cscc/csharp/cs_grammar.y: Pass the new typeFormals argument to
	ILMethodDeclaration_create. Redo the whole part of generic type
	declaration to be ECMA 334 version 4 compliant.

	* cscc/csharp/cs_internal.h: Include <il_profile.h> to check for
	IL_VERSION_MAJOR. Include the new header file cs_lookup_member.h.
	Add numActuals to the arguments of CSInsertGenericReference.

	* cscc/csharp/cs_lookup.c: Move the member lookup to the new file
	cs_lookop_member.c and include this file. Fix the resolution of generic
	type parameters and generic method parameters.

	* cscc/csharp/cs_lookup_member.c, cscc/csharp/cs_lookup_member.h: Add
	those new files.

	* cscc/csharp/cs_lvalue.tc: Add dummy SemAnalysis for the new node types
	ILNode_GenericTypeParameter, ILNode_GenericTypeParameters and
	ILNode_GenericConstraint.

	* cscc/csharp/cs_types.c: Fix the handling of typeActuals so that they
	compile now. A major change is needed here too.

	cscc/csharp/Makefile.am: handle the new source files cs_lookup_member.c
	and cs_lookup_member.h.

	* cscc/java/java_decls.tc, cscc/java/java_gather.c,
	cscc/java/java_grammar.y, cscc/vb/vb_grammar.y: Pass the new argument
	typeFormals as 0 to ILNode_MethodDeclaration_create.

	* csdoc/il2doc.c, dumpasm/dump_class.c, dumpasm/dump_type.c,
	dumpasm/dump_utils.c, include/il_dumpasm.h: Rename ILAsmDumpGenericParams
	to ILDasmDumpGenericParams.

	* image/class.c: Fix returning of 0 in ILClassNextMember.

2007-09-14  Heiko Weiss  <heiko.weiss@de.trumpf-laser.com>

	* engine/jitc.c: enabling jit optimizing locals by default.

2007-09-11  Ivan de Jesus Deras Tabora  <ideras@gmail.com>

	* engine/cvm.h: Define the new cvm opcode COP_PREFIX_CALL_VIRTGEN to
	call a instance of a virtual generic method.

	* engine/cvm_call.c Implementing the new opcode COP_PREFIX_CALL_VIRTGEN.

	* engine/cvmc.c Added a new include il_program.h

	* engine/cvmc_call.c CVMCoder_CallVirtual now handle virtual generic
	method instances.

	* engine/layout.c LayoutClass now handles classes that inherits or
	implements generic classes or interfaces.

	* engine/lib_type.c NameOutputClassName now handles generic instance
	classes.

	* engine/verify.c Handling of generic local variables in methods.

	* engine/verify_call.c GetMethodToken handles generic method references.

	* engine/verify_obj.c GetFieldToken now handles generic field references.

	* engine/verify_ptr.c GetClassToken now handles generic class references.

	* image/class.c Set the class name when creating a wrapper.

	* image/generic.c Split of the code into two different files:
	generic_member.c for functions related to generic class members and
	generic_class.c for functions related to generic classes.

	* image/generic_member.c New file for functions related to generic
	member classes.

	* image/generic_class.c New file for functions related to generic classes.

	* image/member.c ILMemberAccessible now handles generic members.

	* image/meta_types.c ILGetEnumType now handles generic enum types.

	* image/program.h Added a new define for the initial size of the method
	vtable. Added two new structures ILMethodVTableItem and ILMethodVTable
	to support dynamic vtables for virtual generic methods.
	Added a new member to the ILMethod struct to support vtables in methods.
	Added a new struct ILMethodInstance that represent a method instance.

	* include/il_program.h Added a new typedef for ILMethodInstance.
	ILClassInstantiate now receive the method type arguments as parameter.
	Added function prototypes for the following functions:
	ILClassGetTypeArguments, ILClassGetGenericDef, ILClassExpand,
	ILClassIsExpanded, ILClassResolveToInstance, ILClassLookupMethodInstance,
	ILMemberResolveToInstance, ILMethodSpecToMethod,
	ILMethodSetVirtualAncestor, ILMethodGetInstance, ILMethodAddInstance,
	ILMethodGetClassTypeArguments, ILMethodGetMethodTypeArguments.
	Added the following macros ILMember_IsGenericInstance,
	ILMethod_IsVirtualGeneric, ILClass_IsGenericInstance

	* image/Makefile.am added new source files generic_member.c and
	generic_class.c

2007-09-11  Ivan de Jesus Deras Tabora  <ideras@gmail.com>

	* engine/cvm_stack.c Fixed CVM documentation for COP_PREFIX_REPL_WORD_N.

	* engine/verify_call.c Constrained callvirt for value types should be
	handled as a normal call (non virtual).

	* engine/verify_obj.c Fixed INITOBJ CIL opcode to be ECMA compliant.
	Now it can be applied to ref types.

	* engine/verify_ptr.c Fixed IL_OP_LDELEM for value types. Also added a
	missing break when handling LDSFLDA.

	* image/generic.c _ILTypeToSyntheticInstantiation now receive an extra
	parameters, the method type parameters.

	* image/image.h _ILTypeToSyntheticInstantiation now receive an extra
	parameters, the method type parameters.

	* image/meta_types.c ILTypeToName now handle BYREF types and Method Type
	Parameters.

	* image/synthetic.c _ILTypeToSyntheticInstantiation now receive an extra
	parameters, the method type parameters.

2007-09-10  Klaus Treichel  <ktreichel@web.de>

	* image/misc_token.c, include/il_program.h: Revert the changes in
	ILTypeSpecGetClass and ILTypeSpecGetClassRef. Add the new function
	ILTypeSpecGetClassWrapper instead.

	* image/member.c Call the new function ILTypeSpecGetClassWrapper for
	creating the member owner if the passed owner is a TypeSpec in
	ILMemberRefCreate.

	* image/class.c: Optimize ILClassNextMember and ILClassNextMemberByKind.

2007-09-10  Radek Polak  <psonek2@seznam.cz>

	* configure.in: Added check for clock_gettime.

	* support/time.c: Replaced code that is computing tick count using
	bootime and current time with apropriate system calls. Computing ticks
	from current time can't work good when date or time is changed.
	Original patch by Brubbel - thanks.

2007-08-22  Ivan de Jesus Deras Tabora  <ideras@gmail.com>

	* engine/verify_obj.c: Fixed IL_OP_BOX to be ECMA 335 compliant.  Now
	the box operation is valid on reference and values types.
	
	* engine/verify_ptr.c: Implemented IL_OP_STELEM and fixed IL_OP_LDELEM, this two
	operations are used with generics arrays.

2007-08-20  Ivan de Jesus Deras Tabora  <ideras@gmail.com>

	* image/meta_types.c: Bug fixed in function ILTypeToName that prevented
	methods signature to be converted to string.

	* image/meta_build.c: Change in Load_TypeDef function to register the class
	before its parent is loaded.  Read note in the function for further details.

2007-08-18  Ivan de Jesus Deras Tabora  <ideras@gmail.com>

	* engine/verify.c: Add the check for generic types in IsObjectRef. Add
	the local constraintType to handle the constrained prefix.

	* engine/verify_call.c: Add support for the constrained prefix.

	* engine/verify_obj.c: Add the function BoxPtr to box a valuetype
	referenced by a pointer somewhere on the stack.

	* engine/verify_ptr.c: Add support for the LDELEM opcode.

	* include/il_coder.h: Swap the definition of two macros to match the order
	in the coder struct.

2007-08-18  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm_stack.c: Fix the opcode COP_PREFIX_REPL_WORD_N on x86_64
	systems.

2007-08-17  Ivan de Jesus Deras Tabora  <ideras@gmail.com>

	* engine/cvm.h: Define the new cvm opcode COP_PREFIX_REPL_WORD_N to
	replace a word on the stack with the stacktop.

	* engine/cvm_ptr.c: Handle generic types in CanCastClass.

	* engine/cvm_stack.c: Implement the new cvm opcode COP_PREFIX_REPL_WORD_N.

	* engine/cvmc.c: Add the new coder functions PtrDeref and BoxPtr to the
	cvm coder structure.

	* engine/cvmc_obj.c: Add the function CVMCoder_BoxPtr to box a value
	referenced by a pointer somewhere on the stack and replace the reference
	with the boxed valuetype.

	* engine/cvmc_ptr.c: Add the function CVMCoder_PtrDeref to dereference a
	pointer somewhere on the stack.

	* engine/jitc.c: Handle creation of jitFunctions for instanciations of
	generic methods. Add the new coder functions PtrDeref and BoxPtr to the
	jit coder structure.

	* engine/jitc_call.c: Handle creation of jitFunctions for instanciations of
	generic methods.

	* engine/jitc_obj.c: Add the function JITCoder_BoxPtr to box a value
	referenced by a pointer somewhere on the stack and replace the reference
	with the boxed valuetype.

	* engine/jitc_ptr.c: Add the function JITCoder_PtrDeref to dereference a
	pointer somewhere on the stack.

	* engine/null_coder.c: Add the new coder functions PtrDeref and BoxPtr to
	the null coder structure and the stubs for the new functions.

	* include/il_coder.h:  Add the new coder functions PtrDeref and BoxPtr to
	the coder structure and the helper macros for the new functions.

2007-08-15  Klaus Treichel  <ktreichel@web.de>

	* image/program.h: Add the member refInfo to the ILTypeSpec. The
	refInfo references the generic type instanciated by the TypeSpec.

	* image/misc_token.c: Create a synthetic wrapper class around a
	TypeSpec in ILTypeSpecGetClass which is used as owner of members
	accessed in generic types. Use the refInfo in ILTypeSpecGetClassRef to
	store the referenced generic class.

2007-08-13  Klaus Treichel  <ktreichel@web.de>

	* dumpasm/dump_class.c: Add dumping custom attributes for generic
	parameters.

2007-08-03  Radek Polak  <psonek2@seznam.cz>

	* engine/jitc.c: Added function ILJitPrintMethod that can be used from gdb
	to print ILMethod at given pc. Works only when _IL_JIT_ENABLE_DEBUG is
	enabled.

2007-08-03  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Handle ref and out parameters.

2007-07-26  Klaus Treichel  <ktreichel@web.de>

	* ilasm/ilasm_scanner.l, ilasm/ilasm_build.c: Move ParseString from
	ilasm_scanner.l to ILAsmParseString.c in ilasm_build.c but remove the
	quotes still in ilasm_scanner.l.

	* ilasm/ilasm_build.h: Add the prototype for ILAsmParseString.

	* ilasm/ilasm_grammar.y: Call ILAsmParseString in the places (Identifiers
	and string constants) where control sequences have to be processed.

2007-07-21  Klaus Treichel  <ktreichel@web.de>

	* ilasm/ilasm_build.h, ilasm/ilasm_build.h: Add the functions for resolving
	generic parameters by name.

	* ilasm/ilasm_grammar.y: Add the D_STACKRESERVE keyword and add the
	resolution of generic parameters by name (which is undocumented in the ECMA
	specs but supported by MS ilasm). The resolution of method generic
	parameters by name in method parameters and returntypes is still TODO.

	* ilasm/ilasm_scanner.l: Add the keyword D_STACKRESERVE (.stackreserve is
	in the output of MS ildasm).

	* image/class.c: Import the parent class in to the image of the subclass
	instead of it's own image.

2007-07-20  Klaus Treichel  <ktreichel@web.de>

	* image/writer.c: Get the default metadata version string from the profile
	used.

	* profiles/compact, profiles/compact-fp, profiles/kernel,
	profiles/kernel-fp, profiles/tiny: Set the framework major version
	supported to 1. Add the default metadata version string v1.1.4322 .

	* profiles/full, profiles/full-tl: Add the default metadata version string
	v2.0.50727 .

	* samples/phone.il: Reformat the sample and add a .ctor.

2007-07-17  Klaus Treichel  <ktreichel@web.de>

	* ilalink/link_class.c, ilalink/link_method.c, ilasm/ilasm_build.c: Add the
	NULL token to the parameters for ILGenericParAddConstraint.

	* image/generic.c: Add the function ILConstraintCreate to make the api
	more consistent. Use this function in ILGenericParAddConstraint.
	Add the token to ILGenericParAddConstraint to fix an image load error
	when loading generic constraints.

	image/meta_build.c: Pass the token in the call to ILGenericParAddConstraint
	to fix the image load error.

	* include/il_program.h: Add the prototype for ILConstraintCreate. Add the
	token to the prototype for ILGenericParAddConstraint.

2007-07-15  Klaus Treichel  <ktreichel@web.de>

	* ilasm/ilasm_build.c: Handle TypeSpec parents for MemberRefs in
	ILAsmResolveMember. (Needed to access members of generic classes).

	* image/class.c: Add the function ILClassCreateWrapper for creating
	wrapper classes around TypeSpecs (Generic classes and Arrays) which can be
	used as MemberRef parents.

	* image/member.c: Add the function ILMemberRefCreate for creating
	MemberRefs.

	* image/misc_token.c: Make sure that there are no duplicate TypeSpecs in
	the image (as required by the ECMA specs).

	* image/program.h: Remove the declaration of ILMemberRef.

	* include/il_program.h: Add the declaration of ILMemberRef. Add the

	prototypes for ILClassCreateWrapper and ILMemberRefCreate. Add some helper
	macros for accessing members of MemberRefs.

2007-07-08  Klaus Treichel  <ktreichel@web.de>

	* ilasm/ilasm_grammar.y: Set the abstract attribute automatically for
	interface declarations. Change the reference for method generic parameters
	from '!' '!' to "!!".

	* ilasm/ilasm_scanner.l: Change the "type" keyword to IL only. Add the "`"
	to the allowed characters in IL identifiers for the generic arity.

	* image/class.c: Add the static metod CreateClassRef for creating a class
	reference in the current image for synthetic classes to avoid a TypeRef
	being created in the image. Call this function in ILClassImport for
	synthetic classes.

	* samples/phone.il: Add the ECMA phone sample for generics.

	* samples/Makefile.am: Add the phone sample to the built samples.

2007-07-08  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Fix invalid xml in show_types command.

2007-07-03  Klaus Treichel  <ktreichel@web.de>

	* ilasm/ilasm_build.c: Add the function ILAsmFindGenericParameter to
	fins an ILGenericPar by owner and zero based parameter number.

	* ilasm/ilasm_build.h: Add the prototype for ILAsmFindGenericParameter.

	* ilasm/ilasm_grammar.y: Add support for the .param type [n] directive
	to set the custom attribute scope to a generic parameter of the class or
	method.

	* ilasm/ilasm_scanner.l: Add the `type' keyword.

	* ilasm(ilasm_main.c: Fix segfaults if the il file was compiled with
	errors. Call the reset() function pior to closing the output file because
	reset() calls a function that writes to the file.

	* image/item.c: Add the function ILProgramItemToGenericConstraint.

	* image/meta_index.c: Add the generic parameter to the possible owners of
	a custom attribute.

	* include/il_program.h: Add the prototype for
	ILProgramtemToGenericConstraint.

2007-07-01  Klaus Treichel  <ktreichel@web.de>

	* ilasm/ilasm_build.c: Add the function ILAsmAddGenericPars to add
	generic parameters and their constraints to a Type or Method.
	Use this function in ILAsmBuildNewClass now.

	* ilasm/ilasm_build.h: Add the type ILAsmGenericTypeConstraint.
	Add the prototype for ILAsmAddGenericPars.

	* ilasm/ilasm_grammar.y: Sort the keywords alphabetically and add the
	new ECMA 4 keywords. Redo the handling of generic parameters and 
	generic parameter constraints ECMA compliant. Add the override
	directive for overriding generic virtual methods.
	
	* image/generic.c: Set the token in the generic constraint on creation
	so that it will be written to the metadata.

	* image/meta_writer.c: Add a function to sort the generic parameters.
	Set the major metadata version to 2 if the IL_VERSION_MAJOR is > 1.

2007-07-01  Ivan de Jesus Deras Tabora  <ideras@gmail.com>

	* csdoc/il2doc.c: Replace the code for printing the generic parameters
	with a call to ILAsmDumpGenericParams.

	* dumpasm/dump_class.c: Replace the code for printing the generic
	parameters with a call to ILAsmDumpGenericParams. Do some adjustments in
	the output.

	* dumpasm/dump_type.c:  Replace the code for printing the generic
	parameters with a call to ILAsmDumpGenericParams.

	* dumpasm/dump_utils.c: Add the method ILAsmDumpGenericParams for dumping
	generic parameters.

	* ilasm/ilasm_build.c, ilasm/ilasm_grammar.y: Replace the calls to
	ILGenericParSetConstraint with ILGenericParAddConstraint.

	* ilalink/link_class.c, ilalink/link_method.c: Fix the processing of
	generic constraints to allow processing of more than one constraint per
	generic parameter.

	* image/generic.c: Redo the generic type constraints to allow more than
	one type constraint per generic parameter.

	* image/meta_build.c: Make LoadForwardTypeDef public. Remove the 'Gyro'
	code.  Replace the calls to ILGenericParSetConstraint with
	ILGenericParAddConstraint.

	* image/meta_writer.c: Fix formatting of the GenericParameter.

	* image/program.h: Add the member firstConstraint to ILGenericParameter
	and nextConstraint to ILGenericConstraint for handling more than one
	constraint per parameter.

	* image/sig_parse.c: Use LoadForwardTypeDef to reslove types in the image
	that are used before they are loaded.

	* include/il_dumpasm.h: Add the prototype for ILAsmDumpGenericParams.

	* include/il_meta.h: Add the definitions for generic parameter attributes.

	* include/il_program.h: Fix the declarations for generic constraint
	handling.

2007-06-15  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Fix warning on x86_64.

2007-06-14  Klaus Treichel  <ktreichel@web.de>

	* engine/debugger.c: Fix build with cvm interpreter.

2007-06-14  Radek Polak  <psonek2@seznam.cz>

	* engine/jitc_locals.c: Added missing if(coder->markBreakpoints).

2007-06-14  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.h: Add definitions for user data table that allows us to
	attach various additional data to pointer. Shortened some variable names.

	* engine/debugger.c: Fixed socket recieving function. Reimplemented old
	functions for parsing arguments. Implemented user data table. Changed
	output for source files, members, types, libraries. They are now dumped
	and referenced with id's to save traffic on debugger connection. Reformat
	long lines.

2007-06-01  Klaus Treichel  <ktreichel@web.de>

	* cscc/common/cc_preproc.c, cscc/common/cc_preproc.h: Undo the changes
	in cc_preproc.c and make the bitfields in cc_preproc.h unsigned instead.

	* configure.in: Remove coremul/Makefile from the Makefiles to be created.

2007-06-01  Klaus Treichel  <ktreichel@web.de>

	* image/java_loader.c, image/member.c, image/meta_writer.c,
	image/pecoff_loader.c: Fix more signed bitfield assignments for gcc 4.2.0.

	* codegen/cg_gen.c, codegen/cg_misc.tc, codegen/cg_stmt.tc,
	codegen/jv_cast.tc, codegen/jv_misc.tc, codegen/jv_stmt.tc,
	cscc/cs_main.c, cscc/java_main.c, cscc/vb_main.c, cscc/csdoc.c,
	cscc/c/c_oper.tc, cscc/common/cc_errors.c, cscc/common/cc_main.c,
	cscc/common/cc_preproc.c, cscc/csharp/cs_cast.tc, cscc/csharp/cs_invoke.tc,
	cscc/csharp/cs_lookup.c, cscc/csharp/cs_lvalue.tc, cscc/csharp/cs_oper.tc,
	image/winres_reader.c, image/winres_writer.c: Fix more signed bitfield
	assignments for gcc 4.2.0.

2007-05-31  Klaus Treichel  <ktreichel@web.de>

	* engine/ilverify.c: Fix the verifier.

	* include/il_align.h: replace a cast fom unsingned to ILNativeUInt to fix
	some gcc 4.2.0 compiler warnings about casting a pointer to an integer of
	a smaller size.

	* image/meta_index.h: Fix setting some bitfields in the ILImage for the 
	token sizes in the blobs for gcc 4.2.0.

2007-05-30  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_lookup.c: Fix the ambiguous error if a type is resolved in
	more than one of the using namespace declarations.

2007-05-29  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_semvalue.h: Change the semantic value for a namespace so
	that it contains the resolved namespace scope instead of the fully
	qualified namespace name.

	* cscc/csharp/cs_lookup.c: Change FindTypeInNamespace to get the ILScope
	in which to look for the name instead of the fully qualified namespace.
	Fix the using lookup so that all parent scopes are searched for the using
	namespace too.

2007-05-28  Klaus Treichel  <ktreichel@web.de>

	* cscc/c/c_types.c, cscc/c/c_typeout.c: Fix reading non system attributes
	of an ILClass. We have to read the ILClass member directly because non
	system flags are masked out otherwise.

	* codegen/cg_scope.c: Add the functions ILScopeGetNamespaceName and
	ILScopeDataGetNamespaceName to get the fully qualified namespace name
	attached to a scope or subscope of the scope data item.
	Add attaching the namespace name to the scope in FindNamespaceScope for
	new created namespace scopes. Add an additional argument for
	FindNamespaceScope to specify if the namespace should be created if it
	isn't found. Don't create the namespace scope if searching for a namespace
	or or a member in a namespace.
	
	* codegen/cg_scope.c: Add the prototypes for ILScopeGetNamespaceName and
	ILScopeDataGetNamespaceName.

	* cscc/csharp/cs_lookup.c: Do the lookup for valid namespaces in
	FindTypeInNamespace instead of after looking in all enclosing namespaces
	only which is more ECMA compliant. Dont look for namespaces when resolving
	with using namespace declarations.
 
2007-05-26  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_scope.c: Change the cast in the assignment of data to *index
	from (unsignded int) to (unsigned long) to fix a compiler warning and to
	avoid information loss on archs where the size of void * is greater than
	the size of int.

2007-05-25  Klaus Treichel  <ktreichel@web.de>

	* support/cvt_float.c: Fix a problem with converting UInt64 values greater
	than IL_MAX_INT64 ti ILNativeFloat. Gcc generated code that returned always
	0 in this case.

2007-05-24  Klaus Treichel  <ktreichel@web.de>

	* codegen/cg_defs.h, codegen/cg_scope.h: Move the opaque declaration of
	ILScopeData from cg_scope.h to cg_defs.h.

	* codegen/cg_gen.h, codegen/cg_gen.c: Add the member globalScope to the
	generator type which replaces the global variable CCGlobalScope.

	* codegen/cg_nodes.tc: Add the abstract node type ILNode_alias to hold
	the UsingAlias (and ExternalAlias in the future).

	* codegen/cg_scope.c, codegen/cg_scope.h: Add the function
	ILScopeImportNamespace to check if a namespace occures in one of the
	import libraries and declare it in the scope then. Change
	ILScopeDeclareNamespace so that the namespace scope is returned.

	* cscc/csdoc.c, cscc/cs_main.c, cscc/java_main.c, cscc/vb_main.c: Replace
	CCGlobalScope with CCCodeGen.globalScope.

	* cscc/common/cc_main.c, cscc/common/cc_main.h: Remove the declaration of
	CCGlobalScope.

	* cscc/csharp/cs_defs.tc: Change the definition of ILNode_UsingAlias so
	that the ILNode_Alias is used. Add functions for managing using namespace
	and using alias declarations.

	* cscc/csharp/cs_grammar.y: Remove the default using namespace declaration
	for the System namespace. Change the localScope in the namespace node so
	that it points to the corresponding namespace scope in the global scope.
	The using scopes are no longer used now by the csharp compiler.

	* cscc/csharp/cs_lookup.c: Handle the aliases now when resolving a simple
	name. Use ILScopeImportNamespace instead of ILClassNamespaceIsValid now
	because the later one told that a namespace is invalid if there are no
	types declared in that namespace but subnamespaces exist.

	* cscc/csharp/cs_lvalue.tc: Remove the handling of aliases because they are
	handled in cs_lookup.c now.

	* cscc/csharp/cs_semantics.c: Declare a dummy function to semanalyze the
	new alias node and replace CCGlobalScope by CCCodeGen.globalScope.

	* cscc/vb/vb_grammar.y: Replace the CCGlobalScope by CCCodeGen.globalScope,
	remove the default import of the System namespace and adjust the alias
	declaration.

	* cscc/java/java_grammar.y, cscc/java/java_lookup.c,
	cscc/java/java_semantics.tc: Replace the CCGlobalScope by
	CCCodeGen.globalScope.

2007-05-17  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_string.c: Check the new string builder capacity prior to
	allocating the new StringBuilder to fix a not detected overflow when
	the real memory size is computed in IL_String_NewBuilder.

2007-05-10  Klaus Treichel  <ktreichel@web.de>

	* support/dynlib.c: Fix ILDynLibraryGetSymbol for FreeBSD. Resolving a 
	symbol semed to fail because a previous error was not cleared by calling
	dlerror prior to calling dlsym (Thanks to Steffen Reichelt for finding this
	issue and pointing out how to solve it).

2007-05-05  Klaus Treichel  <ktreichel@web.de>

	* support/intern.c, include/il_utils.h: Make the interned string a const
	char * because they must not be modified by the application.
	Add functions to concatenate four and five interned strings.

	* codegen/cg_gen.h, codegen/cg_decls.tc, codegen/cg_lvalue.tc,
	codegen/cg_nodes.tc, codegen/cg_stmt.tc, cscc/common/cc_errors.h,
	cscc/common/cc_errors.c, cscc/common/cc_main.c, cscc/common/cc_preproc.h,
	cscc/common/cc_preproc.c, cscc/c/c_declspec.h, cscc/c/c_defs.tc,
	cscc/c/c_function.h, cscc/c/c_function.c, cscc/c/c_grammar.y,
	cscc/c/c_scope.h, cscc/c/c_scope.c, cscc/c/c_stmt.tc, cscc/c/c_types.h,
	cscc/c/c_types.c, cscc/csharp/cs_attrs.c, cscc/csharp/cs_const.tc,
	cscc/csharp/cs_decls.tc, cscc/csharp/cs_gather.c, cscc/csharp/cs_grammar.y,
	cscc/csharp/cs_internal.h, cscc/csharp/cs_invoke.tc,
	cscc/csharp/cs_lookup.c, cscc/csharp/cs_lvalue.tc, cscc/csharp/cs_stmt.tc,
	cscc/java/java_decls.tc, cscc/java/java_defs.tc, cscc/java/java_gather.c,
	cscc/java/java_grammar.y, cscc/java/java_invoke.tc,
	cscc/java/java_invoke.tc, cscc/java/java_lookup.c, cscc/java/java_lvalue.tc,
	cscc/java/java_modifiers.c, cscc/java/java_stmt.tc, cscc/vb/vb_grammar.y,
	ilalink/linker.h, ilalink/link_create.c, ilalink/link_library.c,
	ilalink/link_method.c, ilasm/ilasm_build.h, ilasm/ilasm_build.c,
	ilasm/ilasm_data.h, ilasm/ilasm_data.c, ilasm/ilasm_output.h,
	ilasm/ilasm_output.c, ilasm/ilasm_main.c, ilasm/ilasm_grammar.y,
	cscc/csharp/cs_defs.tc, cscc/csharp/cs_valdoc.c: Fix the resulting compiler
	warnings by making the locals and args causing them const.

	* image/java_writer.c, include/il_writer.h: Fix some warnings in ilasm.

	* cscc/csdoc.c Fix a warning in csdoc.

2007-05-03  Klaus Treichel  <ktreichel@web.de>

	* include/il_utils.h, support/intern.c: Add the function
	ILInternStringConcat3 to concatenate three interned strings.

	* codegen/cg_decls.c, codegen/cg-lvalue.tc, cscc/csharp/cs_cast.c: Replace
	multiple concatenations by a call to the new function.

2007-04-24  Klaus Treichel  <ktreichel@web.de>

	* Makefile.am: remove the coremul dir if pnet is built without tools.

2007-04-15  Aleksey Demakov  <ademakov@gmail.com>

	* engine/cvm.c: add volatile definitions for gcc4 on arm.

2007-04-09  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Set method owner for currently debugged function
	in debugger helper class. Always increment local var index.

2007-04-09  Klaus Treichel  <ktreichel@web.de>

	* include/il_utils.h, support/intern.c: Change the signature of
	ILInternString from ILInternString(char *, int) to
	ILInternString(const char *, int).

2007-04-06  Klaus Treichel  <ktreichel@web.de>

	* libgc/configure.in: Add configure option --enable-munmap to enable
	returning unused memory to the os. This option enables the usage off mmap
	too and can't be used on platforms where mmap is not available.

2007-04-03  Radek Polak  <psonek2@seznam.cz>

	* engine/jitc.h: Removed unused define.

2007-04-03  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c, engine/engine.h, engine/jitc.c, engine/jitc.h,
	engine/jitc_locals.c: Implement watching method's parameters.
	Implement watching "this" in instance methods.

2007-03-24  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Fix local variable index.

2007-03-24  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Pass the threadimplementation used for pnet to configuring
	libgc. (Fix bug #19237)

2007-03-21  Radek Polak  <psonek2@seznam.cz>

	* codegen/cg_stmt.tc: Output quoted variable names so that we produce
	valid IL output on variable name named after one of IL keywords.

	* engine/debugger.c: Remove hack for variables starting with '_'.

2007-03-21  Radek Polak  <psonek2@seznam.cz>

	* codegen/cg_decls.tc, codegen/cg_gen.h: Flag to suppress creating extra
	scope for locals after method declaration.

	* codegen/cg_rbtree.c, codegen/cg_rbtree.h: Function for iterating a red
	black tree.

	* codegen/cg_scope.c, codegen/cg_scope.h: Function for iterating local
	variables in scope.

	* codegen/cg_stmt.tc: Output name and index for each local variable
	declared in scope. Output marks for scope beginning and scope end. Local
	variable name starts with '_' to workaround bug in ilasm grammar.

	* engine/debugger.c: Implemented local variables names. Do not show local
	variables outside current scope.

	* image/debug_reader.c: Return null if local variable is not in scope.

2007-03-18  Aleksey Demakov  <ademakov@gmail.com>

	* engine/cvm_config.h (IL_NO_REGISTERS_USED, IL_VMCASE_BARRIER): New
	configuration options.

	* engine/cvm.h, engine/cvm.c (COP_PREFIX_UNROLL_STACK)
	(COP_PREFIX_UNROLL_STACK_RETURN): New opcodes for unroller stack
	variables initialization.

	* engine/mklabel.sh: Add VMBARRIER() macro. Use VMBARRIER() in
	VMCASE() if IL_VMCASE_BARRIER is defined.

	* engine/unroll.c (LoadMachineState): Load stack and frame variables.
	(UnloadMachineState): Store stack and pc variables. Add pc address
	argument.

	* engine/md_x86.h: Support variable load and store configuration.

	* engine/cvmc.c (_ILCVMUnrollInitStack): New function.
	(_ILCVMGetPcOffset, _ILCVMSetPcOffset): New functions.
	(_ILCVMGetStackOffset, _ILCVMSetStackOffset): New functions.
	(_ILCVMGetFrameOffset, _ILCVMSetFrameOffset): New functions.
	* engine/unroll.c (_ILCVMUnrollGetNativeStack): New function.
	* engine/engine.h: New functions declarations.

	* engine/process.c (ILExecProcessCreate): add _ILCVMUnrollInitStack
	call.

2007-03-17  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_grammar.cs: Add the new 2.0 operators for Null Coalescing
	and qualified alias members. Add support for the default value function.
	Replace the token for the default label with the new one from the scanner.
	Add operator precedence to fix some shift/reduce conflicts in the grammar.

	* cscc/chsarp/cs_scanner.l: Add the new 2.0 operators for Null Coalescing
	and qualified aliases. Add a new token for the default label to work around
	a shift/reduce conflict in the grammar that caused that the default label
	was never recognized with the new default value instruction.

2007-03-16  Klaus Treichel  <ktreichel@web.de>

	* dumpasm/dump_const.c: Write FP values as hex values if there is no 
	FP support compiled in with the current profile.

	* engine/lib_misc.c: Fix build without FP support. Throw a
	NotImplementedException if a float operation is involved in the
	BitConverter.GetLittleEndianBytes functions.

	* ilasm/ilasm_grammar.y: Bail out on FP operations if there is no
	FP support compiled in with the current profile.

2007-03-12  Klaus Treichel  <ktreichel@web.de>

	* cscc/csharp/cs_grammar.y: Add support for static classes.

	* profiles/compact, profiles/compact-fp, profiles/full, profiles/full-tl,
	profiles/kernel, profiles/kernel-fp, profiles/tiny: Add IL_VERSION_MAJOR
	and IL_VERSION_MINOR for the framework version that should be supported.

2007-03-10  Radek Polak  <psonek2@seznam.cz>

	* pnet/engine/cvmc.c, pnet/engine/cvmc_setup.c,
	pnet/engine/debugger.c, pnet/engine/debugger.h,
	pnet/engine/dumpconfig.c, pnet/engine/engine.h, pnet/engine/ilrun.c,
	pnet/engine/jitc.c, pnet/engine/jitc_call.c,
	pnet/engine/jitc_locals.c, pnet/engine/jitc_setup.c,
	pnet/engine/process.c, pnet/engine/thread.c,
	pnet/include/il_debugger.h: Fix build for --disable-tools option. The
	debugger is also disabled in this case, because it is considered to be
	developer tool and because some functions cannot be implemented
	without tools.

2007-03-09  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: Fix problem when response from debugger was not
	correctly terminated with 0. Functions for dumping common errors. Use wait
	handles instead of suspending/resuming stopped threads. Execute commands in
	current exec thread instead of command loop - this enables us to correctly
	call managed methods from debugger. Implemented new commands add_watch,
	remove_watch, remove_all_watches, is_stopped_in_watched_assembly,
	show_watches for watching locals, static class members and their members.
	Implemented quit command, that aborts debugged process. Rename
	commandThread to ioThread which is more appropriate. Added public function
	ILDebuggerRequestTerminate() for the debugged process to notify debugger
	user that process is terminating and to stop IO thread. Debugger now
	counts with having DebuggerHelper class in corlib.

	* engine/debugger.h: Added function ILDebuggerIsThreadUnbreakable() which
	is used by the coder to determine if debug hook should be processed. If
	true is returned, then coder must avoid calling debug hook. Added event
	handle used to wakup stopped thread to execute command. Added even
	handle in debugger used for waiting until command is finnished.

	* engine/engine.h, engine/thread.c: Rename ILWatch to ILLocalWatch.

	* engine/ilrun.c: Notify debugger, that the process is terminating.

	* engine/jitc.c: Prevent calling debug hook for unbreakable thread. Rename
	ILWatch to ILLocalWatch.

	* engine/process.c: Destroy attached debugger.

	* include/il_debugger.h: Rename ILWatch to ILLocalWatch, prototype for
	ILDebuggerRequestTerminate().

2007-03-07  Klaus Treichel  <ktreichel@web.de>

	* engine/Makefile.am: Add jitc_gen.h to the jit coder includes so that the
	file is included in the distribution tarball.

	* NEWS: Add news entry for the addition of marshaling support.

2007-03-03  Klaus Treichel  <ktreichel@web.de>

	* NEWS, configure.in: update version for the "0.8.0" release.

	* configure.in: update version to the new "0.8.1" development version.

2007-02-27  Gopal V  <gopalv82@yahoo.com>

	* auto_gen.sh: Remove bash specific pushd/popd

	* .cvsignore, libgc/.cvsignore, libffi/.cvsignore: add
	config.guess, compile and autom4te.cache/ to the ignored files.

	* config.guess, config.sub, ltmain.sh, libffi/Makefile.in,
	libffi/aclocal.m4, libffi/configure, libffi/fficonfig.h.in,
	libffi/include/Makefile.in, libgc/Makefile.in, libgc/aclocal.m4,
	libgc/config.guess, libgc/config.sub, libgc/configure, libgc/ltmain.sh,
	libgc/doc/Makefile.in, libgc/include/Makefile.in: Remove these 
	maintainer generated files from CVS.

2007-02-24  Klaus Treichel  <ktreichel@web.de>

	* clrwrap/.cvsignore, csant/.cvsignore, cscc/.cvsignore,
	cscc/bf/.cvsignore, cscc/c/.cvsignore, cscc/cpp/.cvsignore,
	cscc/csharp/.cvsignore, cscc/java/.cvsignore, csdoc/.cvsignore,
	doc/.cvsignore, engine/.cvsignore, ilalink/.cvsignore, ilasm/.cvsignore,
	ildasm/.cvsignore, ildd/.cvsignore, ilfind/.cvsignore, ilgac/.cvsignore,
	ilheader/.cvsignore, ilnative/.cvsignore, ilranlib/.cvsignore,
	ilsize/.cvsignore, ilstrip/.cvsignore, resgen/.cvsignore,
	support/.cvsignore,tests/.cvsignore: Add .libs and other autogenerated
	files.

	* support/file.c: Increase buf by result in ILSysIOWrite to adjust the
	buffer pointer to the next start position so that the write continues at
	the right position in the case that the write was interrupted.

	* profiles/.cvsignore: Added with Makefile.in and Makefile.

2007-02-20  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Remove the .libs from the library search path for libjit
	because libtool will handle this (Broke build on Msys with jit enabled).

	* ilgac/ilgac.c: Fix build on systems where symlinks are not available. The
	assembly version is ILUInt16 and not ILUInt32.

2007-02-19  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Fix build on cygwin by moving the check for windows to the
	start in front of the check for programs so that the changed CC can be
	taken into account.

2007-02-18  Klaus Treichel  <ktreichel@web.de>

	* libffi/configure.in: Remove obsolete file.

	* doc/texinfo.tex: Remove autogenerated file.

2007-02-18  Robert Schwebel  <r.schwebel@pengutronix.de>

	* auto_gen.sh: Run libtoolize as first step and run auto_gen.sh in the
	subdirs libgc and libffi too.

	* configure.in: Replace outdated AC_PROG_RANLIB by AC_PROG_LIBTOOL.

	* libffi/configure.ac: Remove AM_ENABLE_MULTILIB.

	* libffi/Makefile.am: Remove the setting of AM_MAKEFLAGS because it breaks
	make distcheck. Fix make maintainer-clean by adding MAINTAINERCLEANFILES.

	* libgc/Makefile.am: Don't distribute libtool.m4. Fix make
	maintainer-clean by adding MAINTAINERCLEANFILES.

	* libgc/auto_gen.sh, libffi/auto_gen.sh: Added.

2007-02-18  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_array.c: clean up the source.

2007-02-17  Klaus Treichel  <ktreichel@web.de>

	* engine/cctormgr.c, engine/cctormgr.h: Handle running needed class
	initializers for methods compiled and locked by an other thread which
	has to be invoked by the current thread which holds the cctor lock.

	* engine/ilrun.c: Remove running the class initializer for the class
	containing main because this is handled by the engine now.

2007-02-15  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_delegate.c: Fix a deadlock introduced with my last cctor
	manager change. The functions to lookup the methods *MUST* not lock the
	metadata.

	* engine/jitc_pinvoke.c: remove the dumps from the on demand compiler
	function because this is handled now in the on demand driver function.

2007-02-13  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_delegate.c: remove the dumps from the on demand compiler
	functions because this is handled now in the on demand driver function.

2007-02-13  Robert Schwebel  <r.schwebel@pengutronix.de>

	* libtool.m4, libgc/libtool.m4: Remove auto generated files.

2007-02-12  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Export CC after disabling the use of the cygwin library
	so that this is used for configuring libffi and libgc too.

	* ChangeLog: Fix a typo. (Spotted by Robert Schwebel)

2007-02-11  Radek Polak  <psonek2@seznam.cz>

	* dumpasm/dump_class.c: Forgot to add parameter for dump offsets.

2007-02-11  Radek Polak  <psonek2@seznam.cz>

	* include/il_dumpasm.h, dumpasm/dump_method.c: Added option for
	printing IL offsets in dumped function.

	* engine/debugger.c: Dump offsets so that debugger can display
	current position in IL disassembly.

2007-02-11 Klaus Treichel  <ktreichel@web.de>

	* engine/cctormgr.c, engine/cctormgr.h: Add support for locking methods
	that require class initializers to be executed till the class initializers
	finished executing.

	* engine/convert.c: Use the new coder functions to handle the method locks
	for the cvm coder. Remove the execution of class initializers for the jit
	coder because that's handled in the coder itself.

	* engine/cvmc.c: Add the new arg to the cctors execution and the method to
	handle the method locks.

	* engine/cvmc_call.c: Remove the queueing of the class initializer on
	loading a function pointer on the stack.

	* engine/jitc.c: Use the new on-demand compilation feature in libjit to
	handle the method locks. Add the new arg to the cctors execution and the
	method to handle the method locks.

	* engine/jitc_call.c, engine/jitc_except.c, engine/jitc_inline.c,
	engine/jitc_obj.c, setup.c: Remove all conditionals if the cctor manager
	is enabled because the other option is removed.

	* engine/null_coder.c: Add the new arg to the cctors execution and the
	method to handle the method locks.

	* include/il_coder.h: Add the new arg to the cctors execution and the
	method to handle the method locks to the coder definition.

	* include/il_thread.h: Add function prototypes for semaphores.

	* support/Makefile.am: Add the new file semaphores.c to the sources.

	* support/pt_defs.c, support/pt_defs.h, support/no_defs.s,
	support/win32_defs.h: Add a semaphore primitive for increasing the
	semaphore count by more than 1.

	* support/semaphore.c: Added.

2007-02-09  Radek Polak  <psonek2@seznam.cz>

	* dumpasm/Makefile.am, ildasm/Makefile.am, ildasm/ildasm_main.c,
	include/il_dumpasm.h: Move all disassembler functions to dumpasm
	library so that debugger can use it.

	* ildasm/ildasm_attrs.c, ildasm/ildasm_class.c, ildasm/ildasm_data.c,
	ildasm/ildasm_global.c, ildasm/ildasm_java.c, ildasm/ildasm_method.c,
	ildasm/ildasm_utils.c: Moved to dumpasm directory under appropriate
	filenames.

	* dumpasm/dump_attrs.c, dumpasm/dump_class.c, dumpasm/dump_data.c,
	dumpasm/dump_global.c, dumpasm/dump_java.c, dumpasm/dump_method.c,
	dumpasm/dump_utils.c: New files comming from ildasm directory.

	* ildasm/ildasm_internal.h: Removed this file, the definitions are now
	in il_dumpasm.h.

	* engine/debugger.c: Make show_ildasm command work.

2007-02-09  Radek Polak  <psonek2@seznam.cz>

	* pnet/engine/debugger.c: Make show_dasm command work with jit coder.

2007-02-06  Klaus Treichel  <ktreichel@web.de>

	* libffi/configure.ac, libffi/configure: Remove the testsuite from the
	subdirs and fix the multilib support for pnet.

	* depcomp: Add needed file to build libffi.

2007-02-06  Robert Schwebel  <r.schwebel@pengutronix.de>

	* Makefile.am, auto_gen.sh, configure.in, codegen/Makefile.am,
	cscc/bf/Makefile.am, cscc/bf/bf_defs.tc, cscc/c/Makefile.am,
	cscc/c/c_defs.tc, cscc/common/Makefile.am, cscc/csharp/Makefile.am,
	cscc/csharp/cs_defs.tc, cscc/java/Makefile.am, cscc/java/java_defs.tc,
	csdoc/Makefile.am, doc/Makefile.am, doc/mkcvmdoc.sh, engine/Makefile.am,
	ilasm/Makefile.am, include/Makefile.am, resgen/Makefile.am,
	samples/Makefile.am, tests/Makefile.am: Fix build system by adding missing
	sources which have to be in the distribution and excluding built sources.
	Enable passing all arguments to configure to the configure of libffi and
	libgc. Pimping auto_gen.sh. Hack the out of tree build in the cscc subdirs
	which should be replaced by adding support to specify input- and/or output
	dir.

	* profiles/Makefile.am: Added

2007-02-02  Radek Polak  <psonek2@seznam.cz>

	* ilgac/ilgac.c: Fix problem with make uninstall in pnetlib on cygwin.
	Problem is that uninstall wants to delete files that do not exist and
	ilgac reports this as fatal error. Now we just silently ignore
	attempts to delete files which do not exist.

2007-01-23  Radek Polak  <psonek2@seznam.cz>

	* configure.in: Remove --with-debugger configure option.
	
	* profiles/compact, profiles/compact-fp, profiles/full,
	profiles/full-tl, profiles/kernel, profiles/kernel-fp, profiles/tiny:
	Define IL_CONFIG_DEBUGGER in profiles, where it can be useful.

	* engine/cvmc.c, engine/cvmc_setup.c, engine/debugger.c,
	engine/debugger.h, engine/dumpconfig.c, engine/engine.h,
	engine/ilrun.c, engine/jitc.c, engine/jitc_call.c,
	engine/jitc_locals.c, engine/jitc_setup.c, engine/thread.c,
	include/il_debugger.h: Rename IL_DEBUGGER conditional symbol to
	IL_CONFIG_DEBUGGER.

2007-01-21  Klaus Treichel  <ktreichel@web.de>

	* engine/cctormgr.c, engine/cctormgr.h: Add the SetCurrentMethod function.
	Use this information to optimize the queuing of classes to be initialized.

	* engine/cvmc.c, engine/cvmc_call.c, engine/cvmc_setup.c, engine/jitc.c,
	engine/jitc_call.c, engine/jitc_inline.c, engine/jitc_except.c,
	current method in the cctormanager. Move the cctor invokation from the
	engine/jitc_setup.c: Set the call of the method to the invokation of the
	method.

	* engine/jitc_array.c: Fix a deadlock if the object array for varargs or
	async delegate invokation is created and the class for the object array
	doesn't exist yet.

2007-01-19  Klaus Treichel  <ktreichel@web.de>

	* engine/cvmc_call.c: Check for running a cctor too if a function pointer
	is pushed on the stack.

	* engine/jitc_call.c: Check for running a cctor too if a function pointer
	is pushed on the stack.

	* engine/ilrun.c: Use the coder's cctor running function for running the
	cctor of the class containing the main function. This prevents this cctor
	being executed twice.

2007-01-16  Radek Polak  <psonek2@seznam.cz>

	* libgc/include/gc.h: Patch for compiling with uclibc which does not
	have execinfo.h.

2007-01-16  Klaus Treichel  <ktreichel@web.de>

	* include/il_coder.h: Add the functions runCCtors to execute the queued
	cctors during generating the current method and runCCtor to run one class
	initializerand the helper macros for the new slots.

	* image/program.h: Add the new system internal attribute
	IL_META_TYPEDEF_CCTOR_RUNNING to the type attributes to detect is a cctor
	is allready executing and to avoid to execute it recursively.

	* engine/cctormgr.c, engine/cctormgr.h: Added new manager functions for
	running the class initializers. This one makes sure that initializers are
	executed only once and methods relying on the execution of a class
	initializer in a different thread wait for it's completition.

	* engine/convert.c: Acquire the metadata lock during generation of a method
	with the jit coder. Call the new coder method RunCCtors after a method was
	successfully generated.

	* engine/cvmc.c: Add the cctor manager to the cvm coder class and add the
	new coder functions for running the cctors.

	* engine/cvmc_call.c: Replace the inline call to the cctor with queueing
	the execution of the cctor in the cctor manager.

	* engine/cvmc_obj.c: Replace the inline call to the cctor with queueing
	the execution of the cctor in the cctor manager.

	* engine/cvmc_setup.c: Remove the cctor once instruction for static
	constructors.

	* engine/engine.h: Add the decalaration of the new function _ILLookupClass.

	* engine/lib_helpers.c: Use une new coder function for running the cctors
	in _IL_RuntimeHelpers_RunClassConstructor.

	* engine/lookup.c: Add the function _ILLookupClass to find a class by name
	without laying out the class and use this function in LookupClass.

	* engine/null_coder.c: Add the stubs Coder_RunCCtors and Coder_RunCCtor for
	 the new coder functions.

	* engine/jitc.c, engine/jitc_array.c, engine/jitc_call.c,
	engine/jitc_delegate.c, engine/jitc_except.c, engine/jitc_obj.c,
	engine/jitc_pinvoke.c,, engine/jitc_setup.c: Add support for the cctor
	manager. Replace function calls acquiring metadata locks with the non
	locking ones. (ILSizeOfType -> _ILSizeOfTypeLocked, ...) to avoid
	deadlocks.

	* engine/Makefile.am: Add the new files cctormgr.c and cctormgr.h to the
	engine sources.

2006-01-07  Klaus Treichel  <ktreichel@web.de>

	* engine/heap.c: Add _ILEngineAllocTyped to allocate memory for objects
	with type information if typed allocation is enabled and use this function
	for object allocation.

	* engine/cvm_ptr.c: Allocate the memory for the class' static area with
	typed allocation if it is enabled.

	* engine/jitc_alloc.c: Handle the case for thin locks correctly where no
	type descriptor is available if thin locks are used.

2006-01-01  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.h: Add prototypes for the helper functions to create the
	type descriptors for a class.

	* engine/jitc.c: Add the forward declaration and libjit signature for the
	new function _ILJitAllocTyped.

	* engine/jitc_alloc.c: Add the new function _ILJitAllocTyped for typed
	allocation of objects and call this one in _ILJitAllocObjectGen if typed
	allocation is enabled.

	* engine/jitc_call.c: Use _ILJitAllocObjectGen instead of _ILJitAllocGen
	for boxing varargs.

	* engine/jitc_delegate.c: Use _ILJitAllocObjectGen instead of _ILJitAllocGen
	for boxing delegate arguments in asynchonous calls.

	* engine/jitc_obj.c: Use typed allocation to allocate the class' static
	area if typed allocation is enabled.
	Use _ILJitAllocObjectGen instead of _ILJitAllocGen to allocate the object
	in BoxSmaller.
	
	* engine/layout.c: Add the generation of type descriptors if typed
	allocation is enabled. Create the type descriptor for a class during layout
	if typed allocation is enabled.

2006-12-31  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Add the --enable-typedalloc option to use typed allocation
	with libgc. Add the -fno-omit-frame-pointer option to the CFLAGS if the
	jit is used.

	* engine/jitc_inline.c: Add the check of the noinline flag in the method's
	implementationattributes in the inlinable check.

2006-12-21  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_locals.c: Fix the build without the thread in the method
	signature. 

2006-12-16  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_defs.c: Add the structure SArrayHeader and use it in the
	header of simple zero based arrays. Add the macro ArrayLength to access
	the array length.

	* engine/cvm_conv.c, engine/cvm_ptr.c, engine/jitc_diag.c,
	engine/lib_array.c, engine/lib_crypt.c, engine/lib_delegate.c,
	engine/lib_diag.c, engine/lib_emit.c, engine/lib_encoding.c,
	engine/lib_helpers.c, engine/lib_marshal.c, engine/lib_misc.c,
	engine/lib_reflect.c, engine/lib_socket.c, engine/lib_string.c,
	engine/lib_stringbuilder.c, engine/lib_task.c, engine/lib_thread.c,
	engine/lib_type.c, engine/throw.c: Use the new macro ArrayLength where
	ever the length of a simple array is accessed.

	* engine/jitc_array.c: Use the new structure SArrayHeader to access the
	length field of a simple array.

2006-12-11  Klaus Treichel  <ktreichel@web.de>

	* engine/Makefile.am: Add jitc_inline.c to the jit coder sources.

	* engine/jitc.c: Add method implementation flags needed for inlining and
	include jitc_inline.c where needed.

	* engine/jitc_branch.c: Remove the #ifdef _IL_JIT_OPTIMIZE_NULLCHECK and
	#endif around the _ILJitValuesResetNullChecked in JITCoder_Label because
	the macro is defined now how it's needed for the configuration.

	* engine/jitc_call.c: Add support for inlining methods in
	JITCoder_CallMethod. Store the value to return in the inline context and
	jump to the end of the inlined function if returning from an inlined method
	in JITCoder_ReturnInsn.

	* engine/jitc_labels.c: Add support for labels in inlined methods.

	* engine/jitc_locals.c: Add support for locals and args in inlined methods.

	* engine/jitc_setup.c: Add support for inlined methods in the setup and
	finish functions of the jit coder.

	*engine/jitc_stack.c: Add support for inlining methods.

	*engine/jitc_inline.c: Added

2006-11-30  Klaus Treichel  <ktreichel@web.de>

	* Makefile.am: Set DIST_SUBDIRS to SUBDIRS to fix make distclean if pnet
	is built with jit.

2006-11-29  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add inlineing of System.Math methods.

	* engine/jitc_math.c: added.

	* engine/Makefile.am: Add jitc_math.c to the jitc sources.

2006-11-28  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.h: Add System.Array and System.Math to the classes handled
	internal.

	* engine/jitc.c: Change the prototype for inlineing internalcalls.

	* engine/jitc_array.c: Handle the changed prototype for inlineing and do
	more errorchecking.

	* engine/jitc_call.c: Handle the changed prototype for inlineing
	internalcalls.

2006-11-27  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_arith.c: Use the jit_insn_rem instead of jit_insn_rem_ieee
	for the rem opcodes.

2006-11-25  Klaus Treichel  <ktreichel@web.de>

	* support/socket.c: Fix build where fcntl is not available.

2006-11-23  Heiko Weiss <heiko.weiss@de.trumpf-laser.com>

	* support/socket.c: fixed that socket gets closed if app was killed.

2006-11-13  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm_inline.c, engine/lib_reflect.c: Change the
	NotSupportedException back to the NotImplementedException. (It's better to
	read the ECMA specs first ;).)

2006-11-12  Roman I Khimov  <roman@khimov.ru>

	* engine/cvm_inline.c, engine/verify_call.c: Fix build witd profiles that
	don't have floating point support. Replaced the
	System.NotImplementedException with a System.NotSupportedException.
	(Patch #5518, Klaus)

	* engine/cvm_dasm.c, engine/lib_math.c, engine/lib_reflect.c,
	support/cvt_float.c, support/read_float.c, support/rem_float.c,
	support/test_float.c, support/write_float.c: Remove functions not needed
	without FP support. (Patch #5536, Klaus)

2006-11-05  Klaus Treichel  <ktreichel@web.de>

	* libgc/configure, libgc/configure.in, libgc/darwin_stop_world.c,
	libgc/dyn_load.c, libgc/malloc.c, libgc/os_dep.c, libgc/pthread_support.c,
	libgc/version.h, libgc/doc/README, libgc/doc/README.changes,
	libgc/include/gc_config_macros.h, libgc/include/gc.h,
	libgc/include/private/gcconfig.h: Update to libgc 6.8.

2006-11-04  Kirill Kononenko  <Kirill.Kononenko@gmail.com>

	* engine/process.c: Don't destroy the current thread before invoking the
	finalizers if the jit is used because the thread might be needed to
	process async. delegates invoked during the finalization process.
	(Patch #5352, Klaus)

2006-11-03  Roman I Khimov  <roman@khimov.ru>

	* engine/lib_info.c: Fix build with profiles that don't support networking.
	(Patch #5516, Klaus)

2006-11-02  Roman I Khimov  <roman@khimov.ru>

	* support/time.c: Fix ILGetTimeZoneAdjust if tm_gmtoff is not present in
	the tm struct (Patch #5144, Klaus).

2006-10-26  Russell Stuart  <russell-savannah@stuart.id.au>

	* engine/lib_string.c: Make String.IndexOf("", ...) and
	String.LastIndexOf("", ...) always match, as they do in
	Microsoft's implementation.

	* cvm_except.c: save and restore exceptHeight in
	finally blocks.

2006-10-29  Radek Polak <psonek2@seznam.cz>

	* pnet/engine/lib_info.c: implement Environment.UserDomainName so that
	it returns machine name instead of null.

2006-10-29  Radek Polak <psonek2@seznam.cz>

	* engine/lib_array.c: fix Array.Clear() when called with empty array,
	index=0 and count=0.

2006-10-22  Klaus Treichel  <ktreichel@web.de>

	* engine/cvmc_call.c, engine/cvmc_stack.c: Handle the new engine type
	ILEngineType_CM (controlled-mutability managed pointer),

	* engine/verify.c: Initialize the new flag vor the readonly. prefix.

	* engine/verify_call.c, engine/verify_obj.c, engine/verify_ptr.c: Handle
	the new engine type ILEngineType_CM (controlled-mutability managed pointer),
	Implement the unbox.any and readonly. opcodes. Start with tha handling of
	the no. and constrained. opcodes.

	* engine/jitc_obj.c: Fix a bug in the ldfld opcode in the case that the
	object is a value type on the stack.

	* ilasm/ilasm_output.c: Remove the wrong ann.live and ann.ref opcodes
	which opcodes have other standard meanings now.

	* ilasm/ilasm_scanner.l: Remove the wrong ann.live and ann.ref opcodes
	and add the readonly., no. and constrained. opcodes.

	* image/opdef.c: Remove the wrong ann.live and ann.ref opcodes and add
	the readonly., no. and constrained. opcodes.

	* include/il_coder.h: Add the controlled-mutability managed pointer needed
	for the readonly prefix to the engine types.

	* include/il_opcodes.c: Remove the wrong ann.live and ann.ref opcodes which
	opcodes have other standard meanings now and add the readonly., no. and
	constrained. opcodes. Add the allowed flags for the no. prefix.

2006-10-20  Klaus Treichel  <ktreichel@web.de>

	* include/il_meta.h, include/il_program.h, image/marshal.c: Add
	ILPInvokeGetCharSet in image/marshal.c to get the characterset used to
	marshal a method or struct. On a Windows platform the automatic
	characterset depends on the current windows version (GetVersion()).
	For Windows 9x and older the ansi characterset is used and for all
	NT versions utf16.

	* engine/convert.c, engine/jitc.c: Add name mangling  for the method name
	on Windows platforms if ExactSpelling = false in the DllImportAttribute.
	This allows using unicode versions of functions on NT and the ansi versions
	on older systems.

2006-10-18  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_array.c: Change the allocation scheme for the arrays. Use
	atomic allocation for arrays which elements are either primitive types but
	no TypedRef, no reference types and value types which do not contain any
	reference types.

2006-10-17  Radek Polak <psonek2@seznam.cz>

	* engine/debugger.c: show_locals can handle all primitive types,
	strings and chars are dumped in utf8.

2006-10-17  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add signature for allocating simple arrays. Return and
	pass TypeRef values by reference in internal calls. Do some more
	reorganization of the source files.

	* engine/jitc_alloc.c: Move the prototypes for memory allocation from
	jitc.c to this file.

	* engine/jitc_array.c: Move the coder functions for array handling from
	jitc_ptr.c to this file. Move the function for creation of an Object *
	array from jitc_delegate.c to this file. Optimize creation of simple
	arrays. Adjust the calls to _ILJitThrowSystem to the new signature.

	* engine/jitc_call.c: Adjust the calls to _ILJitThrowSystem to the new
	signature. Fix the function for packing varargs. 

	* engine/jitc_delegate.c: Move the function to create an object array to
	jitc_array.c and adjust the name change in the calls. 

	* engine/jitc_except.c: Move the declaration of the internal exceptions
	from jitc.c to this file. Change _ILJitThrowInternal so that the first arg
	is a ILJitFunction instead of the ILJITCoder *.

	* engine/jitc_obj.c: Adjust the calls to _ILJitThrowSystem to the new
	signature. Implement the arglist opcode.

	* engine/jitc_pinvoke.c: Adjust the calls to _ILJitThrowSystem to the new
	signature.

	* engine/jitc_ptr.c: Move the coder functions for arrays to jitc_array.c.

	* engine/lib_misc.c: The System.RuntimeArgumentHandle is passed by value
	if the jit coder is used.
 
2006-10-15  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c, engine/jitc_call.c, engine/verify_call.c,
	include/il_coder.h: Add the call signature to the ILCoderMethodInfo to
	create the libjit call signature for the indirect call (calli opcode).
	Handle call signature in _ILJitCreateMethodSignature. Implement the
	calli opcode.

	* engine/jitc_arith.c: Preserve the flags of the pointer value in
	pointer operations if one and only one pointer is involved.

	* engine/jitc_conv.c: Preserve the flags of the original value after the
	conversion is done.

	* engine/jitc_var.c: Add stats info for the address_of opcodes.

2006-10-13  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_obj.c, engine/jitc_ptr.c: Handle the pointer relative store
	of value types correctly which are subclasses of the type to store.

	* engine/jitc_stack.c: Add macros to handle memcpy, memmove and memset.

2006-10-13  Gopal V  <gopalv82@yahoo.com>

	* engine/verify_ptr.c: Allow floats/doubles to be stored using stobj.

2006-10-12  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Move _ILJitValueConvertExplicit below
	_ILJitValueConvertImplicit. Optimize both functions to
	minimize the steps needed for the conversion. Extend
	_ILJitCreateMethodSignature so that varargs are handled correctly.
	-> Add an additional void * arg for internal methods and set the
	jit_abi to vararg for pinvokes.

	* engine/jitc_arith.c: Fix the shift right opcodes so that values
	on the stack < Int32 are handled correctly.

	* engine/jitc_call.c: Add creation of the call signature. Inplicitely
	convert the args to the type in the signature.

	* engine/jitc_const.c: Replace jit_type_void_ptr by _IL_JIT_TYPE_VPTR
	for the LDNULL opcode.

	* engine/jitc_ptr.c: Return the array length as int instead of unsigned
	int.

	* engine/jitc_stack.c: Set all duplicates of a value null checked if the
	value is checked for null. Check if references to a local/arg is passed
	in a method call and replace this local on the stack with duplicates.
	Fix two small bugs when clearing flags.

2006-10-10  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c, engine/jitc_arith.c, engine/jitc_array.c,
	engine/jitc_branch.c, engine/jitc_branch.c, engine/jitc_call.c,
	engine/jitc_const.c, engine/jitc_conv.c, engine/jitc_except.c,
	engine/jitc_labels.c, engine/jitc_locals.c, engine/jitc_obj.c,
	engine/jitc_ptr.c, engine/jitc_stack.c, engine/jitc_var.c: Complete rework
	of the evaluation stack management. Without enabling
	_IL_JIT_OPTIMIZE_LOCALS in jitc.c it behaves similar to the old one.
	With _IL_JIT_OPTIMIZE_LOCALS enabled it allows a lot more optimizations.

2006-10-05  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c, engine/jitc_gen.h, engine/jitc_labels.c,
	engine/jitc_locals.c, engine/jitc_stack.c: Start with some code
	reorganization.

	* engine/jitc_except.c: Add return after throwing an OutOfMemoryException
	in _ILJitThrowSystem. Without this return an other erroneous call to
	ILRuntimeExceptionThrowClass was emitted.

	* engine/jitc_ptr.c: Check the array length instead of the array pointer
	in JITCoder_ArrayAccess.

2006-10-04  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c, engine/jitc.h, engine/jitc_call.c: Add support for
	function inlining. Enable inlining of Get, Set and Address methods of
	complex arrays (multidimensional or not zero based).

	* engine/jitc_array.c: Added

	* engine/Makefile.am: Add jitc_array.c to the jit coder sources.

2006-10-01  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Implement _ILDumpMethodProfile and add the signature for
	ILInterlockedIncrement.

	* engine/jitc_call.c, engine/jitc_setup.c: Emit the code for method
	profiling on entry of a function or inlined calling of internal functions
	and pinvokes.

	* engine/jitc_profile.c: Added for profiling functions.

	* engine/Makefile.am: Add jitc_profile.c to jit coder sources.

2006-09-25  Kirill Kononenko  <Kirill.Kononenko@gmail.com>

	* engine/jitc_pinvoke.c: Add missing jump target for the case that the
	array to be marshalled is null.

2006-09-24  Kirill Kononenko  <Kirill.Kononenko@gmail.com>

	* engine/jitc_pinvoke.c, engine/jitc.c:
	Improve multicast delegates handling.
	- Handle delegates and multicast delegates differently, that is,
	with a direct call to the delegate method or with a use of
	__ILJitDelegateInvokeCodeGen respectivaly.
	- Improve marshaling to/from Ansi/UTF8/UTF16 strings using the pinvoke
	record and the ILPInvokeGetMarshalType function.
	- Allow extended marshaling of simple arrays for complex types and
	strings if defined USE_BYREF_MARSHALING (default is set to 0).
	- Implement handling of strings, which are embedded in structures or
	simple arrays (needed for gtk#/sample/testdnd.exe).
	- Improve recursive marshaling of arrays and structures by handling the
	IL_META_MARSHAL_DIRECT flag and the NeedMarshalValue methods.
	- Introduce handling of the IL_META_MARSHAL_CUSTOM flag with two new
	MarshalCustomToObject and MarshalObjectToCustom methods which are used
	for objects that support custom marshaling.
	- Support marshaling for the case when the methods are compiled with
	IL_JIT_THREAD_IN_SIGNATURE undefined.

	* engine/jitc_pinvoke.c, engine/jitc_call.c: Inline marshaling
	code, which embed a call to the external native method directly in
	the body of the build function - if undefined _IL_JIT_ENABLE_DEBUG (if
	it is defined we call a stub method).

	* engine/jitc_pinvoke.c, engine/jitc.c, engine/jitc.h,
	engine/lib_marshal.c: Changed the ILJitDelegateGetClosure signature.
	Removed the thread from the first input argument in this method.
	The current thread is handled in the delegate code with
	_ILJitFunctionGetThread.

2006-09-17  Radek Polak  <psonek2@seznam.cz>

	* engine/engine.h: add ILWatch struct for keeping information about
	local variable. Thread has now watchStack that contains watches for
	local variables. The watchStack is handled similar way to frameStack.

	* engine/thread.c: implement allocation and freeing of watches.

	* engine/jitc.h: define values used in data1 when marking breakpoints.

	* engine/jitc_call.c: mark method leave before return from function.

	* engine/jitc_locals.c: make every local variable addresable and
	volatile and mark breakpoint with variable's offset.

	* engine/jitc_setup.c: move static constructor once-call-check at the
	beginig before params and locals are created. Mark method enter
	breakpoint.

	* engine/jitc.c: handle method enter, method leave and offsets for
	local variables in debug hook.

	* engine/debugger.c: show_locals command can now display local
	variables with jit coder. Works only for strings and integers.

	* engine/ilrun.c: swap -g and -G debug options. This is more consistent
	with cscc and it is more comfortable for user.

2006-09-16  Klaus Treichel  <ktreichel@web.de>

	* engine/call.c: Move the currentException to the thrownException after a
	call to a jitted function so that the exception is propagated across native
	calls.

	* engine/jitc.c, engine/jitc_except.c: Move the thrownException in the
	thread to the currentException if an exception is thrown. The
	currentException is used only to prevent a collection of the exception
	object by the gc.

	* engine/lib_gc.c: Readd the ILGCFreePersistent of the handletable.

2006-09-04  Klaus treichel  <ktreichel@web.de>

	* support/pt_defs.c: Add a default mutex attribute to make sure that fast
	(deadlocking) mutexes are used. Initialize this mutex attribute during
	initialization of threading.

	* support/pt_defs.h: Add an extern declaration of the new mutex attribute
	and replace the 0 mutex attribute in pthread_mutex_init with a reference
	to the new created attribute.

	* engine/lib_gc.c: Add a separate mutex in the gc handletable to
	syncronize the access to this table instead of using the process->lock
	mutex (which caused deadlocks if finalizers are invoked).
	We use the process->lock only for the creation of the table and disable
	/enable finalizers at this point.

2006-09-04  Radek Polak	<psonek2@seznam.cz>

	* engine/debugger.c: reformat with tabs set to 4, implemented
	show_stack_trace command for JIT engine, next command uses stack trace
	height, next command leaves functions correctly, removed unused
	debugger functions.

	* engine/debugger.h: reformat with tabs set to 4, remember stack trace
	height and jit stack trace in debugger thread info.

	* include/il_debugger.h: remove unused code.

	* engine/jitc.h, engine/jitc.c: function for getting jit context.

2006-08-31  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_thread.c: Set the exception handler which converts builtin
	libjit exceptions into clr exceptions.

2006-08-30  Radek Polak  <psonek2@seznam.cz>

	* engine/cvmc_setup.c, engine/jitc_setup: Set coder->markBreakpoints
	flag.

	* engine/cvmc.c: Mark breakpoints only when needed.
	
	* engine/jitc.c, engine/jitc.h, engine/verify.c: Moved marking
	breakpints to coder's MarkBytecode() function.

	* engine/lib_diag.c: Reformated function (tabs instead of spaces).

	* engine/debugger.c: Fix warnings, implement show_stack_trace command
	for CVM engine, fix inserting breakpoints in ctors, correctly exit
	debugged application when connection to debugger breaks.

2006-08-25  Klaus Treichel  <ktreichel@web.de>

	* support/spawn.c: Define _WAIT_CHILD as WAIT_CHILD on windows if
	_WAIT_CHILD is not defined. This fixes the build on cygwin.

2006-08-25  Yan Burman  <yan_952@hotmail.com>

	* support/socket.c: Use IPPROTO_TCP and IPPROTO_UDP instead of the 
	SOL_* macros. (patch #5323, Gopal)

	* cscc/common/cc_main.c: get exit codes from _cwait. (patch #5326, Gopal)

2006-08-24  Klaus treichel  <ktreichel@web.de>

	* engine/debugger.c: Wrap the #include <unistd.h> in #ifdef HAVE_UNISTD_H
	... #endif to fix a build problem on mingw.

2006-08-22  Yan Burman  <yan_952@hotmail.com>

	* support/spawn.c, cscc/common/cc_main.c: Uses windows "posix" stuff
	to spawn new process after redirecting its output through a pipe.
	(patch #5321, Gopal)

2006-08-20  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.h: expose IsMethodImageWatched() so that coder
	can insert breakpoints only in watched assemblies.

	* engine/debugger.c: return IL_HOOK_ABORT when connection with frontend
	breaks.

	* engine/engine.h: add variable for current IL offset in exec thread.
	This variable is updated when debugger breaks.

	* engine/jitc.c: implement jit debugging hook function.

	* engine/jitc.h: expose function for marking breakpoits.

	* engine/lib_diag.c: properly handle debugger break for jit engine.

	* engine/verify.c: mark breakpoints before every IL instruction when
	debugger is attached (applies only for jit engine).

2006-08-14  Marcus Urban  <murban@warpspeed1.net>

	* csant/csant_cscc.c: Change csant to emit csc-style flags in several
	cases for mcs. (patch #4720, Klaus)

2006-08-01  Gopal V  <gopalv82@yahoo.com>

	* engine/debugger.c: Fix debugger build on amd64 (IL_BEST_ALIGNMENT)
	for cvm.h.

2006-08-01  Klaus Treichel  <ktreichel@web.de>

	* engine/convert.c: Remove the no longer needed macros for the metadata
	lock and unlock. Disable finalizers during build of a function to prevent
	finalizers trying to build a finalizer function. Fix a compiler warning.

2006-07-28  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add constants for the System.MissingMethodException,
	System.DllNotFoundException and System.EntrypointNotFoundException thrown
	by the engine. Add support for errorhandling in pinvokes if the shared
	library could not be found or the entrypoint could not be located.

	* engine/jitc_alloc.c: Allocate objects containing no references to managed
	objects with ILGCAllocExplicitelyTyped so that the monitor for the object
	is not prematurely collected.

	* engine/jitc_call.c: Throw a System.MissingMethodException if the vtable
	pointer returned for a virtual or interface call is null.

	* engine/jitc_except.c: Add the System.MissingMethodException,
	System.DllNotFoundException and System.EntrypointNotFoundException in
	_ILJitThrowSystem.

	* engine/jitc_pinvoke.c: Throw the right exception if a shared library or
	the entrypoint for a pinvoke could not be found.

2006-07-28  Kaushik Srenevasan  <ksrenev@gmail.com>

	* cscc/csharp/cs_decls.tc: Disallow explicit parameterless constructors
	for structs. (Patch #4800). Disallow initializers for non static members
	in structs. (Patch #4812)

2006-07-22  Kirill Kononenko  <Kirill.Kononenko@gmail.com>

	* engine/jitc.c: Add additional signatures needed for pinvokes.

	* engine/jitc.h: Add prototype for ILJitDelegateGetClosure.

	* engine/jitc_pinvoke.c: Implement marshalling for pinvokes.

	* engine/lib_marshal.c: Call ILJitDelegateGetClosure if the engine is
	built with the just in time compiler.

2006-07-21  Radek Polak  <psonek2@seznam.cz>

	* engine/debugger.c: New command is_stopped that is used to check if
	execution is currently stopped.

2006-07-18  Heiko Weiss  <heiko.weiss@de.trumpf-laser.com>

	* engine/lib_gc.c: fixed a memory leak

2006-07-17  Klaus Treichel  <ktreichel@web.de>

	* image/class.c: Fix a segfault in InheritsFromValueType if the class name
	is ValueType and no namespaceinformation is present (is a nested type).

2006-07-15  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_object.c: Add a check if _this is null in _IL_Object_GetType
	and throw a NullReferenceException in this case because this might be Null
	for normal calls (non virtual and interface calls).

2006-07-13  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_delegate.c: Fix Delegate.Invoke if the current thread is
	not included in the method's signature.

2006-07-13  Radek Polak  <psonek2@seznam.cz>

	* engine/lib_task.c: Fix working dir on cygwin when starting process.
	cygwin_conv_to_win32_path() function is used for that.

2006-07-11  Radek Polak  <psonek2@seznam.cz>

	* include/il_debugger.h: Added. Contains public debugger definitions.

	* engine/debugger.h: Added. Contains private debugger definitions.

	* engine/debugger.c: Added. IL debugger implementation.

	* configure.in: Added option --with-debugger.

	* engine/Makefile.am: Compile debugger files.

	* engine/dumpconfig.c: Print if debugger support is enabled.

	* engine/engine.h: Add reference to debugger from exec process.

	* engine/ilrun.c: Add and implement debugger options.

2006-07-06  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_delegate.c: Fix a build error if the engine is built without
	the ILExecThread in the method signature. Optimize packing of the delegate
	args for async. execution.

2006-07-03  Aleksey Demakov  <ademakov@gmail.com>

	* engine/jitc.c (_ILJitTypeToStackType): remove the conversion of
	float32 and float64 types to nfloat.

	* engine/jitc_const.c (JITCoder_Constant): create constants of the
	float32 and float64 types as appropriate instead of nfloat.

2006-06-28  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_call.c: Remove the check of the this pointer for non virtual
	method calls (JITCoder_CheckCallNull) because it degrades the overall
	performance too much. The check has to be performed in the methods.

2006-06-27  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_obj.c: Replace jit_insn_add with jit_insn_add_relative when
	loading a field address.

	* engine/jitc_ptr.c: Replace jit_insn_add with jit_insn_add_relative to
	get the pointer to the array data.

2006-06-26  Kirill Kononenko  <Kirill.Kononenko@gmail.com>

	* engine/jitc_branch.c: Fixed a bug in the JIT_OP_BLE_UN condition code
	in OutputCompare. The bug was causing TestConvertToUInt64 to fail in
	make check.

2006-06-26  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_diag.c: Fix _ILJitGetCallingMethod.
	
2006-06-25  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add the handling of the managed safepoint flags. Add a
	function to rethrow an existing exception. Add Functions to emit the code
	to be executed before and after a native call is made.

	* engine/jitc_call.c: Call the new functions in jitc.c before and after
	the native calls for inlined calls.

	* engine/jitc_except.c: Add support to handle the ThreadAbortException and
	propagating it (rethrow the exception automatically after it was handled in
	a catch block). Add support for the rethrow instruction.
	
	* engine/thread.c: Move the code to register the libjit exceptionhandler
	from ILThreadRegisterForManagedExecution to _ILThreadSetExecContext so
	that the handler is set correctly for finalizers too.

2006-06-18  Kirill Kononenko  <Kirill.Kononenko@gmail.com>

	* engine/jitc.c: Add signatures for ILStringToUTF8 and ILStringCreate.
	Move _ILJitCompilePinvoke to jitc_pinvoke.c.

	* engine/jitc_pinvoke.c: Added.

	* engine/Makefile.am: Add jitc_pinvoke.c to the jit coder sources.

2006-06-17  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.c: Move the globalTraceMutex to system.c. Wrap the rest in
	an #ifdef IL_USE_CVM.

	* engine/cvm_config.h: Add include of il_config.h and wrap the rest in
	an #ifdef IL_USE_CVM.

	* engine/cvm_except.c: Move the functions in the global definitions to
	system.c.

	* engine/cvm_ptr.c: Move the function _ILSystemObjectSetField to system.c.

	* engine/cvmc.c: Wrap the contents in an #ifdef IL_USE_CVM.

	* engine/dumpconfig.c: Add support for dumping the jit configuration.

	* engine/engine.h: Add the prototype of _ILSetExceptionStackTrace.

	* engine/jitc.c: Add stub of _ILDumpMethodProfile.

	* engine/lib_delegate.c: Replace the delegate methods Invoke, BeginInvoke
	and EndInvoke with stubbs when built with the jit coder.

	* engine/Makefile.am: Add system.c to the libILEngine sources.

	* engine/system.c: Added with globals and functions that were in the cvm
	sources and are used globally.

	* engine/unroll.c: Wrap the contents in an #ifdef IL_USE_CVM.

2006-06-16  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_helpers.c: Fix RunClassConstructor. The type is passed by
	value with the jit coder instead of by reference.

2006-06-11  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add System.IntPtr and System.UIntPtr to the special
	classes because there are fields with these types which do not have
	the internal native element types.

2006-06-10  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Fix problem with not existent pinvokes.

	* engine/jitc_call.c: Add more inlined math functions. Implement the
	CheckCallNull which fixes the failure of the String.Equals runtime test.

2006-06-05  Klaus Treichel  <ktreichel@web.de>

	* engine/call.c: Fix problems with type casting.

	* engine/lib_reflect.c: Fix Bug in Invoke with return values.

2006-06-04  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Move the code generation to handle an exception thrown
	in an internalcall to a separate function.

	* engine/jitc_call.c: Handle the thrown exceptions after inlined
	internalcalls.

	* engine/jitc_delegate.c: Fix a dumb bug in _ILJitDelegateInvokeCodeGen.

	* engine/jitc_obj.c: Add support for RVA static fields and pinvoke static
	fields. Replace jit_insn_add_relative with jit_insn_add.

	* engine/jitc_ptr.c: Replace jit_insn_add_relative with jit_insn_add.

2006-06-03  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Use the on demand compilers for DelegateBeginInvoke and
	DelegateEndInvoke for the corresponding delegate methods. Use the
	ILJitFunction instead of the ILJITCoder in calls to the alloc functions.

	* engine/jitc_alloc.c:  Use the ILJitFunction instead of the ILJITCoder
	in calls to the alloc functions. Call AllocAtomic again because the error
	seemed to be caused by multiple executions of the cctors.

	* engine/jitc_delegate.c: Add the support for the Begin- and EndInvoke
	methods.

	* engine/jitc_call.c, engine/jitc_bj.c: Pass the jit function instead of
	the coder to the alloc functions.

2006-05-28  Aleksey Demakov  <ademakov@gmail.com>

	* engine/jitc_setup.c (JITCoder_Setup): move static ctor once check
	block to the function start so it will be exceuted before any other
	blocks that also could be moved to the start. This prevents the
	corruption of setjmp stack in static constructors with try/catch.

2006-05-27  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Mobe the inclusion of jitc_alloc.c just before
	the one of jitc_delegate.c because we'll need the allocation routines
	there.

	* engine/jitc_alloc.c: As a temporary workaround i'm ding a ILGCAlloc
	instead of an ILGCAllocAtomic now.

	* engine/jitc_except.c: Fix a valgrind warning.

2006-05-25  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add signatures for inlined internalcalls. Add output of
	debugging infos in the on demand compiler for pinvokes. Clean up the
	source.

	* engine/jitc_call.c: Add the inlined calls needed for the synchronized
	classes.

	* engine/jitc_delegate.c: Add the output of debugging infos in the on
	demand compilers.
	
2006-05-18  Klaus Treichel  <ktreichel@web.de>

	* engine/Makefile.am: Add jitc_delegate.c to the jit coder sources.

	* engine/layout.c: Replace the direct access of method->userdata with a
	function call of ILJitFunctionFromILMethod.

	* engine/jitc.h: Add the declaration of the delegate types and change the
	ILJitTypes.

	* engine/jitc.c: Redo lots of the the jit function creation.

	* engine/jitc_call.c: Changed calls to _ILJitCreateMethodSignature and
	replace the direct access of method->userdata with a call of
	ILJitFunctionFromILMethod.

	* engine/jitc_setup.c: Replace the direct access of method->userdata with a
	function call of ILJitFunctionFromILMethod.

	* engine/jitc_delegate.c: Added.

2006-05-01  Klaus Treichel  <ktreichel@web.de>

	* engine/call.c: Add support for the thread not included in the signature.

	* engine/jitc.c, engine/jitc.h, engine/jitc_alloc.c, engine/jitc_arith.c,
	engine/jitc_call.c, engine/jitc_except.c, engine/jitc_locals.c,
	engine/jitc_obj.c, engine/jitc_ptr.c, engine/jitc_setup.c: Add support for
	the thread not included in the signature. Remove as many thread accesses as
	possible. Add more exception support. Fix Bugs and improve performance.

	* engine/lib_defs.h: Add declaration of the ECMA specific part of the
	System.Exception class.

2006-04-17  Klaus Treichel  <ktreichel@web.de>

	* engine/Makefile.am: Add jitc_alloc.c to jitc.o sources.

	* engine/jitc_alloc.c: Add object allocation functions.

	* engine/jitc.c, engine/jitc_call.c, engine/jitc_conv.c,
	engine/jitc_labels.c, engine/jitc_locals.c, engine/jitc_obj.c,
	engine/jitc_ptr.c, engine/jitc_setup.c, engine/jitc_var.c: Replace the
	calls of EngineAlloc with calls to the new allocation functions.
	Add initialization of locals. Redo the value conversion.

2006-04-10  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_ptr.c: Do some optimizations in the array index verification
	(converting the array length and index to unsigned saves one comparision
	and jump). Inline the internal call in NewArray.

2006-04-09  Klaus Treichel  <ktreichel@weblde>

	* engine/jitc.c, engine/jitc_conv.c: Fix bugs in type conversion.

2006-03-25  Klaus Treichel  <ktreichel@web.de>

	* enjine/jitc_obj.c: Fix a bug in ILJITCoder_CastClass that caused a
	segfault in IsInst when the object to cast was null.

	* engine/jitc.c, engine/jitc_call.c: Call internal fuctions now directly
	for normal calls and ctors.
	
2006-03-19  Rainer Größlinger  <rainer.groesslinger@gmx.net>

	* libgc/Makefile.am, libgc/Makefile.direct, libgc/Makefile.in,
	libgc/allchblk.c, libgc/alloc.c, libgc/configure, libgc/configure.in,
	libgc/darwin_stop_world.c, libgc/dbg_mlc.c, libgc/dyn_load.c,
	libgc/headers.c, libgc/malloc.c, libgc/mark.c, libgc/misc.c,
	libgc/mkinstalldirs, libgc/os_dep.c, libgc/powerpc_darwin_mach_dep.s,
	libgc/pthread_stop_world.c, libgc/pthread_support.c, libgc/threadlibs.c,
	libgc/version.h, libgc/doc/README, libgc/doc/README.changes,
	libgc/doc/gcinterface.html, libgc/include/gc.h,
	libgc/include/gc_config_macros.h, libgc/include/gc_cpp.h,
	libgc/include/gc_pthread_redirects.h, libgc/include/leak_detector.h,
	libgc/include/private/gc_locks.h, libgc/include/private/gc_pmark.h,
	libgc/include/private/gc_priv.h, libgc/include/private/gcconfig.h: Update
	to libgc 6.7. (Klaus)

2006-03-19  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add signature for _ILJitGetExceptionStackTrace. Pass
	structs by ref in _ILJitCompileInternal. Include the new files jitc_diag.c
	and jitc_labels.c. Move _ILJitGetCallingMethod to jitc_diag.c.

	* engine/jitc.h: Add the prototypes for the new functions in jitc_diag.c
	and include lib_defs.h.

	* engine/jitc_branch.c: Move the stack management functions to
	jitc_labels.c and rename GetLabel to _ILJitLabelGet and FindLabel to
	_ILJitLabelFind.

	* engine/jitc_except.c: Add support for filling the stack trace in the
	exception object and rename GetLabel to _ILJitLabelGet and FindLabel to
	_ILJitLabelFind. Fix a bug in the exception catcher.
 
	* engine/jitc_ptr.c: Fix getting the base of the array data.

	* engine/jitc_setup.c: Dump the functions only when argument -Z was passed
	to ilrun. Add a label for offset 0 at the start of the function to fix an
	exception bug.

	* engine/lib_diag.c: Add some stack support for the jit coder.

	* engine/Makefile.am: Add jitc_diag.c and jitc_labels.c as jitc sources.

	* engine/jitc_diag.c, engine/jitc_labels.c: Added.

2006-03-17  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_gc.c : fixed weak references

2006-03-12  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add the exceptionhandler and some exception stuff.

	* engine/jitc.h: Add the prototype for the exceptionhandler.

	* engine/jitc_branch.c, engine/jitc_except.c: Add some exception stuff.

	* engine/thread.c: Register the exceptionhandler for the thread when the
	thread is registered for managed execution.

	Thanks krokas for the help.

2006-03-11  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Add new configure switch --with-cvm which defines
	IL_USE_CVM. The cvm coder is used by default. Disable libffi when using the
	jit coder.

2006-03-09  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Allocate one more arg for the pointer to the return struct
	in _ILJitCompileInternal.

2006-03-08  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add the new locals management and include jitc_locals.c.
	Fix a problem in ILJitCompileInternal when a struct is returned.

	* engine/jitc_branch.c: Replace locals on the stack with copies when the
	stach state is saved. Reset the NullChecked flag when a label 
	(branch target) is inserted.

	* engine/jitc_call.c: Add suppport of argument packing in an object array.

	* engine/jitc_locals.c: Added.

	* engine/jitc_obj.c: Use the new locals / parameter management in
	jitc_locals.c and replace calls of jit_insn_check_null with calls of
	_ILJitCheckNull.

	* engine/jitc_ptr.c: Replace calls of jit_insn_check_null with calls of
	_ILJitCheckNull.

	* engine/jitc_setup.c: Use the new locals / parameter management in
	jitc_locals.c.

	* engine/jitc_stack.c: Start with some basic optimizations to avoid
	duplicating values.

	* engine/jitc_var.c: Use the functions in jitc_locals to accedd the locals
	and parameters. Start with some basic optimizations.

	* engine/Makefile.am: Add jitc_locals.c to the jitc dependencies.

2006-03-04  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c, engine/jitc_obj.c: Fix the TypedRef so that the layout of
	the ILTypedRefstructure is used. Fix jit type resolution of
	IL_META_ELEMTYPE_TYPEDREF.

	* engine/jitc_call.c: Fix the constructor call for multidimensional arrays.

	* engine/layout.c: Use IL_META_ELEMTYPE_PTR instead of
	IL_META_ELEMTYPE_TYPEDREF for pointer/reference types (what was obviously a
	bug).

	* engine/lib_array.c: use varargs for multidimensional arrays when the jit
	is used.

	* engine/verify.c: Do the stackrefresh before the label is inserted when the
	jit is used.

2006-02-27  Aleksey Demakov  <ademakov@gmail.com>

	* engine/jitc_conv.c (JITCoder_Conv): fix a typo.

	* engine/jitc_arith.c (JITCoder_Binary): use AdjustMixedBinary
	for arithmetic ops.
	* engine/jitc_branch.c, engine/jitc.c (AdjustMixedBinary): moved
	AdjustMixedBinary from jitc_branch.c to jitc.c. Bail out on floating
	point values.

2006-02-26  Klaus Treichel  <ktreichel@web.de>

	* engine/call.c: add an additional slot in the arg buffer for ctors. Return
	1 when an exception was thrown in _ILCallMethod.

	* engine/jitc.c, engine/lib_reflect.c: Make _ILJitGetCallingMethod more
	portable.

2006-02-25  Klaus Treichel  <ktreichel@web.de>

	* engine/call.c: Return the this pointer for ctor calls in ILCallMethod and
	use _ILLayoutClassReturn to obtain the size of the object to create instead
	of ILSizeOfType.

	* engine/jitc.c: Exchange the return values in ILJitCallMethod to 0 for
	failure and 1 for success.

	* engine/lib_reflect.c: Increase the number of callframes by one to look
	for in _IL_Assembly_GetCallingAssembly and
	_IL_Assembly_GetExecutingAssembly.

2006-02-23  Gopal V  <gopalv82@yahoo.com>

	* support/serial.c, support/il_serial.h: add IL_SERIAL_RFCOMM and
	generate /dev/rfcomm<n> devices for it.

2006-02-22  Klaus Treichel  <ktreichel@web.de>

	* engine/call.c: Pass the size of the type to _ILEngineAlloc and fix a bug
	in packing the args.

	* engine/engine.h: Adjust the prototypes for the arg packing functions.

2006-02-21  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Fix a bug in creating the jit types. Enum types must be
	converted to their underlying type.

	* engine/lib_reflect.c: Field- and Method handles are passed by value and
	not by reference in jitted code.

2006-02-20  Russell Stuart  <russell-savannah@stuart.id.au>

	* minor re-work of build-debian-packages.

2006-02-19  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add Function to emit code for throwing jit internal
	exceptions. Add members in the ILJITLabel to record the labels stackstate.
	Add member in the jit coder to record the current switch value. Implement
	_ILJitGetCallingMethod.

	* engine/jitc.h: Add prototype for _ILJitGetCallingMethod.

	* engine/jitc_branch.c: Add changes to record the stack state for the label.
	Change the branch and switch functions so that the GetLabel function is
	called when the stack is in the state after the branch.

	* engine/jitc_call.c: Implement the ldftn and ldvirtftn opcodes.

	* engine/jitc_obj.c: Add support for thread static members.

	* engine/jitc_ptr.c: Add throwing of the IndexOutOfRange exception.

	* engine/jitc_setup.c: Add intialization and destruction of the label
	stackstates MemStack.

	* engine/jitc_stack.c: Duplicate the value on the dup instruction now
	because the duplicated value might be modified and this must not affect
	the original value.

	* engine/lib_reflect.c: Set error to LoadError_OK in Assemble_LoadFromName
	when loading is successfull. Add support for the jit coder in
	GetCallingAssembly and GetExecutingAssembly.

2006-02-13  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_const.c: Fix a bug with negative small constants (> -128).
	(Thanks krokas for finding this bug.)

2006-02-12  Klaus Treichel  <ktreichel@web.de>

	* engine/call.c: Fix a build problem on 64 bit platforms with libjit
	enabled.

	* engine/jitc_except.c: Enable the calling of finally sections.

2006-02-10  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_var.c: Duplicate the local/argument before pushing it on the
	evaluation stack because the local/argument might be modified before the
	item on the. evaluation stack is used. (Thanks krokas for finding this bug.)

2006-02-08  Klaus Treichel  <ktreichel@web.de>

	* configure.in: Fix include and library paths in the search paths for
	libjit.

2006-02-08  Boris Manojlovic  <boris.manojlovic@gmail.com>

	* configure.in: Add /usr and /usr/local to the search
	paths of libjit. (patch #4767, Gopal)

2006-02-05  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.h: Add jit function metadata index IL_JIT_META_METHODNAME for
	the complete methodname.

	* engine/jitc.c: Fix a bug in the ALLOC_STACK macro. Add support for
	setting and getting the methodname in/from the jit functions metadata.
	Add the function names to the native calls for debugging purposes.

	* engine/jitc_call.c: Add the function names to native calls for debugging
	purposes. Add the complete method name to the jit_insn_call.

	* engine/jitc_obj.c: Add function names to the native calls. Add some
	debugging output when ilrun is invoked with -Z.

	* engine/jitc_setup.c: Add the dumping of the jitted methods in
	JITCoder_Finish.

	* engine/lib_helpers.c: In the jitted code the handle is passed by value
	and not by reference in _IL_RuntimeHelpers_InitializeArray. Removed the
	check of the callers image because the stack methods are not done yet.

2006-02-03  Peter Flaig  <Peter.Flaig@de.trumpf-laser.com>

	* support/time.c: fixed getting offset to UTC time if timezone was changed

2006-01-28  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add the functions _ILJitGetSizeOfClass for the ctors and
	_ILJitGetTypeFromClass for the ValueCtorArgs. Add definitions for the two
	label types (normal and startfinally). Add labelType to ILJitLabel and
	isInCatcher in ILJITCoder. Change the type resolution so that
	_IL_JIT_TYPE_VPTR is returned for object references and pointers to avoid
	recursive class layouting because this messed up the vtables. (We might need
	a better solution because it could still happen.) Add some debug code that
	is printed when ilrun is started with -Z.

	* engine/jitc_branch.c Add support for the different label types. With
	_IL_JIT_LABEL_FINALLY a finally subroutine is started instead of inserting
	a label. Add some debug code that is printed when ilrun is started with -Z.

	* engine/jitc_call.c: Pass the object size instead of 0 to _ILEngineAlloc
	and set the call type to JIT_CALL_NOTHROW. Implement the ValueCtorArgs.
	Set the number of parameters to argCount + 1 in vtable- and interface calls.
	Reset the method in the current ILExecThread on return from a function.
	Make sure that the returned value is pushed on the stack as a stack type.
	Add some debug code that is printed when ilrun is started with -Z.
	
	* engine/jitc_const.c: Change the constant load to match the cvmc coder.

	* engine/jitc_except.c: Add some debug code that is printed when ilrun is
	started with -Z. Add creation of the finally labels in setup exceptions.
	Add the returning from a finally clause. Add some exception support for
	debugging.

	* engine/jitc_obj.c: Set parameter isCtor to 1 in the calls to
	_ILJitCallStaticConstructor on access of a static field.

	* engine/jitc_setup.c: Add two stack items to handle the ValueCtorArgs
	items and initialize the isInCatcher flag in JITCoder_Setup.

	* engine/lib_type.c: Handles are passed on the stack instead of a pointer
	to the handle when jitting.

2006-01-18  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_call.c, engine/jitc_obj.c, engine/jitc_setup.c,
	engine/jitc_var.c: Fix a bug in JITCoder_LoadThisField and add trace output
	in various coder functions. (can be activated with the -Z switch).

2006-01-17  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_obj.c: Adjust evaluationstack in JITCoder_CopyObject with -2
	instead of -3.

2006-01.15  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_obj.c: Add the rest of the opcodes. (thanks_terminus_)
	
2006-01-15  Kirill Kononenko  <Kirill.Kononenko@gmail.com>

	* engine/jitc.c: Add jit type for typed references.

	* engine/jitc_obj.c: Implement boxing and the typed reference opcodes.

2006-01-15  Rhys Weatherley  <rweather@southern-storm.com.au>

	* NEWS, configure.in: update version for the "0.7.4" release.

	* configure.in: update working version to "0.7.5".

2006-01-12  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_obj.c: Fix JITCoder_CastClass.

2006-01-09  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.h: Add jitVtable (vtable pointers for jit functions) and
	change imt do void ** (vtable pointers for jit interface functions) in the
	classPrivate data.

	* engine/layout.c: Add the management of the jit vtables and optimize the
	creation of overriding virtual functuins so that they use the signature of
	the ancestor.

	* engine/jitc.h: Add some prototypes.

	* engine/jitc.c, engine/jitc_call.c: Add more functionality for calls.

	* engine/jitc_const.c: Add support for pushing a string token on the
	evaluation stack.

	* engine/jitc_setup.c: Add support for static constructors so that they are
	not executed more than once.

	* engine/jitc_obj.c: Fix a bug in PushToken (Value was not pushed on the
	stack).

2006-01-07  Kirill Kononenko  <Kirill.Kononenko@gmail.com>

	* engine/jitc.c, engine/jitc_branch.c: Implement support for the switch
	instruction.

2006-01-06  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c: Add some helper functions for jitc_obj.c

	* engine/jitc_var.c: Clean up the code a bit.

	* engine/jitc_obj.c: Implement CastClass/IsInst.

2006-01-06  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c, engine/jitc_ptr.c: Clean up the code a bit and fix a bug
	in stelem where a conversion to the array type was missing.

2006-01-05  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c, engine/jitc_ptr.c, engine/jitc_setup.c: Make some minor
	changes needed for jitc_call.c

	* engine/jitc_call.c: Add constructor-, normal- and virtual calls.
	(thanks krokas).

2006-01-04  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c, engine/jitc.h, engine/jitc_branch.c, engine/jitc_conv.c,
	engine/jitc_ptr.c: Implement the type conversion opcodes, the array stuff
	and some other pointer related opcodes.

2006-01-02  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_stack.c: Implement JITCoder_StackRefresh.

2005-12-31  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_setup.c: Reset the labellist in ILJITCoder_Finish.

	* engine/jitc_var.c: Implement the rest of the instructions.

2005-12-31  Kirill Kononenko  <Kirill.Kononenko@gmail.com>

	* engine/jitc_arith.c: Implement first version of the arithmetic functions.

2005-12-31  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc_branch.c: switch value1 and value2 in the jit_insn_ compare
	statements to get the correct results.

	* engine/jitc_call.c: Add the return statement. (thanks Kirill.)

2005-12-30  Kirill Kononenko  <Kirill.Kononenko@gmail.com>

	* engine/jitc_var.c: Start with load/store params and locals.

2005-12-30  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c, engine/jitc.h, engine/jitc_branch.c: Add compare and
	branch instructions.

2005-12-29  Klaus Treichel  <ktreichel@web.de>

	* engine/convert.c: Add a version of ConvertMethod for use with the jit
	coder.

	* engine/call.c: Add the ILExecThread as param 1 to the call of
	ILJitCallMethod.

	* engine/jitc.c: Add layouting of a class when necessary when a native call
	from the engine is done.

	* engine/jitc.h: Add the ILExecTread as parameter 1 in ILJitCallMethod.

	* engine/jitc_const.c: Fill in the code generation.

	* engine/jitc_setup.c: Return IL_CODER_END_OK in JITCoder_Finish instead of
	1.

	* engine/jitc_stack.c: Implement pop and dup.

	* engine/jitc_gen.h: Added code generation helper macros.

2005-12-28  Klaus Treichel  <ktreichel@web.de>

	* engine/call.c: Fix that the constructors of array and string classes
	don't get the this parameter.

	* engine/jitc.c: Fix the same problem as in call.c and fix the return type
	of constructors.

2005-12-27  Klaus Treichel  <ktreichel@web.de>

	* engine/call.c: implement _ILCallPackVaParams, _ILCallPackVParams and
	_ILCallMethod for the jit coder.

	* engine/engine.h: add the prototypes for _ILCallPackVaParams and
	_ILCallPackVParams and the definition of ILCallPackFunc for the jit coder.

	* engine/jitc.c, engine/jitc.h, engine/jit_call.h: add some more work on the
	jit coder.

2005-12-24  Klaus Treichel  <ktreichel@web.de>

	* engine/jitc.c, engine/jitc_setup.c: Add some more work on the jit coder.

2005-12-23  Marc Haisenko <marc@darkdust.net>

	* engine/cvm_call.c: Don't count method calls if enhanced profiler is
	activated but not enabled (e.g. -M is given but -E is not). Also fixed
	time measurement (VMCASE(COP_RETURN), credits go to Tim Nichols
	<timnichols@mac.com> for sending this fix.

	* engine/ilrun.c: Give hint on enabling profiling in "method profiles
	are not available" error message

	* README.profiling: Updated the profiling README to explain the new
	behaviour.

2005-12-23  Klaus Treichel  <ktreichel@web.de>

	* image/link.c: Add missing colon after /usr/lib64 for AMD64 systems so
	that libs in /usr/lib64 can be found (thanks marcusU).

2005-12-22  Klaus Treichel  <ktreichel@web.de>

	* engine/process.c: Init JitCoder when IL_USE_JIT is defined.

	* engine/layout.c: Add the generation of jit function stubs for each
	layouted class.

	* engine/jit.c, engine/jit.h: Add generation of function stubs and start the
	on demand compiler function.

2005-12-19  Klaus Treichel  <ktreichel@web.de>

	* configure.in: add switch --enable-jit for enabling the jit coder.

	* engine/Makefile.am: add the new jit coder sources to build.

	* engine/engine.c, engine/engine.h, engine/layout.c: add first changes for
	the jit coder (mainly classlayout).

	* engine/jitc.c, engine/jitc.h, engine/jitc_arith.c, engine/jitc_branch.c,
	engine/jitc_call.c, engine/jitc_const.c, engine/jitc_conv.c,
	engine/jitc_except.c, engine/jitc_obj.c, engine/jitc_ptr.c,
	engine/jitc_setup.c, engine/jitc_stack.c, engine/jitc_var.c: Stub the first
	files for the jit coder (thanks radekp).

2005-12-19  Klaus Treichel  <ktreichel@web.de>

	* libffi/ChangeLog, libffi/src/powerpc/linux64.S, libffi/src/powerpc/ffi.c:
	update to current libffi.

2005-12-15  Gopal V  <gopalv82@yahoo.com>

	* engine/unroll.c: Missed a line in last commit.

2005-12-14  Gopal V  <gopalv82@yahoo.com>

	* engine/unroll.c: Flip the order of the remainder operands
	on AMD64, as it uses x87 fp ordering for fprem.

2005-12-10  Deryk Robosson  <deryk@0x0a.com>

	* libgc/include/Makefile, libgc/doc/Makefile: Removed.  They're
	generated automatically. (bug #15119).

2005-12-08  Gopal V  <gopalv82@yahoo.com>

	* engine/md_amd64.h, engine/md_amd64.c: AMD64 fpu unrollers.

	* engine/unroll.c, engine/unroll_ptr.c: Remove the NATIVE_MASK
	on the reg2 in GetFPAndWordRegisters before returning. Remove
	debug code in 2D array code.

2005-12-04  Gopal V  <gopalv82@yahoo.com>

	* engine/dumpconfig.c, engine/md_amd64.h: Fix ilrun -D and 
	enable integer division on AMD64/EM64T.

2005-12-03  Klaus Treichel  <ktreichel@web.de>

	* engine/verify_call.c: Fix verification error when inlining an instance
	getter that returns a static field.
	
2005-12-03  Radek Polak  <psonek2@seznam.cz>

	* engine/lib_task.c, engine/int_proto.h, engine/int_table.c: Fix
	Process.Start so that it uses the current working dir. (Bug# 15098, Klaus)

2005-11-25  Gopal V  <gopalv82@yahoo.com>

	* engine/layout.c: resolve the parent classes with ILGetParentClass,
	for cross-assembly relationships.
	
	* engine/layout.c: Do not fill in IMT tables for abstract classes.

2005-11-21  Gopal V  <gopalv82@yahoo.com>

	* configure.in, support/spawn.c: use response files
	if arguments exceed 8192 bytes (bug #12797)

	* engine/cvm_inline.c: Minor tweaks on the string
	equality function, favouring interned strings.

	* engine/unroll_arith.c: Integer division operations for
	AMD64/EM64T.

	* engine/unroll_var.c: copy the entire CVMWord while
	doing a dup, not just a single ILNativeInt off the
	stack.

	* engine/layout.c, engine/cvm_call.c: update BuildIMT
	to handle interface implementations fulfilled by parent 
	classes.

	* engine/unroll.c: Fix bug in GetFPAndWordRegisters for
	the case where there is one word on the stack and 
	FP stack is empty.

	* engine/engine.h, engine/layout.c, engine/cvm_call.c:
	Add IL_DEBUG_IMTS flags to debug IMT bugs easily.
	
2005-11-16  Gopal V  <gopalv82@yahoo.com>

	* engine/cvm.c: Insert a dummy cgoto to ensure that
	the compiler register allocator picks up the jump
	in -O3

2005-11-01  Peter Fristedt  <belial@belial.com>

	* engine/cvm.c: add volatile definitions for gcc4 on powerpc. (Klaus)

2005-11-14  Gopal V  <gopalv82@yahoo.com>

	* engine/amd64_codegen.h, engine/unroll_ptr.c: 2D arrays
	and fix for ReExecute segfault.

2005-11-13  Gopal V  <gopalv82@yahoo.com>

	* engine/md_amd64.c, engine/md_amd64.h, engine/unroll_ptr.c,
	engine/cvm_config.h: All basic opcodes for AMD64 are now 
	working, turned on unrolled mode by default for AMD64.

2005-11-08  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_monitor.c: Updated _IL_Monitor_InternalWait comments
	to clarify what happens when Monitor.Wait times out.

2005-11-06  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_monitor.c: return 0 in _IL_Monitor_InternalWait when the
	timeout expired before the lock could be aquired.

	* support/hb_gc.c: fix a warning because of a difference in signedness.

	* support/thread.c: replace the suspend / resume in ILThreadStart /
	_ILThreadRun by a lock and release of the new threads lock mutex to
	wait until ILStartThread has finished it's housekeeping. This fixes
	problems on cygwin and MAC OSX where the resume got lost and the new
	thread.didn't start.

2005-11-03  Gopal V  <gopalv82@yahoo.com>

	* engine/md_amd64.h, engine/md_amd64.c: conditionals, compares
	and shift operations for AMD64.

2005-11-01  Peter Fristedt  <belial@belial.com>

	* configure.in: add check for mac osx darwin thread support.

	* support/pt_defs.h, support/thr_choose.h: add mac osx threading support.
	(patch, Klaus)

2005-10-29  Peter Fristedt  <belial@belial.com>

	* engine/lib_reflect.c: allow modification of init only fields through
	reflection (like in mono or ms) when IL_CONFIG_ECMA is set to n in the
	profile.

	* profiles/compact, profiles/compact-fp, profiles/full, profiles/full-tl,
	profiles/kernel, profiles/kernel-fp, profiles/tiny: add IL_CONFIG_ECMA
	switch (bug #14876, Klaus).

2005-10-19  Jason Clouse  <jhcclouse@charter.net>

	* cscc/csharp/cs_misc.cs: allow sizeof(primitive type) in safe code.
	(Patch #4526, Klaus).

2005-10-19  Klaus Treichel  <ktreichel@web.de>

	* libgc/pthread_support.c: Add missing condition around the call of
	GC_init_thread_local in GC_register_current_thread.

2005-10-18  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.c: Add macros depending on the arch to declare the
	interpreter globals volatile and add the macros to the variable
	declarations.

	* engine/cvm_call.c, engine/cvm_ptr.c: Add the macros to the variable
	declarations.

	* engine/layout.c: make classPrivate in LayoutClass volatile to avoid
	possible gc problems. Move the adding of classPrivate to the linked list
	of classes in the process to the end of LayoutClass.

2005-10-16  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.c: mark pc volatile.

2005-10-15  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.h: mark members intValue, uintValue and ptrValue of CVMWord
	volatile.

	* engine/cvm.c: mark stackmax and method in _ILCVMInterpreter volatile.

	* engine/cvm_arith.c: add volatile to first arg of static functions to
	avoid warnings.

	* engine/cvm_call.c: add a cast to the last arg in the call to
	_ILPackCVMStackArgs to avoid a warning.

	* engine/cvm_ptr.c: mark tempptr volatile.
	(All changes are to build the engine with gcc4 without optimizations.
	This is the first step. There seems to be still an issue with exceptions.)

2005-10-13  Heiko Weiss <heiko.weiss@de.trumpf-laser.com>

	* engine/lib_info.c: GetNetBIOSMachineName fixed

2005-10-10  Klaus Treichel  <ktreichel@web.de>

	* libgc/include/gc.h: Add prototypes for GC_run_thread.

	* libgc/pthread_support.c, libgc/win32_threads.c: Add function
	GC_run_thread.

	* libgc/solaris_threads.c: Stubb out function GC_run_thread.

	* include/il_thread.c: Add prototype for ILThreadRunSelf.

	* engine/engine.h: Add support for ILExecThreads to switch appdomains.

	* engine/pinvoke.c: Add support in DelegateInvoke to exeute managed code
	in non pnet threads.

	* engine/thread.c: Add support for ILExecThreads to switch between
	appdomains.

	* support/thr_defs.h: Add prototype for _ILThreadInitHandleSelf.

	* support/thread.c: Add function ILThreadRunSelf to run a function under
	gc conthol in a thread not created with the gc functions.

	* support/no_defs.c, support/w32_defs.c, support/pt_defs.c: Add function
	_ILThreadInitHandleSelf to initialize the threads in an ILThread for the
	current thread.

2005-10-04  Gopal V  <gopalv82@yahoo.com>

	* engine/amd64_codegen.h, engine/md_amd64.c, engine/md_amd64.h,
	engine/unroll.c, engine/cvm_config.h: Check in parts of the 
	unroller for x86_64 (AMD64/EM64T).

	* engine/Makefile.am: dependencies for gen_marshal.h and 
	unroll.c depends on all md_*.h files.

2005-10-01  Kirill Kononenko  <Kirill.Kononenko@gmail.com>

	* engine/pinvoke.c: Added an error message in case libffi does not support
	closures.
	* engine/lib_delegate.c: Added an error message in case we don't have
	support for creating closures on this system. (patch #4386, Klaus)

2005-09-18  Klaus Treichel  <ktreichel@web.de>

	* libgc/tests/middle.c: added

2005-09-17  Klaus Treichel  <ktreichel@web.de>

	* libgc/Makefile.am, libgc/Makefile.in, libgc/alpha_mach_dep.S,
	libgc/configure, libgc/configure.in, libgc/dyn_load.c, libgc/mach_dep.c,
	libgc/os_dep.c, libgc/pthread_stop_world.c, libgc/pthread_support.c,
	libgc/version.h, libgc/win32_threads.c, libgc/doc/Makefile.in,
	libgc/doc/README, libgc/doc/README.changes, libgc/doc/README.linux,
	libgc/include/Makefile.in, libgc/include/private/gc_priv.h,
	libgc/include/private/gcconfig.h,
	libgc/include/private/pthread_stop_world.h: update to version 6.6

	* libgc/mips_sgi_mach_dep.S: renamed to libgc/mips_sgi_mach_dep.s. 

2005-09-14  Gerd Nick  <gerd.nick@de.trumpf-laser.com>

	* engine/lib_math.c: Fix bug in RoundDouble to generate
	the correct power from the digits (Gopal, bug #14544).

2005-09-12  Russell Stuart  <russell-savannah@stuart.id.au>

	* engine/lib_task.cs: _IL_Process_StartProcess wasn't closing
	the pipe it used to report errno in case of a exec failure in
	the child.

2005-09-09  Peter Flaig  <Peter.Flaig@de.trumpf-laser.com>

	* engine/lib_type.c: GetInterface was not moving back up the tree,
	fixed with patch attached to bug #14476 (patch applied by drobosson).

2005-09-08  Gopal V  <gopalv82@yahoo.com>

	* configure.in: replace '[' chars with corresponding
	quadrigraphs to escape them the m4 way.

	* configure.in: throw away fancy quadrigraphs and use
	old fashioned [[ to escape for backward compatibility.

2005-08-29  Klaus Treichel  <ktreichel@web.de>

	* image/link.c:Change mapping of windows dll names to the names on non
	windows platforms. If the name starts with lib and ends with .dll then
	cut of these parts. Additionally cut off all including the first dash
	following the last point. Use this name for the libary search. Two special
	cases are left: gdk-win32 and gtk-win32 are mapped to gdk-x11 or gtk-x11.
	The real mapping is done through pinvoke.map.

2005-08-23  Klaus Treichel  <ktreichel@web.de>

	* engine/call.c, engine/heap.c, engine/lib_marshal.c, engine/lib_object.c,
	engine/lookup.c:
	Pass process instead of thread to the IL_METADATA_* macros and add process
	as parameter to the call of _ILLayoutClass.

	* engine/convert.c: Pass process instead of thread to the IL_METADATA_*
	macros and add process as parameter to the call of _ILLayoutClass.
	Add process parameter to the _ILMakeCifFor* functions.

	* engine/cvmc.c: Add backpointer to the owning process to ILCVMCoder.
	Add Macro for the cast from ILCoder to ILCVMCoder. Add process parameter
	to the functions GetTypeSize, GetStackTypeSize because they are needed for
	_ILSizeOfTypeLocked now. Add param process to CVMCoder_Create and set the
	backpointer.

	* engine/cvmc_call.c, engine/cvmc_stack.c, engine/cvmc_var.c: Add process
	parameter to the calls of GetTypeSize.

	* engine/cvmc_obj.c, engine/cvmc_ptr.c: Add process parameter to the calls
	of GetTypeSize, GetStackTypeSize and _ILSizeOfTypeLocked.

	* engine/cvmc_setup.c: Add process parameter to the calls of GetTypeSize,
	Add process parameter to CVMEntryAllocExtraLocal and CVMEntryNeedExtraLocal
	and the calls of these static functions.

	* engine/engine.h: Add element firstClassPrivate to ILExecProcess to get
	a list of already created classPrivate objects for the gc. Add backpointer
	to the owning process and the nextClassPrivate pointer for the linked list
	to ILClassPrivate. Add the process parameter to the function prototypes.
	Change the IL_METADATA_ macros so that they require the process instead of
	the thread as parameter. Add macro _ILExecThreadProcess to get the current
	process of a thread.

	* engine/layout.c: Add the class owning process as a parameter to
	LayoutClass, LayoutType, BuildIMT, _ILLayoutClass, _ILSizeOfTypeLocked.
	Remove the finding process in BuildIMT and LayoutClass. Allocate the
	ClassPrivateData collectable instead of uncollectable so that the storage
	will be cleaned up by the gc and the static objects too when the process is
	destroyed. Add maintenance of the linked list in LayoutClass. Change the
	parameter of IL_META_* macro calls from thread to the process.
	
	* engine/lib_delegate.c: Add process parameter to the call of
	_ILMakeClosureForDelegate.
	
	* engine/lib_emit.c, engine/lib_helpers.c: Pass process instead of thread
	to the IL_METADATA_* macros.
	
	* engine/lib_reflect.c:  Pass process instead of thread to the IL_METADATA_*
	macros. Add process parameter to call of _ILMakeClosureForDelegate.

	* engine/null_coder.c: Add process parameter to Coder_Create.

	* engine/pinvoke.c: Add process as additional parameter to the funcions
	PopulateStructFFI, StructToFFI, TypeToFFI and the calls of these functions.
	Add additional process parameter to _ILMakeCifForMethod,
	_ILMakeCifForConstructor and _ILMakeClosureForDelegate.

	* engine/process.c: Pass process to the call of ILCoderCreate.

	* engine/verify_call.c: Add process as additional parameter to
	TryInlineLoad, TryInlineMethod, TryInlineStore, GetMethodToken,
	GetConstructorToken and the calls of these functions ans _ILLayoutClass.

	* engine/verify_obj.c: Add process to the function GetFieldToken. Change
	the first parameter of BoxValue from coder to process and adjust the args
	of the ILCoderBox* calls. Add process as parameter to the calls of
	_ILLayoutClass. _ILSizeOfTypeLocked, GetFieldToken and GetMethodToken.

	* engine/verify_var.c: Add process parameter to call of GetFieldToken.

	* include/il_coder.h: Add process parameter to the prototype of the create
	function and the ILCoderCreate macro.

2005-08-22  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm.c: Replace calls to ILMemCpy in inlined functions with calls
	of IL_MEMCPY (this fixes some segfaults + build problems on x86).

2005-08-22  Klaus Treichel  <ktreichel@web.de>

	* codegen/Makefile.am, cscc/bf/Makefile.am, cscc/c/Makefile.am,
	cscc/common/Makefile.am, cscc/csharp/Makefile.am, cscc/java/Makefile.am,
	engine/Makefile.am, support/Makefile.am: Remove the dist_ and nodist_
	prefixes of the targets and add the nodist_ sources to the normal SOURCES
	because automake 1.4 can't handle them.

2005-08-22  Gopal V  <gopalv82@yahoo.com>

	* image/link.c: add lib64 paths to the default lookup
	path for libraries. This is to ensure the 64bit libraries
	are preferred over 32 bit ones when ilrun is built for 
	x86_64.

2005-08-21  Klaus Treichel  <ktreichel@web.de>

	* Makefile.am: Add config-ml.in to EXTRA_DIST.

	* engine/Makefile.am: Add various dependencies for build and make dist.

	* ilalink/Makefile.am: Add linker.h to SOURCES.

	* ilasm/Makefile.am: Add header files to SOURCES and ilasm_grammar.c,
	ilasm_grammar.h and ilasm_scanner.c to BUILT_SOURCES.

	* ildasm/Makefile.am: Add ildasm_internal.h to SOURCES.

	* image/Makefile.am: Add opdef.c to EXTRA_SOURCES and image.h and program.h
	to SOURCES.

	* libffi/Makefile.am, libffi/Makefile.in: Add configure.host and
	libtool-version to EXTRA_DIST.

	* support/Makefile.am: Add gen_errno.sh to EXTRA_DIST. Move errno_map.c to
	nodist_SOURCES, Add header files to dist_SOURCES. Remove $(srcdir) from
	errno_map.c to allow builddir != srcdir. Add dependencies for
	unicode.$(OBJEXT).

2005-08-19  Klaus Treichel  <ktreichel@web.de>

	* codegen/Makefile.am: Add TREECC_INPUTS to EXTRA_DIST. Move TREECC_OUTPUT
	to nodist_SOURCES and add header files to dist_SOURCES.

	* coremul/Makefile.am: Add header files to SOURCES.

	* csant/Makefile.am: Add header files to SOURCES.

	* cscc/bf/Makefile.am: Add TREECC_INPUTS to EXTRA_DIST. Move
	TREECC_SRCOUT to nodist_SOURCES and add header files to dist_SOURCES.

	* cscc/c/Makefile.am: Add TREECC_INPUTS to EXTRA_DIST. Move
	TREECC_SRCOUT to nodist_SOURCES and add header files to dist_SOURCES.

	* cscc/common/Makefile.am: Add cpp_defs.c to nodist_SOURCES, add
	cpp_defs.sh to EXTRA_DIST and add header files to dist_SOURCES.

	* cscc/csharp/Makefile.am: Add TREECC_INPUTS to EXTRA_DIST. Move
	TREECC_SRCOUT to nodist_SOURCES and add header files to dist_SOURCES.

	* cscc/java/Makefile.am: Add TREECC_INPUTS to EXTRA_DIST. Move
	TREECC_SRCOUT to nodist_SOURCES and add header files to dist_SOURCES.

	* cscc/vb/Makefile.am: Add header files to SOURCES.

2005-08-17  Klaus Treichel  <ktreichel@web.de>

	* libffi/Makefile.in: remove $(srcdir)/../compile from DIST_COMMON because
	it breaks make dist in pnet.

	* libffi/ChangeLog, libffi/configure, libffi/configure.ac,
	libffi/fficonfig.h.in, libffi/src/powerpc/ffi.c,
	libffi/src/powerpc/linux64_closure.S, libffi/src/powerpc/ppc_closure.S,
	libffi/src/powerpc/sysv.S, libffi/src/x86/ffi.c, libffi/src/x86/sysv.S,
	libffi/src/x86/win32.S: update to current libffi.

2005-08-17  Rhys Weatherley  <rweather@southern-storm.com.au>

	* Makefile.am: remove coremul from SUBDIRS.  It never built on anything
	other than x86 and will cause problems elsewhere.  Also, on Win32 it
	needs to be built as a .dll to work correctly.  Until these problems
	are fixed, it needs to stay out of the main build process.

	* NEWS, configure.in: update version for the "0.7.2" release.

	* configure.in: update working version to "0.7.3".

2005-08-15  Klaus Treichel  <ktreichel@web.de>

	* Makefile.am: add coremul to SUBDIRS. 

2005-08-13  Klaus Treichel  <ktreichel@web.de>

	* Makefile.am: change to run all targets on all subdirs.

	* libgc/Makefile.am. libgc/Makefile.in: change mips_sgi_mach_dep.s to
	mips_sgi_mach_dep.S to fix make dist error.

	* libffi/Makefile.in: remove $(srcdir)/../depcomp from DIST_COMMON.

2005-08-11  Klaus Treichel  <ktreichel@web.de>

	* support/expand.c: expand filenames starting with a drive specification
	with the windows functions on cygwin.

2005-08-07  Klaus Treichel  <ktreichel@web.de>

	* csant/csant_dir.c: Prevent prepending of pathname if filename starts with
	a drive specification on windows in CSAntDirCombine.

2005-08-03  Rainer Größlinger  <rainer.groesslinger@gmx.net>

	* libffi/include/Makefile.am, libffi/include/Makefile.in: ffitarget.h is
	installed in $(includedir)/pnet now. (applied by Klaus Treichel)

2005-08-02  Rainer Größlinger  <rainer.groesslinger@gmx.net>

	* doc/cvmdoc.py: replace module regex by re. (applied by Klaus Treichel)

2005-08-02  Deryk Robosson  <deryk@0x0a.com>

	* ilalink/link_main.c: Add missing newline to error message.

2005-08-01  Rainer Größlinger <rainer.groesslinger@gmx.net>

	* doc/pnetasm.texi: remove incorrect @. (applied by Klaus Treichel)

2005-08-01  Klaus Treichel  <ktreichel@web.de>

	* libgc/win32_threads.c: remove left over closing comment.

2005-07-30  Klaus Treichel  <ktreichel@web.de>

	* configure.in: add --disable-dependency-tracking to configure of libffi.

	* libffi/Makefile.am, libffi/makefile.in, libffi/configure: update to
	current cvs MAIN branch in gcc repository and remove directory testsuite
	from subdirs in makefiles and creation of Makefile from configure.

	* libffi/ChangeLog, libffi/ChangeLog.libgcj, libffi/LICENSE, libffi/README,
	libffi/acinclude.m4, libffi/aclocal.m4, libffi/fficonfig.h.in,
	libffi/configure, libffi/include/Makefile.am, libffi/include/Makefile.in,
	libffi/include/ffi.h.in, libffi/include/ffi_common.h, libffi/src/debug.c,
	libffi/src/ffitest.c, libffi/src/java_raw_api.c, libffi/src/prep_cif.c,
	libffi/src/raw_api.c, libffi/src/types.c, libffi/src/alpha/ffi.c,
	libffi/src/alpha/osf.S, libffi/src/arm/ffi.c,, libffi/src/arm/sysv.S,
	libffi/cris/ffi.c, libffi/cris/ffi.c, libffi/src/ia64/ffi.c,
	libffi/src/ia64/ia64_flags.h, libffi/src/ia64/unix.S,
	libffi/src/m68k/sysv.S, libffi/src/mips/ffi.c, libffi/src/mips/n32.S,
	libffi/src/mips/o32.S, libffi/src/powerpc/aix.S,
	libffi/src/powerpc/aix_closure.S, libffi/src/powerpc/asm.h,
	libffi/src/powerpc/darwin.S, libffi/src/powerpc/darwin_closure.S,
	libffi/src/powerpc/ffi.c, libffi/src/powerpc/ffi_darwin.c,
	libffi/src/powerpc/ppc_closure.S, libffi/src/powerpc/sysv.S,
	libffi/src/s390/ffi.c, libffi/src/s390/sysv.S, libffi/src/sh/ffi.c,
	libffi/src/sh/sysv.S, libffi/src/sparc/ffi.c, libffi/src/sparc/v8.S,
	libffi/src/sparc/v9.S, libffi/src/x86/ffi.c, libffi/src/x86/ffi64.c,
	libffi/src/x86/sysv.S, libffi/src/x86/unix64.S, libffi/src/x86/win32.S:
	update to current cvs MAIN branch in gcc repository.

	* libffi/configure.ac, libffi/configure.host, libffi/src/alpha/ffitarget.h,
	libffi/src/arm/ffitarget.h, libffi/src/cris/ffitarget.c,
	libffi/src/frv/eabi.S, libffi/src/frv/ffi.c, libffi/src/frv/ffitarget.h,
	libffi/src/ia64/ffitarget.h, libffi/src/m32r/ffi.c,
	libffi/src/m32r/ffitarget.h, libffi/src/m32r/sysv.S,
	libffi/src/m68k/ffitarget.h, libffi/src/mips/ffitarget.h,
	libffi/src/pa/ffi.c, libffi/src/pa/ffitarget.h, libffi/src/pa/linux.S,
	libffi/src/powerpc/ffitarget.h, libffi/src/powerpc/linux64.S,
	libffi/src/powerpc/linux64_closure.S, libffi/src/s390/ffitarget.h,
	libffi/src/sh/ffitarget.h, libffi/src/sh64/ffi.c,
	libffi/src/sh64/ffitarget.h, libffi/src/sh64/sysv.S,
	libffi/src/sparc/ffitarget.h, libffi/src/x86/ffitarget.h,
	libffi/libtool-version: added from current cvs MAIN branch in gcc
	repository.

	* libffi/acconfig.h, libffi/include/ffi_mips.h: removed.

2005-07-30  Deryk Robosson  <deryk@0x0a.com>

	* engine/cvm_call.c: profile macros called without arguments no longer
	throw an error on older (2.9) gcc.

2005-07-25  Deryk Robosson  <deryk@0x0a.com>

	* configure.in: initial BeOS checks,
	support/thr_choose.h: Add BeOS thread support.

2005-07-23  Klaus Treichel  <ktreichel@web.de>

	* libgc/aclocal.m4, libgc/Makefile.in, libgc/configure,
	libgc/doc/Makefile.in, libgc/include/Makefile.in: Update to 6.5.

2005-07-23  Klaus Treichel  <ktreichel@web.de>

	* libgc/win32_threads.c: Change max threads from 256 to 1024 and add
	GC_CreateThread for cygwin systems to use win32 native threads.
	Apply Tums changes to allocate thread_args and thread_start_info using
	malloc instead of GC_malloc_uncollectable.

	* libgc/include/gc.h: Add prototype for GC_CreateThread on cygwin.

2005-07-23  Klaus Treichel  <ktreichel@web.de>

	* libgc/Makefile.am, libgc/Makefile.direct,
	libgc/NT_STATIC_THREADS_MAKEFILE, libgc/allchblk.c, libgc/alloc.c,
	libgc/alpha_mach_dep.S, libgc/backgraph.c, libgc/configure.in,
	libgc/darwin_stop_world.c, libgc/dyn_load.c, libgc/finalize.c,
	libgc/headers.c, libgc/mach_dep.c, libgc/mallocx.c, libgc/mark.c,
	libgc/mark_rts.c, libgc/misc.c, libgc/mkinstalldirs, libgc/os_dep.c,
	libgc/powerpc_darwin_mach_dep.s, libgc/pthread_stop_world.c,
	libgc/pthread_support.c, libgc/reclaim.c, libgc/solaris_pthreads.c,
	libgc/solaris_threads.c, libgc/specific.c, libgc/threadlibs.c,
	libgc/version.h, libgc/win32_threads.c, libgc/cord/cordprnt.c,
	libgc/cord/cordtest.c, libgc/doc/README, libgc/doc/README.changes,
	libgc/doc/README.darwin, libgc/doc/README.environment,
	libgc/doc/README.solaris2, libgc/include/gc.h, libgc/include/gc_allocator.h,
	libgc/include/gc_config_macros.h, libgc/include/gc_cpp.h,
	libgc/include/new_gc_alloc.h, libgc/include/private/gc_hdrs.h,
	libgc/include/private/gc_locks.h, libgc/include/private/gc_priv.h,
	libgc/include/private/gcconfig.h, libgc/include/private/pthread_support.h,
	libgc/include/private/solaris_threads.h, libgc/tests/test.c: Updated to 6.5

	* libgc/aix_irix_threads.c, libgc/irix_threads.c, libgc/linux_threads.c,
	libgc/powerpc_macosx_mach_dep.s: removed in 6.5

2005-07-03  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_reflect.c: add deserilization support for arrays of
	System.String and System.Type elements.
	
2005-07-03  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_reflect.c: fix deserializing of arrays that array elements are
	deserialized to the correct array index.

	* image/ser_parse.c: fix deserialization of object arrays with string
	elements. String arrays still bail out when the constructor is called.

2005-06-26  Klaus Treichel  <ktreichel@web.de>

	* image/item.c: Fix type-punned aliasing warnings of gcc 4.1.

	* engine/lookup.c: Handle names of nested classes in LookupClass (seperator
	+ additional to / in typenames).

2005-06-20  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_delegate.c: Fix type-punned aliasing warnings.

2005-06-20  Gopal V  <gopalv82@yahoo.com>

	* engine/cvm.c, engine/cvm_config.h, engine/mklabel.sh: define
	CVM_X86_64. Do manual register allocation for pc, stack and frame.
	Use assembly 'jmpq' instead of cgoto for performance.

2005-06-11  Rhys Weatherley  <rweather@southern-storm.com.au>

	* NEWS, configure.in: update version for the "0.7.0" release.

	* configure.in: update working version to "0.7.1".

2005-06-11  Gopal V  <gopalv82@yahoo.com>

	* engine/lib_reflect.c: fix type-punned aliasing warnings.

2005-06-09  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/meta_build.c, image/meta_index.c, image/pecoff_loader.c:
	make the image loader a little more robust against 2.0 assemblies
	that contain generics.

2005-05-05  Klaus Treichel  <ktreichel@web.de>

	* engine/convert.c, engine/engine.h, engine/ilrun.c, engine/ilverify.c,
	engine/internal.c, engine/Makefile.am, engine/process.c, engine/thread.c,
	include/il_engine.c: add support for multiple ILExecProcess instances.

	* engine/engine.c: Add ILExecEngine functions.

2005-04-25  Marc Haisenko   <marc@darkdust.net>

	* README.profiling: added README.profiling

2005-04-23  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_profiling.c: fix build problem if ENHANCED_PROFILER is not
	defined.

2005-04-22  Marc Haisenko   <marc@darkdust.net>

	* configure.in, engine/Makefile.am, engine/cvm_call.c, engine/cvmc.c,
	engine/engine.h, engine/ilrun.c, engine/int_proto.h,
	egnine/int_table.c, engine/lib_profiling.c, engine/mkint.sh, 
	image/program.h: Add enhanced profiler. This profiler must be enabled 
	via ./configure --enable-enhanced-profiler. I'll write a README about
	it on Monday. The code shouldn't interfere with anything, it's guarded
	with #ifdef's and will only be active if enabled via configure and
	when the -M (and new -E) commandline arguments are given.

2005-04-06  Marc Haisenko   <marc@darkdust.net>

	* configure.in, support/interrupt.h: Add --enable-interrupts for work
	around on bugs #12552, #11627 (patch #3884 applied by drobosson)

2005-04-02  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm_ptr.c: Replace call to ILMemMove with IL_MEMMOVE to avoid
	possible register misuse on x86 systems.

	* engine/lib_string.c: optimize FindInRange for IndexOf and LastIndexOf.

2005-03-25  Klaus Treichel  <ktreichel@web.de>

	* engine/engine.h: add macro IL_CONVERT_METHOD to avoid function calls if
	method is already converted.

	*engine/cvm/call.c: replace function calls to _ILConvertMethod with macro
	calls of IL_CONVERT_METHOD.

2005-03-22  Klaus Treichel  <ktreichel@web.de>

	* engine/thread.c: Fix a possibe engine lockup.

2005-03-09  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_string.c: change String.Replace so that a new string is
	created only if a replacement has to be done.  Changed the off by one
	bug (thx. to Erich Kitzm�ller) that fixed the problem.

2005-03-06  Klaus Treichel  <ktreichel@web.de>

	* ilranlib/Makefile.am: fix problem with make install on cygwin.

2005-03-05  Hermann Weiss  <Hermann.Weiss@de.trumpf-laser.com>

	* engine/lib_task.c:  Added functions _IL_Process_GetErrnoMessage
	_IL_Process_GetErrno to get the result of forked processes. (patch
	#3778, applied by drobosson)

2005-02-28  Marc Haisenko  <marc@darkdust.net>

	* engine/cvm_call.c: callFrame now defaults to zero (otherwise I get an
	'might be used unitialized' warning with my profiling patch and callFrame
	having invalid values)

2005-02-23  Gopal V  <gopalv82@yahoo.com>

	* cscc/csharp/cs_stmt.tc: Fix overflow bug in determining type of
	switch to use. (fix bug #12048).

2005-02-21  Doru Budai  <doru.budai@gmail.com>

	* include/il_sysio.h, support/socket.c: Enable UDP broadcast. (patch
	#3757, applied by drobosson)

2005-02-21  Klaus Treichel  <ktreichel@web.de>

	* support/socket.c: prevent the sending of SIGPIPE on broken connections in
	ILSysIOSocketSend and ILSysIOSocketSendTo. (fix bug #11980)
 
2005-02-19  Klaus Treichel  <ktreichel@web.de>

	* engine/cvm_ptr.c: fix isinst instruction to behave like a cast.
	(fix bug #11998)

2005-02-09  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_stringbuilder.c: fix gcc 2 vs gcc 3 issues.

2005-02-06  Klaus Treichel  <ktreichel@web.de>

	* engine/lib_stringbuilder.c: Added internalcalls for StringBuilder class. 

	* engine/Makefile.am: Add lib_stringbuilder.c

	* engine/int_proto.c, engine/int_table.c: Add internal functions for
	StringBuilder.

2004-01-25  Gopal V  <gopalv82@yahoo.com>

	* engine/cvm_config.h, engine/unroll_const.c: Enable PPC
	unroller by default and avoid LDC_R4/R8 code for PPC.

2004-01-24  Gopal V  <gopalv82@yahoo.com>

	* engine/unroll.c: Add CVM_PPC as an unrolled platform.

2005-01-23  Russell Stuart  <russell-savannah@stuart.id.au>

	* Updated build-depian-packages.sh for new release.

2005-01-21  Gopal V  <gopalv82@yahoo.com>

	* engine/md_ppc.h, engine/md_ppc.c, engine/ppc_codegen.h, 
	engine/unroll_arith.c, engine/unroll_ptr.c, engine/cvm_config.h:
	Integer and pointer PPC unroller (except for 64 bit arith).

2005-01-16  Stephen Compall  <s11@member.fsf.org>

	* doc/pnettools.texi (Build file syntax): Specify behavior in
	cases in which insufficient permissions prevent particular
	actions (thanks to Marcus Urban <mathpup@mylinuxisp.com>).
	(Compile tag): Warn about tags whose subsequent instances in a
	particular context are ignored: sources, references, and
	resources (thanks to Marcus Urban).

2005-01-16  Rhys Weatherley  <rweather@southern-storm.com.au>

	* NEWS, configure.in: update version for the "0.6.12" release.

	* configure.in: update working version to "0.6.13".

2005-01-01  Stephen Compall  <s11@member.fsf.org>

	* support/cmdline.c (ILCmdLineExpand): Skip empty lines in "@file"
	resource files.

2004-12-28  Gopal V  <gopalv82@yahoo.com>

	* engine/md_ppc.h, engine/ppc_codegen.h, engine/unroll.c: Implement
	FPU ops for add/sub/mul/div.

2004-12-25  Gopal V  <gopalv82@yahoo.com>

	* engine/md_ppc.h, engine/ppc_codegen.h: Stub macros for FPU ops and
	implement md_switch()

2004-12-22  Gopal V  <gopalv82@yahoo.com>

	* engine/unroll_ptr.c: Implement 2D array operations for 
	PPC.

2004-12-21  Gopal V  <gopalv82@yahoo.com>

	* engine/md_ppc.h, engine/ppc_codegen.h, engine/unroll_arith.c:
	Implement integer division for PPC.

	* engine/md_ppc.h, engine/ppc_codegen.h: Implement array load/store
	unrolling for PPC.

2004-12-20  Gopal V  <gopalv82@yahoo.com>

	* engine/md_ppc.c, engine/md_ppc.h, engine/ppc_codegen.h: 
	implement compare operations using a conditional three way
	branch.

	* engine/md_ppc.h: Finish conditional branch macros.

2004-12-19  Gopal V  <gopalv82@yahoo.com>

	* engine/md_ppc.c, engine/md_ppc.h, engine/ppc_codegen.h: 
	Implement seteq, setgt and other compare against zero 
	predicates.

	* doc/unrolling.txt: Add more documentation on debugging 
	the unroller in gdb.

2004-12-17  Gopal V  <gopalv82@yahoo.com>

	* support/clflush.c: Reimplement cache flushing for
	PPC to use "dcbf" instead of "dcbst" to ensure that
	cache coherency is proper.

2004-12-16  Gopal V  <gopalv82@yahoo.com>

	* engine/md_ppc.h, engine/ppc_codegen.h: First cut
	of the PPC codegen.
	
	* engine/Makefile.am, engine/md_ppc.c, engine/md_ppc.h,
	engine/ppc_codegen.h: Basic arithmetic implemented.	

2004-11-29  Richard Baumann  <biochem333@nyc.rr.com>

	* cscc/csharp/cs_gather.c: fix handling of methods, properties, and
	events which hide base class virtuals and add access modifier
	consistency checks for derived class properties and events.

2004-11-23  Gopal V  <gopalv82@yahoo.com>

	* support/interrupt_posix.c: Fix bug #10906 by adding appropriate ifdefs
	to detect older EAX defines instead of the REG_EAX .

2004-11-22  Klaus Treichel  <ktreichel@web.de>

	* include/il_utils.h, engine/lib_string.c, support/unicode.c: Fix case
	sensitive string comparision (upper case char > lower case char).

2004-11-22  Gopal V  <gopalv82@yahoo.com>

	* support/console.c: Use a portable invocation of tparm() with
	10 parameters to match Susv3 specifications.

2004-11-02  Gopal V  <gopalv82@yahoo.com>

	* cscc/common/cc_compat.c: Allow /debug:full and /debug:pdbonly flags
	in CSC compat mode.

2004-10-30  Rhys Weatherley  <rweather@southern-storm.com.au>

	* NEWS, configure.in: update version for the "0.6.10" release.

	* configure.in: update working version to "0.6.11".

2004-10-30  Gopal V  <gopalv82@yahoo.com>

	* engine/verify_call.c: Do not inline loads from value types.

2004-10-29  Peter Lund <firefly@diku.dk>

	* clrwrap/clrwrap.1, csant/csant.1, cscc/cscc.1, cscc/csdoc.1
	cscc/cpp/cscc-cpp.1, csdoc/csdoc2hier.1, csdoc/csdoc2html.1,
	csdoc/csdoc2texi.1, csdoc/cssrc2html.1, engine/ilrun.1, 
	engine/ilverify.1, ilalink/ilalink.1, ilasm/ilasm.1, ildasm/ildasm.1,
	ildd/ildd.1, ilfind/ilfind.1, ilgac/ilgac.1, ilheader/ilheader.1,
	ilnative/ilnative.1, ilranlib/ilranlib.1, ilsize/ilsize.1, 
	ilstrip/ilstrip.1, resgen/resgen.1:	fix manpage formatting issues. 
	(patch attached to bug #10779, Gopal).

2004-10-29  Gopal V  <gopalv82@yahoo.com>

	* support/serial.c: Fix further issues with building on
	BeOS (redone patch #3479).

2004-10-29  Simon Posnjak <simon.posnjak@siol.net>

	* include/il_align.h: force alignment to 4-bytes for CRIS
	
	* libffi/Makefile.am, libffi/Makefile.in, libffi/configure,
	libffi/configure.in, libffi/include/ffi.h.in, libffi/src/cris/ffi.c,
	libffi/src/cris/sysv.S, libffi/src/prep_cif.c, libffi/src/types.c,
	libgc/include/gc.h, libgc/include/private/gc_locks.h, 
	libgc/include/private/gcconfig.h, libgc/os_dep.c: port libffi and 
	libgc to CRIS platform.
	(Gopal, patch from email).

2004-10-28  Gopal V  <gopalv82@yahoo.com>

	* cscc/csharp/cs_grammar.y: Fix segfault due to missing yyisa check.
	(bug #10753).

	* configure.in: replace AC_CHECK_TYPE with AC_TRY_COMPILE for 
	compatibility with older autoconf systems.

2004-10-27  Carl-Adam Brengesjo  <ca.brengesjo@telia.com>

	* support/socket.c: BeOS has incomplete socket support (thanks to Tomas
	Wilhelmsson <wilhelmsson_tomas@hotmail.com>).

2004-10-27  Gopal V  <gopalv82@yahoo.com>

	* configure.in, support/ansi.c, support/dir.c: Fix compile errors on
	BeOS (thanks to Tomas Wilhelmsson <wilhelmsson_tomas@hotmail.com>).

	* support/dynlib.c: Implement BeOS specific dynlib functionality.
	(thanks to Tomas)

2004-10-26  Klaus Treichel  <ktreichel@web.de>

	* support/decimal.c: fix division bug

2004-10-23  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/engine.h, engine/ilrun.c, engine/process.c,
	image/link.c, image/meta_build.c, image/pecoff_loader.c,
	include/il_engine.h, include/il_image.h: add IL_LOADFLAG_IGNORE_ERRORS,
	to allow metadata errors to be ignored at runtime.

2004-10-21  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/cvmc_gen.h: add a missing semi-colon.

	* engine/cvm_call.c: fix another reference to "_ILPackVarArgs".

2004-10-20  Gopal V  <gopalv82@yahoo.com>

	* engine/cvm_call.c, engine/engine.h, engine/lib_delegate.c: Change 
	_ILPackVarArgs to _ILPackCVMStackArgs and remove it from var args 
	#ifdef.

	* engine/cvmc_gen.h: Move the COP_TRACE generation out of the 
	_CVM_OUT_RETURN macro to fix kernel-fp compliation.

	* engine/internal.c: Add DnsMethods suppression if networking is disabled.

2004-10-19  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_reflect.c: Fixed null dereference when using
	ClrField.SetValue with a null value (bug #10706 by Andre Seidelt).
	
2004-10-15  Adam Gibson  <adam.gibson@gmail.com>

	* engine/int_table.c, engine/int_proto.h, engine/lib_serial.c,
	include/il_serial.h, support/serial.c: Implement timeouts for 
	*nix version of serial reads , add timeout parameter to WaitForInput.
	(patch #3448, Gopal).

2004-10-13  Gopal V  <gopalv82@yahoo.com>

	* ilasm/ilasm_grammar.y: Add missing intialization and fix segfault.

	* support/serial.c: Implement serial I/O open, read, write and close
	operations for Win32.

2004-10-12  Gopal V  <gopalv82@yahoo.com>

	* ilasm/ilasm_grammar.y, ilasm/ilasm_data.c, ilasm/ilasm_data.c: Implement
	forward references for data labels.

2004-10-11  Gopal V  <gopalv82@yahoo.com>
	
	* libffi/src/x86/ffi64.c: All stack params should be 8 aligned for amd64.
	(picked off gcc-3.4-rhl branch of libffi)

	* engine/verify_call.c: Fix build warnings with amd64 for pointer sizes.

2004-10-08  Carl-Adam Brengesjo  <ca.brengesjo@telia.com>

	* support/time.c: Fixed UTC offset for DST (Win32). Please review
	<http://dotgnu.org/pipermail/pnet-developers/2004-October/001745.html>.
	
2004-10-01  Gopal V  <gopalv82@yahoo.com>

	* configure.in,  support/serial.c: Include <sys/modem.h> for 
	HPUX compatibility.

2004-09-28  Carl-Adam Brengesjo  <ca.brengesjo@telia.com>

	* support/socket.c: Fix socket flags for Solaris and other OSes 
	which do not match with CLR socket flag enums. (patch #3392 originally
	from Adam J. Tybor)

2004-09-25  Gopal V  <gopalv82@yahoo.com>

	* engine/lib_emit.c: Fix compiler warning with gcc.

	* engine/Makefile.am: add libgc include paths for the without tools
	build.

2004-09-24  Gopal V  <gopalv82@yahoo.com>

	* image/sig_writer.c: Import classes before writing class tokens.
	(patch #3387 from ryan@netsengercorp.com).

	* engine/lib_emit.c: Add member imports for attribute creation 
	from constructors as well.

	* image/sig_writer.c: Resolve classes before importing them to 
	current image.

2004-09-24  Maciek Plewa  <maciek@mil-sim.net>

	* cscc/cpp/cppmain.c, cscc/cpp/Makefile.am: Add response file support 
	for systems with limited command line length. (patch #3280, Gopal)

2004-09-24  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/md_x86.c: use "fprem" instead of "fprem1", to fix bug #10483.

	* support/gen_errno.sh: support platforms that spread errno codes
	across multiple .h files (bug #10485).

	* include/il_types.h: use "ILNativeUInt" instead of "unsigned long"
	in the type macros because on some platforms, "long" is not the
	same size as a pointer.

2004-09-22  Gopal V  <gopalv82@yahoo.com>

	* cscc/cpp/Makefile.am: Add rm -f for cli-unknown-cpp man page.

2004-09-20  Gopal V  <gopalv82@yahoo.com>

	* image/context.c: Allow ILContextGetFile to lookup full paths as well.

	* engine/lib_reflect.c: Prevent double loading of assemblies by path
	using ILContextGetFile.

2004-09-20  Russell Stuart <russell-savannah@stuart.id.au>

	* */Makefile.am: Change all "$(LN_S) -f ... X" to
	"rm -f X; $(LN_S) -f ... X"

2004-09-20  Russell Stuart <russell-savannah@stuart.id.au>

	* ilasm/Makefile.am: Added -f to "ln -s ... man/man1/al.1.gz"

2004-09-18  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_emit.c:
	implement the internalcalls for CustomAttributeBuilder.

2004-09-17  Gopal V  <gopalv82@yahoo.com>

	* support/socket.c: Fix minor bug in ILSysIOSocketSelect() for infinite
	selects.

2004-09-17  Christian Schuster  <christian.schuster@s2000.tu-chemnitz.de>

	* cscc/bf/bf_optimize.c: Fix the behavior of BFOptimize() which currently
	destroys the parse tree. (Patch #3366, Gopal)

2004-09-13  Gopal V  <gopalv82@yahoo.com>

	* support/time.c: Fix boot time calculations when the current nanoseconds
	fraction is less than boot time fraction.

2004-09-11  Thong Nguyen  <tum@veridicus.com>

	* engine/thread.c: Updated ILExecThreadCurrent's call to
	System.Threading.Thread's constructor with the ILThread
	pointer as an argument.
	
2004-09-09  Gopal V  <gopalv82@yahoo.com>

	* cscc/csharp/cs_lvalue.tc: Treat enum members as underlying types inside
	enum initializers. (bug #10058).
	
2004-09-08  Gopal V  <gopalv82@yahoo.com>

	* image/member.c: Included nested class checks for FAMORASSEM members.
	(bug #10311).

2004-09-07  Russell Stuart <russell-savannah@stuart.id.au>

	* build-debian-packages.conf,
	  build-debian-packages.sh,
	  cscc/Makefile.am,
	  cscc/cpp/Makefile.am,
	  debian/README.Debian,
	  debian/changelog,
	  debian/pnet-compiler.postinst,
	  debian/rules,
	  ilasm/Makefile.am,
	  ilranlib/Makefile.am,
	  ilstrip/Makefile.am,
	  pnet.spec.in:
	  Clean up Debian packaging.

2004-09-05  Robin KAY  <komadori@gekkou.co.uk>

	* configure.in, support/pt_defs.h, support/thr_choose.h:
	Enable threading for Solaris (patch #3340, Gopal).

2004-09-04  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_info.c: fix a compile problem that causes breakages
	on gcc 2.95.x.

2004-08-31  Carl-Adam Brengesjo  <ca.brengesjo@telia.com>

	* engine/lib_info.c, configure.in: Obtain user name from UIDs instead 
	of from getlogin. (Patch #3295, Gopal)

2004-08-25  Thong Nguyen  <tum@veridicus.com>

	* engine/thread.c: Added constructor call to new CLR thread
	objects created by the engine (ILExecThreadCurrentClrThread).

2004-08-24  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_defs.h: Changed System_Thread start field
	from type (ILObject *) to (System_Delegate *).
	
	* engine/lib_thread.c: Made new thread invoke ThreadStart
	by invoking the target method of the delegate directly rather
	than by invoking the ThreadStart.Invoke method. This is faster
	and prevents the ThreadStart.Invoke method from appearing in
	stack traces.
	
2004-08-23  Thong Nguyen  <tum@veridicus.com>

	* include/il_errno.h: Added IL_ERRNO_ENOFILE (mapped to
	IL_ERRNO_ENOENT).
	
2004-08-22  Thong Nguyen  <tum@veridicus.com>

	* include/il_thread.h: Added ILThreadSuspendRequest and IL_SUSPEND_*
	return value constants.
	
	* support/thread.c: Added implementaton of ILThreadSuspendRequest.
	Added suspend support to ILThreadJoin (made it suspend after it
	exits the wait/sleep/join state if there is a suspend request pending).
	
	* support/wait.c: Added suspend support to the wait functions.
	
	* engine/cvm_call.c: Added ThreadState check to the
	_IL_MANAGED_SAFEPOINT_THREAD_SUSPEND check.
	
	* engine/engine.h: Added _ILExecThreadGetState and
	_ILExecThreadResumeThread prototypes.
	
	* engine/lib_thread.c: Changed Thread.Resume and Thread.ThreadState
	implementatons to use the new engine level versions.
	
	* engine/thread.c: added _ILExecThreadGetState and 
	_ILExecThreadResumeThread implementations.
	Changed ILExecThreadSuspendThread implementation to remove a race
	condition and not require the suspend requesting thread to wait
	on the thread being suspended even if the thread being suspended is
	running managed code and not in a wait/sleep/join state.	
		
2004-08-17  Gopal V  <gopalv82@yahoo.com>

	* engine/lib_reflect.c: Perform promotions for integer types to floats
	and doubles for invoke via reflection.

2004-08-11  Gopal V  <gopalv82@yahoo.com>

	* engine/lib_reflect.c: Fix array creations to use System.Type[] 
	arrays instead of System.Object[] .

	* engine/lib_reflect.c: Throw a FieldAccessException when SetValue
	is attempted at a const or readonly field.

	* engine/lib_reflect.c: Throw an ArgumentException when the wrong
	type is passed to SetValue.

2004-08-08  Gopal V  <gopalv82@yahoo.com>

	* engine/lib_emit.c: Allow NULL parameters for ClrParameter names
	for unnamed parameters (bug #9921).

	* codegen/cg_arith.tc: Work around GCC inline optimisation issues in 
	PPC64 by checking for out parameter instead of result from function.

2004-08-08  Rhys Weatherley  <rweather@southern-storm.com.au>

	* NEWS, configure.in: update version for the "0.6.8" release.

	* configure.in: update working version to "0.6.9".

2004-08-07  Rhys Weatherley  <rweather@southern-storm.com.au>

	* csant/csant_cscc.c, cscc/cscc.1, cscc/common/cc_compat.c,
	cscc/common/cc_options.c, doc/pnettools.texi, ilalink/ilalink.1,
	ilalink/link_create.c, ilalink/link_main.c, include/il_linker.h:
	add the "-fculture" option to the compiler and linker.

2004-08-06  Gopal V  <gopalv82@yahoo.com>

	* support/interlocked_x86.h: Fix SSE2 checks to use __SSE2__ instead
	of CONFIG_X86_SSE2.

	* configure.in, engine/Makefile.am: Add checks for interrupt.h and 
	add ../support to the include paths for no-tools build.

	* configure.in: remove check for interrupt.h as it is an internal
	file.

2004-08-05  Rhys Weatherley  <rweather@southern-storm.com.au>

	* doc/pnet_faq.html: update the FAQ.

2004-08-02  Rhys Weatherley  <rweather@southern-storm.com.au>

	* csant/csant_cscc.c, doc/pnettools.texi, ilalink/ilalink.1,
	ilalink/link_create.c, ilalink/link_main.c, image/image.h,
	image/writer.c, include/il_linker.h, include/il_writer.h:
	add the "-fmetadata-version" option to the linker, to set the
	version string in the metadata header to something appropriate;
	if not present, infer the version string from that on "mscorlib".

2004-07-30  Gopal V  <gopalv82@yahoo.com>

	* ilasm/Makefile.am, cscc/bf/Makefile.am, cscc/c/Makefile.am, 
	cscc/csharp/Makefile.am, cscc/java/Makefile.am, cscc/vb/Makefile.am:
	Mark grammar.c files as dependencies for the scanner.l files to 
	allow proper parallel builds.

2004-07-30  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/cvm_dasm.c: add missing opcode names.

2004-07-29  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/image.h, image/meta_build.c, image/meta_index.c,
	image/meta_writer.c, image/program.h, include/il_meta.h:
	fix some problems with loading tokens related to Generics
	that prevented Portable.NET from reading assemblies compiled
	with .NET Framework SDK 2.0 (the SDK format is different
	from that used by Gyro).

2004-07-26  Gopal V  <gopalv82@yahoo.com>

	* codegen/cg_lvalue.tc: fix indexer stores into structs to use
	addresses rather than value (bug #9741).

2004-07-23  Gopal V  <gopalv82@yahoo.com>

	* cscc/csharp/cs_lookup.c: Ambigous lookups should not be reported
	unless reportErrors is true.

2004-07-22  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_stdio.c,
	include/il_console.h, support/console.c: new internalcalls for
	the extended console.

2004-07-20  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/writer.c: change the metadata version to "v2.0.40607"
	to be consistent with .NET Framework SDK 2.0.

2004-07-19  Gopal V  <gopalv82@yahoo.com>

	* cscc/csharp/cs_grammar.y: Implement a quick fix to display
	error messages for 'private' modifiers in explicit interface
	implementations.

	* cscc/csharp/cs_oper.tc: Check for event types before performing
	add/remove operations.

2004-07-19  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/cs_main.c, cscc/cscc.1, cscc/csharp/cs_gather.c,
	cscc/csharp/cs_internal.h, cscc/csharp/cs_modifiers.c,
	doc/pnettools.texi: add the "-fhidebysig" and "-fhidebyname"
	options to cscc; the latter can be used to enable VB-style
	method attributes in C# code.

2004-07-17  Gopal V  <gopalv82@yahoo.com>

	* cscc/csharp/cs_grammar.y: Fix bug #9674 , do while statements have to
	have a terminating ';'.

2004-07-16  Richard Baumann  <biochem333@nyc.rr.com>

	* ilgac/ilgac.1: fix a typo.

	* configure.in, libffi/configure.in, libgc/os_dep.c,
	libgc/include/private/gcconfig.h, support/thr_choose.h,
	support/thread.c: apply patch #3164 for OpenBSD support.

2004-07-12  Klaus Treichel  <ktreichel@web.de>

	* HACKING: updated broken links, instructions to get current cvs version
	and removed reference to daily snapshots.

2004-07-10  Gopal V  <gopalv82@yahoo.com>

	* image/meta_types.c: Resolve classes in TypeAssignCompatible to 
	ensure the inheritance hierarchy is created before comparison.

	* engine/heap.c: Make sure the class is resolved before 
	being allocating objects.

2004-07-09  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/lib_attrs.c: recognise "OptionalAttribute" and turn it
	into the "[opt]" flag on parameters.

	* image/lib_attrs.c: recognise "DefaultValueAttribute" on parameters
	and turn it into a metadata constant value.

2004-07-08  Rhys Weatherley  <rweather@southern-storm.com.au>

	* codegen/cg_decls.tc, codegen/cg_gen.h, codegen/cg_output.c,
	cscc/cs_main.c, cscc/common/cc_main.c, cscc/common/cc_main.h,
	cscc/csharp/cs_decls.tc, cscc/csharp/cs_defs.tc,
	cscc/csharp/cs_grammar.y: perform semantic analysis and code
	generation on standalone attributes that aren't attached
	to a class.

	* ilalink/link_create.c, ilalink/link_image.c, ilalink/link_main.c,
	include/il_linker.h: use the version number in the "AssemblyVersion"
	attribute if the user did not supply "-fassembly-version".

	* engine/cvmc_gen.h: slight modification to _CVM_PTR to work around a
	warning from gcc 3.4.x.

	* cscc/csharp/cs_attrs.c, engine/lib_reflect.c, ildasm/ildasm_attrs.c,
	image/ser_parse.c, image/ser_writer.c: fix a bug related to the
	serialization of null strings in attribute blocks.

	* support/cmdline.c: remove trailing spaces and TAB's from lines
	within a response file.

2004-07-07  Richard Baumann  <biochem333@nyc.rr.com>

	* engine/lib_gc.c: fix _IL_GCHandle_GCAddrOfPinnedObject behavior
	for arrays (patch to bug #9542 by leppie).

2004-07-05  Klaus Treichel  <ktreichel@web.de>

	* support/time.c: fix problem with daylight savings.
	(patch #3180 by David Logan)

2004-06-21  Gopal V  <gopalv82@yahoo.com>

	* cscc/c/c_lvalue.tc: Return the field type during ILNode_Prepare for
	Member access because it is used for the Cast during GenDiscard of 
	Assign expressions.

2004-06-21  Thong Nguyen  <tum@veridicus.com>

	* support/wait_mutex.c: Fixed ownedMutexesCount not being decremented
	when a mutex is released.
	
2004-06-19  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/pinvoke.c: remove ILFreeNativeString, because it needs a
	rethink when pinvoke is rewritten from scratch shortly.

2004-06-17  Thong Nguyen  <tum@veridicus.com>

	* support/interrupt.h, support/interrupt_posix.c: Added interrupt
	and interrupt context support for FreeBSD.

	* support/time.c: Added ILGetSinceRebootTime implementation for
	FreeBSD.
	
	* configure.in: Added WINLIBS subst so we can include ole32 and
	other windows specific libraries that we need to link with.
	
	* engine/Makefile.am: Added WINLIBS to libraries list.
	
	* engine/pinvoke.c: Made it so that strings returned by pinvoked
	methods are automatically freed.
	
2004-06-18  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_thread.c: Added much faster implementation of the
	Thread.VolatileRead/Write functions.
	
	* support/interlocked_x86.h: Added improved ILInterruptMemoryBarrier
	implementation for X86 systems.
	
	* engine/convert.c: Added support for returning the dll name when
	a p/invoked DLL isn't found.
	
	* engine/engine.h, engine/cvm_ptr.c: Added _ILSystemObjectSetField
	function.
	
	* engine/lib_monitor.c: Fixed spelling mistakes in comments.
	
	* include/il_engine.h, engine/lookup.c: Added 
	ILExecThreadLookupFieldFromClasss function.

2004-06-18  Gopal V  <gopalv82@yahoo.com>

	* engine/int_table.c, engine/int_proto.h, engine/lib_socket.c:
	Changes to reflect the change of internal calls from Dns to DnsMethods.

	* engine/int_table.c, engine/int_proto.h, engine/lib_socket.c,
	support/dns.c, include/il_sysio.h, configure.in : Wrap gethostname() 
	in a support ILGetHostName() wrapper, add detection code and implement
	InternalGetHostName() internal call.

	* support/socket.c, configure.in: fix SetSocketOption and put 
	#warning directives for the function not available cases. (bug #9326).

2004-06-18  Klaus Treichel  <ktreichel@web.de>

	* clrwrap/Makefile.am, csant/Makefile.am, csant/Makefile.am,
	cscc/Makefile.am, csdoc/Makefile.am, ilalink/Makefile.am,
	ilasm/Makefile.am, ildasm/Makefile.am, ildd/Makefile.am,
	ilfind/Makefile.am, ilgac/Makefile.am, ilheader/Makefile.am,
	ilnative/Makefile.am, ilsize/Makefile.am, resgen/Makefile.am,
	tests/Makefile.am: add missing library $(GCLIBS) to LDADD

2004-06-18  Thong Nguyen  <tum@veridicus.com>

	* configure.in: Added check for sys/sysinfo.h and sys/sysctl.h.
	
	* support/time.h: Added implementation of ILGetSinceRebootTime
	for Linux.
	
	* support/thr_defs.h, support/wakeup.c: Made wakeups to use
	hashtables instead of lists to store currently owned mutexes.
	
	* support/wait_mutex.c: Added fast hashtable support code
	for wakeup owned mutexes.
	
	* engine/cvm_inline.c: Fixed comments so that CVM doc generation
	works again.
	
2004-06-18  Thong Nguyen  <tum@veridicus.com>

	* include/il_thread.h: Changed Interrupt handling functions to
	be more generic.  Added 2 more interrupt types (divide by zero
	and overflow).

	* engine/cvm.c: Added macros to support overflow & divide by
	zero interrupts.  Removed interrupt handling support on systems
	where interrupt contexts aren't available (i.e. removed
	support for saving exception state to the thread object).
	
	* engine/cvm_arith.c: Replaced overflow & divide by zero
	with appropriate replacement macros from cvm.c.
	
	* engine/cvm_call.c: Cleared thread->thrownException after call
	to ILThreadSelfAborting().  Added many more "managed barrier"
	gauards by inserting BEGIN/END_NATIVE_CALL calls around
	CVM private native calls.
	
	* engine/cvm_except.c: Added _ILSystemExceptionWithClass call.
	
	* engine/cvm_except.c, engine/cvm_stack.c:
	Removed EXCEPT_BACKUP calls since they are no longer supported.
	
	* engine/cvm_interrupt.c: Added support for overflow & divide
	by zero interrupts.
	
	* engine/engine.h: Added checks for overflow & divide by zero
	support.
	
	* engine/lib_reflect.c: Set objectType to 0 to remove erroneous
	"local used without being initialized" warning.
	
	* engine/thread.c: Added support for overflow & divide by zero
	interrupts.  Moved interrupt registration code to
	ILThreadSetExecContext & friends so that threads never registered
	for managed execution can still get interrupts.
	
	* engine/unroll_arith.c: Added integer overflow & divide by zero
	check elimination code.
		
	* support/interlocked_any.h, support/interlocked_x86.h: Added 
	ILInterlockedMemoryBarrier implementation.
	
	* support/interrupt.c: Modified interrupt registration functions
	to use new generic arguments.
	
	* support/interupt.h, support/interrupt_posix.c,
	support/interrupt_win32.c: Added checks * support for divide by
	zero and overflow interrupts.
	
	* support/thr_defs.h, support/thread.c: Made sure interrupt handler
	field of threads is included onl if interrupts are supported.	

2004-06-17  Thong Nguyen  <tum@veridicus.com>

	* libgc/win32_threads.c, libgc/include/gc.h: Removed
	WINAPI/stdcall from GC_CreateThread.
	
	* support/interrupt.h: Disabled support for interrupt
	based illegal memory access handling on CYGWIN builds because
	SetUnhandledExceptionFilter doesn't work on CYGWIN.
	Could possibly use sigaction for CYGWIN builds once its fully
	supported (end of 2004 aparently).
	
	* libffi/src/x86/win32.S: Changed ffi_prep_args to
	_ffi_prep_args so that it links properly on VC++ as well as gcc.

	* include/il_values: Fixed IL_MIN_INT64 & IL_MAX_IN64 definitions
	for windows/gcc builds.
	
	* support/getcwd.c: Included direct.h for windows builds so
	that getcwd is properly prototyped.
	
	* configure.in: Added check for direct.h
		
2004-06-16  Thong Nguyen  <tum@veridicus.com>

	* engine/cvm_ptr.c: Removed null check elimination in COP_CKNULL.
	
	* engine/unroll_ptr.c: Unrolled COP_CKNULL opcode.

	* support/wait_mutex.c: Removed some unused locals.
	
	* support/interrupt_win32.c, support/interrupt_posix.c: Tidied
	up formatting, fixed signal() handling for posix.
	
	* support/thr_choose.h: Include system thread headers even if
	boehm gc is used because it doesn't always include them.
	
	* support/w32_defs.c, support/w32_defs.h: Removed windows.h 
	include because it can override boehms CreateThread macros.

	* libgc/include/gc.h: Enabled GC_CreateThread prototype decl
	on cygwin builds.

	* engine/engine.h, engine/thread.c: Removed
	_ILThreadExecuteOn/_ILThreadUnexecuteOn.  Added 
	ILThreadExecContext struct and _ILThreadSetExecContext,
	_ILThreadSaveExecContext, _ILThreadRestoreExecContext,
	_ILThreadClearExecContext.
	
2004-06-14  Thong Nguyen  <tum@veridicus.com>

	* support/hb_gc.c: Fix ILGCDisableFinalizers not atomically
	checking existing disable status.
	
	* configure.in: Added check for sys/ucontext.h, exit, _exit,
	siglongjmp and sigsetjmp.
	
	* include/il_thread.h: Added ILInterruptContext and added it
	as the only argument for ILIllegalMemoryAccessHandler.
	
	* support/interrupt.c: Updated formatting.
	
	* support/interrupt.h: Added implementation of ILInterruptContext
	for x86 and generic platforms.  Added support for posix systems.
	
	* support/interrupt_posix.c: Added interrupt support for posix
	systems using sigaction or signal if availab.e  Added support
	for x86 interrupt register contexts.
	
	* support/interrupt_win32.c: Added support for x86 interrupt
	register contexts.
	
	* engine/cvm.c: Added support for interrupt based null pointer
	checks.  Added macros for saving & restoring correct state needed
	after synchronous interrupts using either interrupt contexts
	or the thread object.  
	
	* engine/cvm_interrupt.c: Implementation of code required to setup
	interrupt based null pointer handling inside ILCVMInterpreter.
	
	* engine/cvm_call.c: Removed prefixThrowException label.
	
	* engine/cvm_call.c, engine/cvm_except.c, engine/cvm_inline.c,
	engine/cvm_ptr.c, engine/cvm_stack.c, engine/unroll_ptr.c:
	Changed mull checks so they use the  new 
	BEGIN_NULL_CHECK/END_NULL_CHECK macros which allows the null 
	checks to be eliminated.  Added calls to backup exception state 
	at vital points required for interrupt based exception handling.
	
	* engine/engine.h: Added IL_USE_INTERRUPT_BASED_NULL_POINTER_CHECKS
	definition.  Fixed definitions of ILExecThreadAbortThread and
	ILExecThreadSuspendThread.  Added interruptContext to ILExecThread.
	
	* engine/thread.c: Added illegal memory access interrupt handler
	for NullReferenceExceptions.	
	
2004-06-14  Thong Nguyen  <tum@veridicus.com>

	* tests/test_thread.c: Changed thread_other_object test
	to account for new semantics for ILThread objects and
	start args.
	
	* configure.in: Added checks for setjmp.h, setjmp,
	longjmp, signal, sigaction, abort, exit and _exit.

	* include/il_thread.h: Added prototypes for new interrupt
	functions.  Changed ILThread's objectArg to startArg.
	Added a general purpose monitor to ILThread.
	
	* include/il_engine.h: Removed ILExecThreadFromThread
	and ILExecThreadGetClrThread because they are unsafe.
	Added ILExecThreadCurrentClrThread.
		
	* support/Makefile.am: Added interrupt.c, interrupt_posix.c
	and interrupt_win32.c.
	
	* support/interrupt.c, support/interrupt.h, interrupt_posix.c,
	support/interrupt_win32.c: First check-in of interrupt/signal
	support.
	
	* support/thr_defs.h: Added ownedMutexes list to _ILWakeup.
	Added objectArg/startArg fields to ILThread.  Changed
	IL_WAIT_EVENT value from 0x1004 to 0x800 (non mutex).
	Added prototypes for interrupt subsystem init/deinit.
	
	* support/thread.c: Added interrupt subsystem init/deinit
	calls.  Changed startArg/objectArg naming.  Added
	ILThreadGetMonitor.
	
	* support/wait_mutex.c: Added support for storing/maintaining
	owned mutex lists for each wakeup/thread.
	
	* support/wakeup.c: Made wakeups release all mutexes they
	still own before they destroy themselves.
	
	* engine/cvm_call.c: Changed CHECK_ABORT to CHECK_MANAGED_BARRIER
	and added support for thread suspends.
	
	* engine/engine.h, engine/thread.c: Added support for interrupts
	and thread suspends.  Added new safe point aware implementation 
	of  _ILExecThreadAbort and _ILExecThreadSuspend.  Added support
	for abandoning thread creation if the target process is unloading.
	
	* engine/heap.c: Changed call to ILExecThreadCreate to account
	for new arguments.
	
	* engine/lib_thread.c: Updated calls to ILExecThreadAbort to use
	new arguments.  Added new implementation _IL_Thread_Suspend.
	
	* engine/process.c: Simplified thread abort code in ILExecProcess
	destroy by preventing new threads from being created when an 
	ILExecProcess is unloading using the new process state flag.
	
2004-06-14  Thong Nguyen  <tum@veridicus.com>

	* support/wakeup.c: Changed ILWakeupSignal so that it indicates
	if the target wakeup was signalled or just had a limit count
	change.  This prevents a thread waiting inside WaitAll for handles
	a && b from blocking threads waiting inside WaitOne for handle
	a || b.
	
	* include/il_utils.h, support/queue.c: Moved definition of
	Queue structure to a private structure of queue.c
	
	* include/il_utils.h, support/list.c: Added support for general
	purpose lists and two implementations (SinglelyLinkedList
	& ArrayList).
	
2004-06-13  Thong Nguyen  <tum@veridicus.com>

	* support/thread.c: Added supporting for threads that need to
	destroy themselves when they exit (The public ILThreadDestroy
	API still doesn't allow threads to destroy themselves).
	Allow ILThreadSuspend to be aborted.
	Made ILThreadAbort resume the thread if has suspended.
	Made _ILThreadSuspendRequest flag itself as IL_TS_SUSPENDED_SELF
	so that it will be correctly woken up when it is resumed.
	
2004-06-12  Thong Nguyen  <tum@veridicus.com>

	* include/il_gc.h, support/def_gc.c, support/hb_gc.c: Added timeout
	& return values to ILGCinvokeFinalizers & ILGCDisableFinalizers.
	
	* support/hb_gc: Tidy up finalization code.  Added support for
	running finalization on the main thread if there is only one thread
	(for performance).  Added support for interruption/abortion
	of ILGCInvokeFinalizers & ILCDisableFinalizers.
	
	* support/thr_defs.h, support/thread.c: Removed TerminateThread from
	ILThreadDestroy because it is unsafe and deferred destroying until
	the thread is actually finished.
	
	* support/w32_defs.h: Included windows.h.

	* engine/convert.c, engine/heap.c: Updated calls to
	ILGCDisableFinalizers & ILGCInvokeFinalizers with timeouts.
	
	* engine/cvm_call.c: Refactored CHECK_ABORT so it uses the new
	_ILExecThreadSelfAborting function.
	
	* engine/engine.h, engine/thread.c: Added _ILexecThreadAbort,
	_ILExecThreadSelfAborting, _ILExecThreadHandleWaitResult.
	
	* engine/cvm.h, engine/cvm_lengths.c: Added lengths for new CVM
	instructions.
	
	* engine/lib_gc.c: Added support for interruption/abortion of
	GC.InvokeFinalizers.
	
	* engine/lib_monitor.c, engine/lib_thread.c: Updated calls to
	_ILHandleWaitResult/_ILExecThreadHandleWaitResult.
	
	* engine/lib_thread.c: Updated abort implementation to use
	new functions inside thread.c.
	
	* engine/process.c: Rewrote ILExecThreadDestroy to be cleaner
	and handle long running finalizations.
	
2004-06-12  Llewellyn Pritchard  <leppie@ataris.co.za>

	* ilalink/link_res.c, image/misc_token.c, image/meta_build.c,
	include/il_program.h, ilasm/ilasm_grammar.y, ilasm/ilasm_output.c:
	Fix resource linker bug #9272 (patch #3125, Gopal).

2004-06-11  Gopal V  <gopalv82@yahoo.com>

	* cscc/csharp/cs_oper.tc: Handle AssignAdd operations between Objects and
	Strings as Concats.

	* cscc/csharp/cs_stmt.tc: Reduce if over a constant expression before 
	doing the flow analysis. (fix bug #9291)

2004-06-10  Gopal V  <gopalv82@yahoo.com>

	* cscc/csharp/cs_lvalue.tc: Use CSSemSetConstant instead of CSSemSetRValue
	for local consts. (fix bug #9273)

	* engine/verify_call.c: Pop the this parameter if the inlined method
	does a constant store.

2004-06-09  Gopal V  <gopalv82@yahoo.com>

	* engine/verify_call.c: Load the user strings from the image of
	the inlined method to inline ldstr.

2004-06-09  Thong Nguyen <tum@veridicus.com>

	* include/il_coder.h: Added GetFlags to ILCoder.
	
	* engine/cvm.h: Added new opcodes for inlining Math.* functions.
	
	* engine/cvm_inline.c: Added implementation of inlined Math functions.
	
	* engine/cvmc.c, engine/null_coder.c: Added CVMCoder_GetFlags.
	
	* engine/cvmc_call.c: Added code generation for inlined Math
	functions.
	
	* engine/cvmc_setup.c: Added CVM implementation of Coder_GetFlags.
	
	* engine/ilrun.c: Added "--stats"/"-Z" command line option.

	* engine/verify.c: Added coderFlags cache variable.
		
	* engine/verify_call.c: Added support for inlining simple properties
	and methods that return a field or constant value.  Added support
	for inlining math functions.
	
2004-06-08  Gopal V  <gopalv82@yahoo.com>

	* codegen/cg_coerce.c: Coerce the arguments to the conversion methods
	while creating UserConversion nodes.

	* cscc/c/c_const.tc: Add ILNode_GetType for CString and CWString so
	that they return UnmanagedPtr instead of String machine types.

	* cscc/csharp/cs_gather.c, codegen/cg_nodes.tc: Track the nested class
	creation order in a seperate list in each parent class definition and
	create members in the proper order.

	* cscc/csharp/cs_cast.tc: Fix stupid typo where "69" is passed where
	a "1" is expected.

	* cscc/csharp/cs_cast.c: Allow null to be casted to System.IntPtr even
	outside unsafe mode (fixes bug #8207)

	* codegen/cg_lvalue.tc: Use PrepareForThis access for indexers on
	valuetypes as well.

2004-06-07  Gopal V  <gopalv82@yahoo.com>

	* cscc/csharp/cs_lvalue.tc: Fix type bug in constant field accesses 
	from enums.

2004-06-02  Thong Nguyen  <tum@veridicus.com>

	* image/class.c: Change ILClassImplements to return true
	if the class and interface are the same (i.e. interfaces
	implement themselves).

2004-06-02  Gopal V  <gopalv82@yahoo.com>

	* cscc/csharp/cs_lvalue.tc: Add line number information for ArgumentVar
	and RefArgumentVar nodes created during SemanticAnalysis.

2004-06-02  Thong Nguyen  <tum@veridicus.com>

	* support/hb_gc.c: Changed GCNotifyFinalize to not wait for
	finalizers.  If GCNotifyFinalize is called by the allocator,
	it should not block the allocating thread while waiting for
	finalizers as that will cause deadlock if the allocating thread
	holds locks the finalizer thread requires.
	
	* image/class.c: Fix CompareUnicode not working properly when
	ignoreCase is true.
	
	* image/java_writer.c: Remove pointer on void * to remove
	compiler warning.
	
2004-05-30  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_monitor.c: Removed value type checks for Monitor.Enter.
	
	* engine/verify.c: Added checks for synchronized methods and
	generated appropriate exception code.
	
	* engine/verify_call.c, engine/verify_except.c: Generated code
	for exiting synchronized methods on throw & return.	
	
2004-05-30  Gopal V  <gopalv82@yahoo.com>

	* engine/verify_branch.c: Fix compilation for 64bit platforms 
	(patch #3109, from Andrzej Dopierala <undefine@pld-linux.org>)

	* engine/lib_reflect.c: Implement Assembly.GetExportedTypes()
	partially.

2004-05-29  Gopal V  <gopalv82@yahoo.com>

	* engine/lib_reflect.c: Implement Module.GetTypes() for assembly
	modules (bug #9085).

	* engine/method_cache.c: fix IL offsets to be obtained if the offset
	provided matches with the native offset provided. (bug #9151)

2004-05-29  Rhys Weatherley  <rweather@southern-storm.com.au>

	* NEWS, configure.in: update version for the "0.6.6" release.

	* configure.in: update working version to "0.6.7".

2004-05-28  Thong Nguyen <tim@veridicus.com>

	* engine/lib_time.c: Fixed overflow/underflow by 1000 bug in
	GetUpTime.  Made sure that calculated 64-bit value can't be 
	over IL_MAX_INT32 to prevent negative values when casting 
	back to ILInt32.
	
	* support/time.c: Implemented ILGetSinceRebootTime for windows
	systems.
	
	* engine/verify.c, engine/verify_except.c: Add currentException
	declaration to top of verify method.  Verify that a IL_OP_ENDFINALLY
	occurs without a finally clause.
	
2004-05-28  Thong Nguyen <tum@veridicus.com>

	* include/engine.h: Changed ILExecInit to return an error code
	and defined some error codes.
	Added ILExecThreadIsThreadAbortException as an exported engine
	function for use by embedders when printing out exceptions.

	* engine/engine.h: Removed definition of _ILExecThreadITAE.
	Added extern declaration of globalTraceMutex.

	* engine/cvm.c: Added definition of globalTraceMutex.
		
	* engine/cvm_call.c: Changed COP_PREFIX_PROFILE_COUNT to use
	ILInterlockedIncrement to increment method count.
	Put locks around COP_PREFIX_TRACE_IN and COP_PREFIX_TRACE_OUT.
	
	* engine/ilrun.c, lib_thread.c, throw.c, cvm_except.c: Updated 
	_ILExecThreadIsThreadAbortException references because of name
	change.
	
	* engine/ilrun.c: Added to check to make sure ILExecInit suceeded.
	
	* engine/process.c: Added globalTraceMutex initialization
	to ILExecInit and deinitialization to ILExecDeinit.
	
	* libgc/win32_threads.c: Made GC_CreateThread CYGWIN wrapper
	faster by removing need to dynamically allocate/free memory.
	
2004-05-26  Thong Nguyen <tum@veridicus.com>

	* support/dir.c: Fix for Win32 version of ILCloseDir (return
	1 rather than 0 on success).
	
	* support/file.c: Set file mode to binary mode on calls
	to ILSysIOOpenFile if system is windows.  Windows defaults
	to text mode (unbelievable!) causing files to randomly not 
	open properly.

	* support/w32_defs.h: Include <windows.h> cause libgc
	no longer does this for us.
	
	* libgc/***: Checked libgc 6.3alpha6.
	
	* libgc/win32_threads.c: Added CreateThread wrapper around
	pthread_create for CYGWIN environments so that we can
	safely use CreateThread when building under CYGWIN.
	Removed GC allocater calls when threads are created and
	used malloc/free instead.  Using the GC allocator while
	creating a thread when using CYGWIN causes deadlocks.
	
	* engine/monitor.c: Fix "lockword"/"lockWord" casing error on line 211.
		
2004-05-26  Thong Nguyen <tum@veridicus.com>

	* Most changes are for supporting Thread.Abort.

	* include/il_program.h, image/member.c: Added ptrUserData
	field to ILException structure.
	
	* include/il_coder.h: Added endCatchFinallyClause and
	finally clause to ILCoder structure.
	
	* include/il_engine.h: Added prototypes for
	ILExecThreadFromThread, ILExecThreadGetClrThread
	and ILExecThreadThrow.
	
	* include/il_thread.h, support/thread.c: Added prototype
	and implementation of ILThreadIsAbortRequested.

	* engine/cvm.h: Added COP_PREFIX_START_CATCH,
	COP_PREFIX_START_FINALLY and COP_PREFIX_PROPAGATE_ABORT.
	
	* engine/cvm_call.c: Added CHECK_ABORT, BEGIN_NATIVE_CALL
	and END_NATIVE_CALL macros.  The *NATIVE_CALL functions
	configurestate to allow the runtime to figure out if it is
	running managed or unamnaged code.  CHECK_ABORT is used to
	check for aborts after a function call so aborts can be
	initiated at most points in a thread's life.
	
	* engine/cvm_except.c: Added cases for COP_PREFIX_START_CATCH,
	COP_PREFIX_START_FINALLY and COP_PREFIX_PROPAGATE_ABORT.
	
	* engine/cvmc.c, engine/cvmc_except.c: Added
	CVMCoder_EndCatchFinally and CVMCoder_Finally function entries
	and implementation.  Added generation of new COP_PREFIX_*
	instructions.	 
	
	* engine/engine.h: Added abortRequested, runningManagedCode,
	currentException, threadAbortException, abortHandlerPC and
	abortHandlerNumFrames fields to ILExecThread.
	
	* engine/engine.h, engine/thread.c, engine/throw.c: Removed
	_ILGetCurrentClrThread and added ILExecThreadGetClrThread.
	Removed ILEXecThreadThrowThreadAbortException and added
	_ILExecThreadNewThreadAbortExceptio
	and _ILExecThreadIsThreadAbortException.
	
	* engine/ilrun.c, engine/lib_thread.c: Allow threads to display
	exceptions even if the thread is aborting but only if it isn't a
	ThreadAbortException.
	
	* engine/lib_defs.h: Added createdFromManagedCode field
	to System_Thread.
	
	* engine/lib_thread.c: Changed CLR thread object finalization
	to not free up the underlying thread unless the thread
	was created from within managed code.
	Reimplemented Thread.Abort internal call -- made thread safe
	to aborts to be safely called on dead/dying threads.
	
	* engine/null_coder.c: Added null definitions for Coder_Finally
	and Coder_EndCatchFinally.
	
	* engine/verify_except.c: Changed coder JSR calls to Finally
	calls.  Added EndCatchFinally call on IL_OP_LEAVE and
	IL_OP_ENDFINALLY.
	
2004-05-24  Norbert Bollow  <nb@SoftwareEconomics.biz>

	* configure.in, engine/Makefile.am, engine/cvm.c: fixes to
	make ilrun build with gcc 3.4.0

2004-05-24  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/verify_except.c: reverse OutputExceptionTable patch
	as Tum discovered problems with it.

	* engine/verify_except.c (OutputExceptionTable): fix the nested
	try/catch bug (#8838) properly.

2004-05-23  Jonas Printzen  <jonas@printzen.net>

	* engine/verify_except.c: change OutputExceptionTable() so that 
	nested try/catch don't loose outer try/catch. Also removes 
	duplication of try-handlers when multiple catch exist for same 
	try region. (patch #3059, Gopal)
	
2004-05-21  Gopal V  <gopalv82@yahoo.com>

	* engine/process.c: Ensure that mis-compiled libraries cannot 
	divert the entry point , has to be in an .exe not a .dll.

2004-05-19  Thong Nguyen <tum@veridicus.com

	* support/def_gc.c: Fixed function def for ILGCCreateTypeDescriptor.
	
	* support/thread.c: Prevent ILThreadDestroy from destroying the
	main thread.
	
2004-05-18  Gopal V  <gopalv82@yahoo.com>

	* codegen/cg_gen.h, cscc/csharp/cs_invoke.tc, 
	cscc/csharp/cs_lvalue.tc: Hack up the instance vs static method 
	disambiguation where a property with the same name as a type exists,
	using an ILGenInfo flag. (bug #8629)

2004-05-18  Gopal V  <gopalv82@yahoo.com>

	* engine/lib_type.c: Include interfaces inherited by a type in
	Type.GetInterfaces().

2004-05-18  Thong Nguyen  <tum@veridicus.com>

	* include/il_engine.h: Added prototype for ILExecThreadBoxNoValue.
	
	* engine/box.c: Added implementation of ILExecThreadBoxNoValue.
	
	* engine/lib_reflect.c: Added support for dynamically invoking
	methods with out/ref params (allowing null params to be passed
	to functions with out/ref value types) (InvokeMethod).
	
	* image/meta_types.c: Added ILTypeIsSystemClass function.
	Modified ILTypeGetDelegateBeginInvokeMethod and
	ILTypeGetDelegateEndInvokeMethod to verify the parameters
	against the delegate Invoke method.
	
	* include/il_types.h: Added prototype for ILTypeIsSystemClass.
	
	* engine/lib_delegate.c: Implemented SetOutParams internal
	call.  Added support for returning out/ref parameters in
	Delegate_EndInvoke.
	
	* engine/cvm_call.c: Modified _ILPackVarArgs to recognise and 
	properly pack byref arguments.
	
	* engine/lib_reflect.c: Allow null args to be passed for value-type
	params.
	
2004-05-17  Russell Stuart  <russell-savannah@stuart.id.au>

	* pnet.spec.in: try and kludge my way around "rpm" hanging
	when the info files are installed / uninstalled.

2004-05-15  Gopal V  <gopalv82@yahoo.com>

	* engine/lib_reflect.c , engine/int_proto.h, engine/int_table.c:
	Add the ClrConstructor::InvokeOnEmpty() internal call.

2004-05-14  Richard Baumann  <biochem333@nyc.rr.com>

	* cscc/csharp/cs_gather.c: modify the access modifier checks for
	overrides to allow protected overrides of protected internal virtuals
	if, and only if, the derived class is in a separate assembly from the
	base class.

	* cscc/.cvsignore, tests/.cvsignore: ignore more items generated by
	the build.

2004-05-15  Thong Nguyen  <tum@veridicus.com>

	* include/il_engine.h: Added prototype for ILExecProcessUnload.
	Documented semantics for ILExecProcessDestroy and
	ILExecProcessUnload.
	
	* engine/cvm_call.c: Renamed StackWordsForType to
	_ILStackWordsForType and made it public.
	
	* engine/engine.h: Added prototype for _ILStackWordsForType.
	
	* engine/lib_delegate.c: Added more error checking and removed
	assumptions about stack placement that prevented async method
	calls from working with non-word sized values.
	
	* engine/process.c: Modified ILExecProcessDestroy() to destroy
	all threads including the main thread (if it isn't the finalizer
	thread) before calling finalizers so that all references on the 
	CVM stack will be removed.  On systems where a user thread
	can't be destroyed because it's shared with the finalizer thread,
	the CVM stack is cleared instead.
	Added null implementation for ILExecProcessUnload().
	
	* engine/monitor.c: Clear lockwords if reusing monitor entries
	from dead objects.
		
2004-05-14  Thong Nguyen  <tum@veridicus.com>

	* image/meta_types.c: Added ILTypeGetDelegateBeginInvokeMethod
	and ILTypeGetDelegateEndInvokeMethod.
	
	* include/il_types.h: Added prototypes for
	ILTypeGetDelegateBeginInvokeMethod and
	ILTypeGetDelegateEndInvokeMethod.
	
	* engine/engine.h: Added prototype for _ILPackVarArgs.
	
	* engine/cvm_call.c: Changed PackVarArgs to _ILPackVarArgs
	and made it accessible from other modules.
	
	* engine/lib_delegate.c: Added internal implementation
	of Delegate.BeginInvoke and Delegate.EndInvoke.  Refactored
	some code and added InternalFuncs table to reduce code
	duplication between Delegate.Invoke and Delegate.Begin/EndInvoke.
	UPDATE: Fixed incorrect unboxing of reference return values/
	
2004-05-12  Thong Nguyen  <tum@veridicus.com>

	* engine/thread.c: Change ILThreadExecuteOn so that it
	associates ILExecThreads with ILThreads both ways.
	Added ILThreadUnexecuteOn function as the opposing
	complement of ILThreadExecteOn.
	
	* engine/engine.h: Added prototype for ILThreadUnexecteOn.
	
	* engine/heap.c: Moved Finalize method lookup code
	from _ILFinalizeObject into a new method (FindFinalizMethod).
	Fixed _ILFinalizeObject so that it properly associates
	the finalizer thread with the engine thread that the finalizer
	thread uses for its execution context.
	
2004-05-10  Thong Nguyen  <tum@veridicus.com>

	* support/interlocked_x86.h:  Make ILInterlockedDecrement
	return decremented value not incremented value.
	
	* engine/lib_monitor.c:  Fixed some spelling mistakes in
	the documentation.  Removed some benign test code.
	
	* support/no_defs.h: Add definition for _ILThreadYield.
	
	* support/thread.c: Fixed ILThreadDestroy decrementing
	thread count incorrectly if a thread had been created but
	not started.
	
	* tests/test_thread.c: Changed background thread count check
	to allow 0 (not just 1) because GC thread is created only when
	needed.  Changed thread_sleep_interrupt to check for
	return value of IL_WAIT_INTERRUPTED instead of 0.
	
2004-05-10  Gopal V  <gopalv82@yahoo.com>

	* support/interlocked.h : Remove CRLFs from file.

2004-05-10  Thong Nguyen  <tum@veridicus.com>

	* profiles/full: Made full profile use standard locks.
		
	* profiles/full-tl: New full profile with thin-locks.
	
	* profiles/compact: Made compact profile use thin-locks.

	* profiles/compact-fp: Made compact-fp profile use thin-locks.
	
	* profiles/kernel: Made kernel profile use thin-locks.

	* profiles/kernel-fp: Made kernel-fp profile use thin-locks.
	
	* include/lib_gc.h: Added prototypes for ILGCCreateTypeDescriptor
	and ILGCAllocExplicitlyTyped.
	
	* include/il_thread.h: Added prototype for ILThreadSelfAborting.
	Added IL_JOIN_UNSTARTED const.  Added prototype of ILThreadYield.
	Added consts for IL_WAITMUTEX_RELEASE results.  Removed protypes
	for ILWaitMonitorSpeculativeLeave, ILWaitMonitorCompleteLeave,
	ILWaitMonitorCanClose.

	* engine/lib_monitor: Moved implementation of internal calls
	for Monitor from lib_thread.c to lib_monitor.c.
	Added long comment on how the monitor algorithms work.
	Refactored a lot of code for simplification and naming consistancy.
	Fixed monitor leak when monitors are entered but never exited
	before an object is collected.
	Simplified algorithm by allocating monitors on the GC-heap.
	Removed all globals locks on the critical path and many
	global locks on less critical paths.
	Made lib_monitor.c aware of some support/ structures for
	additional speed.
	Modified standard algorithm to support fast releases.
	Modified standard algorithm to support fast aquires for
	recursive calls to enter.
	Standard algorithm is now ~20 times faster in uncontested
	and ~150 times faster in recursive lock cases.  Thin lock
	algorithm is now faster than the old standard algorithm.
	
	* engine/Makefile.am: Added lib_monitor.c to source list.
	Added libgc/include and support/ to the include files to the
	include file search path.
	
	* engine/dumpconfig.c:  Added reference to IL_CONFIG_THIN_LOCKS.
	Added parenthesis to call to ILHasThreads.
	  
	* engine/engine.h: Added freeMonitorCount to ILExecProcess.  Added
	gcTypeDescriptor field to ILClassPrivate.  Added references to
	IL_CONFIG_THIN_LOCKS.  Added definitions for ILExecMonitorProcess
 	Create and ILExecMonitorProcessDestroy.
 	
 	* engine/heap.c: Changed ILGCalloc(*) not allocate header space
 	if the block isn't going to be used for a managed type.  Made 
 	ILGCAllocAtomic use typed-allocation so that the monitor in the 
 	object header of primitive-type arrays will not be prematurely
 	collected.
 	
 	* engine/ilrun.c: Changed ilrun to only print exceptions at the
 	end if the thread isn't aborting.
 	
 	* engine/layout.c: Added initialization of default value for
 	gcTypeDescriptor.
 	
 	* engine/lib_defs.h: Tidied up lockword macros & definitions.
 	
 	* engine/lib_thread.c:  Moved implementation of internal calls for
 	System.Threading.Monitor to lib_monitor.c.  Rewrote abort handling
 	code.  Modified the Interlocked functions to use the new interlocked
 	definitions from pnet/support.  Changed SpinWait to use ILThreadYield.
 	
 	* engine/monitor.c: Fixed monitor allocation/retrieval bug in
 	thin-lock implementation.  Added monitor-specific initialization
 	procedures for ILExecProcess.
 	
	* engine/process.c: Removed monitor initialization routines and added
	calls to ILExecMonitorProcessCreate and ILExecMonitorProcessDestroy.
	
	* engine/thread.c: Remove freeMonitor deletion code because monitors
	are now freed by the garbage collector.
	
	* engine/throw.c: Prevent new exceptions from being thrown if the
	thread is currently aborting.
	
	* support/def_gc.c: Added implementation of ILGCCreateTypeDescriptor
	and ILGCAllocExplicitlyTyped.
	
	* support/hb_gc.c: Added implementation of ILGCCreateTypeDescriptor
	and ILGCAllocExplicitlyTyped.
	
	* support/pt_defs.h: Added implementation of ILThreadYield.
	
	* support/interlocked.h: Support for interlocked functions.
	
	* support/interlocked_any.h: Platform neutral implementation of
	interlocked functions.

	* support/interlocked_x86.h: x86 implementation of interlocked
	functions.

	* support/thread.c: Tidied and refactored code.  Added
	IL_TS_RUNNING state to threads that are running.  Made
	ILThreadWaitForForegoundThreads ignore interrupts/aborts.
	Added implementation of ILThreadSelfAborting.  Fixed ILThreadJoin
	so that it returns IL_JOIN_UNSTARTED if the thread hasn't been
	started.
	
	* support/w32_defs.h: Added implementation of ILThreadYield.
	
	* support/wait.c: Fixed bug where abort & interrupts could be
	detected twice.  Made the wait functions work even when the
	thread is aborting (made them respond differently to abort
	requests than they do to aborts underway).
	Added _ILWaitOneBackupInterruptsAndAborts implementation.
	
	* support/wait_mutex.c: Allow monitors to be destroyed even
	if they are owned.  Remove FastClaim.  Removed
	PrivateILWaitMutexRelease and moved simplified implementation
	into ILWaitMutexRelease.  Refactored ILWaitMonitorPulse
	and ILWaitMonitorPulseAll into one inline function
	(PrivateILWaitMonitorPulse.  Made ILWaitMonitorWait not
	return until it can reaquire the monitor even if it is
	interrupted or aborted.
	Removed implementation of ILWaitMonitorSpeculativeLeave,
	ILWaitMonitorCompleteLeave, ILWaitMonitorCanClose.
	
	* support/wait_mutex.h: Inline definitions for
	ILWaitMutexThreadOwns, ILWaitMutexFastEnter and
	ILMutexFastRelease.
	
2004-05-09  Gopal V  <gopalv82@yahoo.com>

	* engine/lib_object.c : Resolve classes before laying them out
	or converting them to ILObject . (fixes IsAssignableFrom problems).

2004-05-08  Russell Stuart  <russell-savannah@stuart.id.au>

	* codegen/cg_stmt.tc: make "goto case" emit a leave when
	in a try block. (bug #8834)

	* cscc/common/cc_preproc.c: ignore ';' after #endregion.
	(bug #8208)

2004-05-04  Gopal V  <gopalv82@yahoo.com>

	* engine/verify_call.c: Ignore signature comparisons for
	unsafe mode indirect calls

2004-05-04  Thong Nguyen <tum@veridicus.com>

	* support/thread.c: Changed ILThreadSleep to return
	abort/interrupt results.
	
	* include/il_thread.h: Documented new return values
	for ILThreadSleep.
	
	* engine/lib_thread.c: Made Thread.Sleep internal call
	aware of and handle interrupts and aborts.
	
2004-05-04  Thong Nguyen <tum@veridicus.com>

	* support/wait_mutex.c: Changed ILWaitMonitorFastClaim to
	check and respond to thread abort requests.
	
	* support/thr_defs.h: Added defs for EnterWait and LeaveWait.
	
	* support/wait.c: Made EnterWait and LeaveWait non-static,
	shared methods so that they can be used by wait_mutex.c.
	
	* support/wait_mutex.c: Made ILWaitMonitorWait change
	the state of the thread to waiting so that it can be aborted.

	* support/wait_mutex.c: Fixed bug in ILWaitMonitorWait
	which caused it to sometimes miss Pulse signals.
	Added support for ILWaitMonitorFastClaim.
	
	* support/wakeup.c: Added comment about how/when to set
	wakeup limits.
	
	* include/il_thread.h: Added definition for
	ILWaitMonitorFastClaim.
	
	* engine/lib_thread.c: Added optimisations for monitor.enter
	and monitor.leave.
	
	* support/thr_defs.h: Added waiters field to ILMonitor.
	
	* support/wait_mutex.c: Made ILWaitMonitorWait notify
	threads already tring to enter before waiting itself.
	Added code to prevent monitors from being closed if they
	are in a wait state (especially if they in between getting
	our of the wait queue and entering the ready queue).
	This fixes a race between ILWaitMonitorTryEnter and
	ILWaitMonitorWait.
	
	* engine/monitor.c: Initialize monitor->owner to null.
	
	* engine/lib_thread.c: Simplified and tidied a lot of
	monitor enter/leave/wait/pulse code by tracking the current
	monitor's owner thread.
	
2004-04-29  Gopal V <gopalv82@yahoo.com>

	* engine/lib_type.c: Type.GetType picks up types from the caller 
	method's image if not found in the system library.

	* engine/lib_type.c: Roll back last patch as it was the opposite
	order as per specification .

	* engine/lib_type.c: Load the referenced assembly if it is not
	already loaded in the context.

	* engine/lib_type.c: Override check should check for just identical
	types and then pick the latest.

2004-04-28  Ilyak Kasnacheev  <ilyak@office.uw.ru>

	* image/link.c : Remap a few more gtk# related dll references.
	(patch #2886, Gopal)

2004-04-26  Thong Nguyen <tum@veridicus.com>

	* engine/engine.h: Added owner field to ILExecMonitor.
	
	* engine/lib_thread.c: Added checking to ensure the current thread
	owns the monitor to Exit, Wait, Pulse and PulseAll.
	Added valid monitor checking to Monitor.Wait (fixes a null 
	derefernce when no monitor exists).
	
2004-04-24  Gopal V <gopalv82@yahoo.com>

	* cscc/c/c_lvalue.tc: Allow array access to happen on Managed
	arrays. (bug #8638)
	
	* engine/verify_branch.c: Treat I stack values the same as I4 or 
	I8 values depending on the native int size.

2004-04-22  Gopal V <gopalv82@yahoo.com>

	* cscc/cscc.c: Add a NULL sentinel while doing an AddArgument.
	(bug #8655)

2004-04-21  Russell Stuart  <russell-savannah@stuart.id.au>

	* engine/lib_dir.c: System.IO.Directory.GetFiles was throwing
	System.IO.IOException - interrupted system call.

2004-04-19  Gopal V <gopalv82@yahoo.com>

	* cscc/csharp/cs_lvalue.tc: Roll back the changes made yesterday
	as it broke the build .

	* cscc/csharp/cs_lvalue.tc, csharp/cscc/cs_gather.c: Load up types
	directly using ILFindNonSystemType and make sure all types are 
	resolved properly during type gather.

	* cscc/csharp/cs_semantics.tc, cscc/csharp/cs_lvalue.tc: Resolve
	aliases for fully qualified namespaces as well. (bug #5806)

2004-04-18  Gopal V <gopalv82@yahoo.com>

	* cscc/csharp/cs_lvalue.tc: Call ILNode_SemanalysisType for 
	resolving node->left for QualIdent and MemberAccess (bug #6999)
	
2004-04-01  Russell Stuart  <russell-savannah@stuart.id.au>

	* csant/csant_task.c, include/il_sysio.h, support/dir.c:
	Add support for <delete dir=...> to csant (patch #2827).

	* csant/csant_task.c: add <copy todir=...> to csant (patch #2829).

	* doc/pnettools.texi: update csant documentation.

2004-03-27  Gopal V <gopalv82@symonds.net>

	* cscc/common/cc_compat.c: Add a quick fix to support the 
	/recurse:*.cs and -recurse:*.cs option for cscc

2004-03-21  Rhys Weatherley  <rweather@southern-storm.com.au>

	* support/expand.c: implement Win32-specific filename expansion.

	* configure.in: disable zlib under mingw32 because it links in
	"mgwz.dll" when we don't want it to.

2004-03-19  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_ainit.tc, cscc/c/c_internal.h, cscc/c/c_lvalue.tc:
	fix the handling of nested structure initializers; add support
	for initializing complex structures.

	* engine/verify_branch.c: allow I and M/T values to be compared
	in unsafe mode.

	* engine/verify_arith.c: add the I/M and I/T cases to unsafe "sub".

	* cscc/cpp/Makefile.am: use $(EXEEXT) on the symlink for "cscc-cpp"
	(patch #2810).

2004-03-19  Russell Stuart  <russell-savannah@stuart.id.au>

	* csant/csant_build.c: fix a typo (patch #2824).

	* csant/csant_parse.c (RecordDependency): support comma-separated
	lists of target dependencies (patch #2825).

2004-03-19  Gopal.V  <gopalv82@symonds.net>

	* engine/cvm_call.c, engine/cvm_dasm.c, engine/cvm_lengths.c,
	engine/cvmc_call.c, engine/cvmc_gen.h, engine/cvmc_setup.c:
	improve the trace facility by tracing in the callee, not the caller.

2004-03-16  Rhys Weatherley  <rweather@southern-storm.com.au>

	* ilalink/link_library.c, ilalink/link_method.c,
	ilalink/link_module.c, include/il_linker.h: fix strong alias
	linking for vararg methods.

	* cscc/common/cc_preproc.c: fix a problem with Russian characters
	in single-line comments (bug #6190).

	* engine/cvm_config.h, engine/ilrun.1, engine/ilrun.c:
	document the dump and trace options better.

	* engine/cvm_lengths.c: fix the length of "thread_static"
	(thanks to Gopal V for spotting it).

2004-03-16  Gopal.V  <gopalv82@symonds.net>

	* engine/cvm.h, engine/cvm_call.c, engine/cvm_dasm.c,
	engine/cvm_lengths.c, engine/cvmc_call.c, engine/ilrun.c,
	include/il_coder.h: add the "--trace" option to ilrun, which
	provides runtime tracing of all method calls and returns.

2004-03-16  Russell Stuart  <russell-savannah@stuart.id.au>

	* engine/lib_reflect.c: implement "GetManifestResourceNames()".

2004-03-15  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c_main.c, cscc/c/Makefile.am, cscc/c/c_internal.h,
	cscc/c/c_oper.tc, cscc/c/c_types.c, cscc/c/c_typesize.c,
	cscc/c/c_typesize.h: remove reference to the definitions in
	"c_typesize.h" because it is now obsolete.

	* cscc/c/c_lvalue.tc: move some ILGenAdjust calls in the bit field
	code that were in the wrong position.

	* codegen/cg_stmt.tc: fix a stack underflow problem in the
	code generator for switch statements.

	* cscc/c/c_defs.tc, cscc/c/c_lvalue.tc (ILNode_CBitField): fetch the
	"other bits" to be OR'ed with a bit field value during the store,
	not the prepare; otherwise "a->x = a->y = z" won't work correctly.

2004-03-14  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/cscc.1, cscc/cscc.c, cscc/common/cc_main.c,
	cscc/common/cc_options.c, cscc/common/cc_options.h,
	doc/pnettools.texi: add pre-processor dependency options such
	as "-M", "-MD", etc to the C compiler.

	* cscc/common/cc_main.c: use "-MD file" instead of "-M -MF file";
	the GNU cpp documentation is wrong!

2004-03-13  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/Makefile.am, ilranlib/Makefile.am, ilsize/Makefile.am,
	ilstrip/Makefile.am: use $(EXEEXT) on install lines that need it.

	* configure.in: use the correct SOCKETLIBS and -lm settings
	for mingw32 builds.

	* NEWS, configure.in: update version for the "0.6.4" release.

	* configure.in: update working version to "0.6.5".

2004-03-12  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_lookup.c (ResolveSimpleName): when we move
	out to a nested parent scope, filter out instance members (bug #7597).

	* configure.in: explicitly invoke the shell on the libgc and libffi
	configure scripts, just in case they are not set to executable
	(bug #7406).

	* support/pt_defs.h: check for __USE_UNIX98 before allowing
	read-write locks to be used, as there are some systems that
	define PTHREAD_RWLOCK_INITIALIZER without defining pthread_rwlock_t.

	* cscc/c/c_lexutils.c, cscc/c/c_grammar.y: constants of the form
	"123L" should be converted into a native integer, not int64.

	* cscc/csharp/cs_stmt.tc (ILNode_FixExpr): handle assignment
	of an array to a pointer variable in a "fixed" expression.

	* cscc/csharp/cs_oper.tc: implement pointer comparison,
	addition, and subtraction.

2004-03-12  Gopal.V  <gopalv82@symonds.net>

	* engine/pinvoke.c (PackDelegateParams): process pointer values
	the same as byref values.

2004-03-11  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_declspec.c (CDeclCreatePrototype): deal with a bug
	in the declaration of functions that return a function pointer.

	* cscc/c/c_grammar.y, doc/pnettools.texi: set the default
	PInvoke calling conventions to "cdecl".

	* cscc/c/c_grammar.y (ArrayInitializerSize): handle string
	initializations of the form {"foo"}.

2004-03-11  Russell Stuart  <russell-savannah@stuart.id.au>

	* pnet.spec.in: improve the RPM spec file.

	* configure.in, engine/lib_file.c, include/il_sysio.h,
	support/file.c: implement internalcalls for file attributes
	and file lengths.

	* configure.in, pnet.spec.in: Add "cli-unknown-*" to pnet.spec,
	and also make the treecc version choice automatic.

2004-03-11  Gopal.V  <gopalv82@symonds.net>

	* cscc/csharp/cs_invoke.tc: make sure that "params" array matching
	is only used on the last parameter (bug #8016).

2004-03-10  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_function.c: output the parameter types for
	PInvoke-imported functions.

2004-03-07  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/link.c: look for "pinvoke.map" files when searching for
	native libraries, to deal with systems that lack ".so" symlinks.

	* cscc/c/c_defs.tc, cscc/c/c_invoke.tc, cscc/c/c_lvalue.tc,
	cscc/c/c_types.c, cscc/c/c_types.h: add support for instance
	fields, properties, and methods to the C compiler.

	* doc/c_users_guide.html, doc/pnettools.texi: add some more
	C compiler documentation to pnettools.texi and remove the
	obsolete c_users_guide.html file.

2004-03-07  Ilyak Kasnacheev  <ilyak@office.uw.ru>

	* csant/csant_cscc.c: add missing options for "mcs" compiles.

2004-03-06  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/cpp/Makefile.am, cscc/cpp/obstack.c: add a missing file.

	* codegen/cg_assign.tc, codegen/cg_nodes.tc, cscc/c/.cvsignore,
	cscc/c/Makefile.am, cscc/c/c_ainit.tc, cscc/c/c_builtin.tc,
	cscc/c/c_coerce.c, cscc/c/c_crt0.c, cscc/c/c_declspec.c,
	cscc/c/c_declspec.h, cscc/c/c_defs.tc, cscc/c/c_function.c,
	cscc/c/c_grammar.y, cscc/c/c_internal.c, cscc/c/c_internal.h,
	cscc/c/c_invoke.tc, cscc/c/c_library.c, cscc/c/c_lvalue.tc,
	cscc/c/c_name.tc, cscc/c/c_oper.tc, cscc/c/c_scanner.l,
	cscc/c/c_scope.c, cscc/c/c_stmt.tc, cscc/c/c_typeout.c,
	cscc/c/c_types.c, cscc/c/c_types.h, cscc/csharp/cs_oper.tc,
	doc/c_language_abi.html, dumpasm/dump_type.c, engine/cvmc_obj.c,
	engine/layout.c, ilalink/link_init.c: redesign the type system
	in the C compiler so that it uses dynamic layout for structures
	instead of static layout.

	* ilalink/link_create.c, ilalink/link_library.c, ilalink/link_main.c:
	remove the need for "64.dll" and "32.dll" from the linker.

	* cscc/c/c_internal.c, cscc/c/c_library.c, ilalink/link_class.c,
	ilalink/link_create.c, ilalink/link_image.c, ilalink/link_init.c,
	ilalink/link_library.c, ilalink/link_main.c, ilalink/link_module.c,
	ilalink/link_type.c, ilalink/linker.h, include/il_linker.h:
	change "MemoryModelAttribute" to "ModuleAttribute" for the new ABI.

2004-03-02  Rhys Weatherley  <rweather@southern-storm.com.au>

	* configure.in: detect some extra headers in configure.in for "cpp".

	* cscc/c/c_declspec.c, cscc/c/c_declspec.h, cscc/c/c_defs.tc,
	cscc/c/c_grammar.y, cscc/c/c_invoke.tc, cscc/c/c_library.c,
	cscc/c/c_scanner.l, cscc/c/c_types.c, cscc/c/c_types.h:
	add the "__new__", "__delete__", "__gc", and "__nogc" keywords
	to the C compiler.

	* cscc/c/c_coerce.c, cscc/c/c_lvalue.tc, cscc/c/c_typeout.c,
	cscc/c/c_types.c, cscc/c/c_types.h: modify the ABI so that
	struct types appear as "name" rather than "struct_name";
	do the same for union and enum types also.

2004-03-01  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_lexutils.c, cscc/c/c_lexutils.h, cscc/c/c_scanner.l:
	add support for the "#using" directive to the C compiler.

	* cscc/c_main.c, cscc/c/c_coerce.c, cscc/c/c_declspec.c,
	cscc/c/c_declspec.h, cscc/c/c_defs.tc, cscc/c/c_grammar.y,
	cscc/c/c_lexutils.c, cscc/c/c_oper.tc, cscc/c/c_scanner.l:
	add the "__box" keyword for Managed C++ compatibility;
	remove the "__long_long__" keyword and replace it with "__int64".

	* image/sig_parse.c: allow custom modifiers within a byref type.

	* cscc/c/c_declspec.c, cscc/c/c_declspec.h, cscc/c/c_grammar.y,
	cscc/c/c_invoke.tc, cscc/c/c_lvalue.tc, cscc/c/c_stubs.tc,
	cscc/c/c_types.c, cscc/c/c_types.h: add by-reference parameters
	to the C compiler, for interacting with C# methods that have
	"ref" and "out" parameters.

	* cscc/c/c_declspec.c, cscc/c/c_grammar.y, cscc/c/c_scanner.l:
	replace "__thread_specific__" with "__declspec(thread)".

	* doc/pnettools.texi: begin moving the C compiler documentation
	into "pnettools.texi".

2004-02-29  Rhys Weatherley  <rweather@southern-storm.com.au>

	* codegen/cg_scope.c, codegen/cg_scope.h, cscc/c/c_grammar.y,
	cscc/c/c_scanner.l, cscc/c/c_scope.c, cscc/c/c_scope.h:
	add the "__using__" and "__namespace__" keywords to the C
	compiler so that they can be used to resolve C# types using
	the "Namespace::Type" syntax.

	* cscc/c/c_grammar.y, cscc/c/c_scanner.l: remove the "__csharp__"
	keyword from the C compiler as it is no longer necessary.

	* cscc/c/c_defs.tc, cscc/c/c_grammar.y, cscc/c/c_invoke.tc,
	cscc/c/c_lvalue.tc, cscc/c/c_oper.tc: rearrange the grammar for
	"Type::Identifier" so that it can handle more than just static
	methods; implement a better C# member resolution algorithm.

	* configure.in, cscc/Makefile.am, cscc/cpp/*: check in a copy
	of gcc's C pre-processor so that we can use it instead of the
	system cpp, which is sometimes busted too much for us to use.

	* cscc/common/cc_main.c: hook "cscc-cpp" into the "cscc" front end.

2004-02-28  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_oper.tc (MulPtrSize): fix a bug where 1 * sizeof(type)
	was being converted into 1 instead of sizeof(type) if "type"
	was dynamic in size.

	* cscc/c/c_builtin.tc, cscc/c/c_defs.tc, cscc/c/c_internal.c,
	cscc/c/c_invoke.tc, cscc/c/c_library.c: remove the remaining
	references to the obsolete "OpenSystem.C.LongDouble" type.

	* cscc/c/c_declspec.c: the type "__native__ int" was not being
	properly recognised.

	* cscc/c/c_grammar.y, cscc/c/c_scanner.l, cscc/c/c_stmt.tc,
	cscc/c/c_stubs.tc: add exception statements to the C compiler,
	so that exceptions that are thrown by C# code can be caught.

	* cscc/c/c_defs.tc, cscc/c/c_grammar.y, cscc/c/c_oper.tc,
	cscc/c/c_scanner.l, cscc/c/c_stmt.tc, cscc/c/c_stubs.tc,
	cscc/c/c_types.c, cscc/c/c_types.h, cscc/common/cc_main.c,
	cscc/common/cc_main.h, doc/c_users_guide.html: add counterparts
	to the C# lock, null, true, false, checked, and unchecked
	keywords; permit an assembly name to be used with "__csharp__"
	for importing from assemblies other than "mscorlib".

	* cscc/c/c_const.tc, cscc/c/c_grammar.y, cscc/c/c_lexutils.c,
	cscc/c/c_scanner.l: allow S"foo" to be used for C#-style strings,
	similarly to Managed C++.

2004-02-27  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_typeout.c, cscc/c/c_types.c, doc/c_language_abi.html:
	use prefixes such as "struct_" instead of "struct ", so that
	the resultant C types are visible to C# programs.

2004-02-25  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_declspec.c, cscc/c/c_oper.tc, doc/c_language_abi.html,
	doc/c_users_guide.html, ilalink/link_create.c, ilalink/link_field.c,
	ilalink/link_init.c, ilalink/link_library.c, ilalink/link_method.c,
	ilalink/link_module.c, ilalink/linker.h: convert "long double"
	into "double" because "native float" doesn't work properly with
	Microsoft's CLR; use ordinary names like "libc" instead of
	"$Module$" so that non-pnet C# compilers can import C libraries.

2004-02-17  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_grammar.y (ParameterDeclaration): support parameters
	declarations of the form "register <type>".

	* cscc/c/c_stmt.tc (ILNode_NewScope): return the inner statement's
	semantic value to the caller so that expression statements are
	handled correctly.

	* engine/int_table.c, engine/lib_thread.c: modify the
	"InternalWaitAll" and "InternalWaitAny" internalcalls to take
	"IntPtr[]" parameters rather than "WaitHandle[]" parameters.

	* cscc/c/c_coerce.c, cscc/c/c_oper.tc, doc/c_users_guide.html:
	allow zero to be used in C in contexts where a C#-style object
	reference is expected; add C#-style casts and coercions to C.

	* doc/c_users_guide.html: clean up the C user's guide a little.

	* doc/c_users_guide.html, ilalink/link_library.c:
	recognise C# types that are tagged with "OpenSystem.C.GlobalScope"
	as containing functions that are directly accessible from C.

2004-02-16  Rhys Weatherley  <rweather@southern-storm.com.au>

	* codegen/cg_decls.tc, codegen/cg_gen.c, codegen/cg_gen.h,
	cscc/c/c_defs.tc, cscc/c/c_function.c, cscc/c/c_grammar.y,
	cscc/c/c_stmt.tc: implement support for computed goto's in
	the C compiler.

2004-02-15  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/verify_obj.c: relax the M/T/I pointer restrictions in
	"ldfld", "ldflda", and "stfld" instructions so that fields can
	be properly handled in unmanaged C code even when the wrong
	kind of pointer is supplied.

	* ilalink/link_create.c, ilalink/link_field.c, ilalink/link_library.c,
	ilalink/link_method.c, ilalink/linker.h: improve the detection of
	unresolved externals; fix problems with linking backward references
	within C assemblies.

	* dumpasm/dump_type.c, ilalink/link_create.c, include/il_dumpasm.h:
	dump unresolved externals using C type names rather than IL type
	names, so that the error messages make more sense to ordinary users.

	* ilalink/link_create.c, ilalink/link_library.c, ilalink/linker.h:
	handle unresolved references to functions that involve varargs.

	* dumpasm/dump_type.c, ilalink/link_create.c: more adjustments to
	C type name dumping.

	* engine/verify_ptr.c: fix bug #4934 related to storing managed
	pointers via "stind.i".

2004-02-14  Rhys Weatherley  <rweather@southern-storm.com.au>

	* configure.in, support/time.c: use the "tm_gmtoff" field within
	"struct tm" for the timezone offset, if present (thanks to
	Ole Guldberg Jensen <olegb@opendarwin.org>).

2004-02-13  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_coerce.c (GetCoerceRules): don't strip prefixes
	off "fromType" if it is a function pointer type; this allows
	casts of the form "function pointer to void *".

2004-02-12  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_declspec.c, cscc/c/c_declspec.h, cscc/c/c_grammar.y,
	cscc/c/c_scanner.l: add the "__thread_specific__" storage class
	to the C compiler so that global variables like "errno" in pnetC
	can be made thread-specific.

2004-01-24  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_emit.c: use "wb" mode to save emitted images;
	set +x on emitted exe's.

2004-01-23  Rhys Weatherley  <rweather@southern-storm.com.au>

	* codegen/cg_coerce.c (GetReferenceConvertRules): make sure
	that the "from" and "to" classes are fully resolved before
	testing their relationship.

2004-01-13  Adam Ballai <adam@thefrontnetworks.net>

	* configure.in, support/thr_choose.h, pt_defs.h: Enable
	  FreeBSD pthreads support in pnet.
	
2004-01-03  Rhys Weatherley  <rweather@southern-storm.com.au>

	* NEWS, configure.in: update version for the "0.6.2" release.

	* configure.in: update working version to "0.6.3".

2003-12-30  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_reflect.c (_IL_ClrMethod_Invoke): ignore the target
	object when invoking a static method (fix suggested by Gopal V).

	* resgen/resgen_binary.c: fix some alignment issues in the
	reading and writing of binary resources.

2003-12-29  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_socket.c (IPToHostEntry): fix endian-ness issues
	with the conversion from hostent form.

	* codegen/cg_coerce.c: can explicitly cast between pointer
	types and IntPtr.

	* csant/csant_fileset.c: check the "if" attribute on <file> tags.

	* support/unicase.c, support/unicat.c, support/uninum.c:
	update the Unicode character property tables to match Unicode 4.0.1.

2003-12-23  Rhys Weatherley  <rweather@southern-storm.com.au>

	* resgen/resgen.c: add the "--extract" option to help with
	extracting resource files from an assembly.

2003-12-22  Rhys Weatherley  <rweather@southern-storm.com.au>

	* support/locale.c: check for "LC_ALL" before "LANG".

	* resgen/resgen_po.c, resgen/resgen_text.c: add the ".po" charset
	header and fix some Latin1 to UTF-8 conversion bugs.

	* resgen/resgen_po.c: improve escape sequence handling for ".po" files.

	* resgen/resgen_po.c: process "fuzzy" markers in ".po" files.

	* cscc/csharp/cs_grammar.y: rearrange the grammar to handle
	casts of the form "(X *)y" where X is an expression type.

	* codegen/cg_lvalue.tc (ILNode_DerefField): clear "tempVar"
	if performing a regular assignment, to prevent "Store" from
	pushing a "leave" value onto the stack when it shouldn't do so.

2003-12-21  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_marshal.c: implement "StructureToPtrInternal".

2003-12-21  Tony Garnock-Jones  <tonyg@kcbbs.gen.nz>

	* engine/lib_type.c: handle '*' and '&' in "Type.GetType".

2003-12-16  Rhys Weatherley  <rweather@southern-storm.com.au>

	* ildasm/ildasm_main.c, image/winres_reader.c: dump the
	"VS_VERSION_INFO" Win32 resource block in "ildasm".

	* image/image.h, image/winres_reader.c, image/winres_writer.c:
	add support code for writing Win32 resources to the ".rsrc" section.

2003-12-16  Gopal.V  <gopalv82@symonds.net>

	* cscc/csharp/cs_grammar.y: make line numbers work on versions
	of yacc that define YYLTYPE_IS_DECLARED but not YYLTYPE.

2003-12-03  Rhys Weatherley  <rweather@southern-storm.com.au>

	* configure.in, support/regex.c: add <inttypes.h> to configure.in
	so that regex routines get the correct definition of "uintptr_t"
	(thanks to Miroslaw Dobrzanski-Neumann for identifying the issue).

	* cscc/csharp/cs_misc.tc (ILNode_SizeOf): bug in the handling of
	"sizeof" which caused it to always set the size of non-primitive
	types to 1.

2003-12-02  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_file.c:
	add internalcalls to "FileMethods" to support symbolic links.

2003-12-01  Gopal.V  <gopalv82@symonds.net>

	* samples/evenodd.il, samples/hello.il: qualify references to
	"System.String" in the IL examples.

2003-12-01  Rhys Weatherley  <rweather@southern-storm.com.au>

	* include/il_values.h: fix an ANSI C oddity in "IL_READ_INT64"
	and "IL_READ_UINT64" (thanks to Miroslaw Dobrzanski-Neumann).

	* engine/lib_delegate.c (PackDelegateInvokeParams): fix a bug
	with the expansion of float and double parameters (bug #6891).

2003-11-30  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/cvmc_setup.c: truncate or sign-extend 8-bit and 16-bit values
	from PInvoke/internalcall methods just in case "libffi" sets the
	high bits to garbage.

2003-11-28  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_crypt.c, include/il_crypt.h, support/Makefile.am,
	support/ripemd160.c: add the RIPEMD-160 hash algorithm to the engine.

	* cscc/csharp/cs_misc.tc, cscc/csharp/cs_oper.tc: increment and
	decrement operators for pointer values.

2003-11-27  Rhys Weatherley  <rweather@southern-storm.com.au>

	* ilgac/ilgac.c: modify "ilgac" so that it can also install
	IL executables into the assembly cache.

	* support/file.c (ILCopyFile): rewrite the file copying function.

	* missing: update the "missing" script so that it is no longer
	"too old or missing".

	* ildd/ildd.c: use "n.n.n.n" instead of "n:n:n:n" for version
	numbers, to be consistent with recommended usage for other tools.

	* cscc/csharp/cs_lookup.c: allow fields to be resolved when
	performing semantic analysis on an attribute argument so that
	constants in the current class can be properly expanded (bug #5436).

2003-11-26  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_misc.tc (ILNode_NewExpression): report an error
	if "float[]" or "double[]" is used in a profile that does not
	have the floating-point classes in the runtime library.

	* ildd/ildd.c: print the assembly version for each file
	that is scanned.

	* doc/pnettools.texi, ildd/ildd.1, ildd/ildd.c: add the "-r"
	option to "ildd", to recursively print dependencies.

	* csant/csant_cscc.c (CSAntTask_ResLink): spelling mistake - should
	be "installasdefault", not "install".

	* csant/csant_cscc.c: minor bugs in the handling of the <resgen>
	and <reslink> tags.

	* csant/csant_cscc.c: disable the "--silent" flag to "ilgac"
	so that it will display what it is doing during a "make install".

	* clrwrap/clrwrap.c: modify "clrwrap" so that it can implicitly
	get the name of the IL program to run from argv[0].

2003-11-25  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/meta_build.c (ResolveTypeRefs): if a TypeRef to a foreign
	assembly/module remains unresolvable and there are redo items,
	then queue the TypeRef for redo also.

	* ilasm/ilasm_grammar.y, image/meta_build.c, image/misc_token.c,
	include/il_program.h: set an exported type's scope when it is
	created so that the correct ILClassName is constructed.

	* image/context.c, image/meta_build.c: treat "file" scopes the
	same as "module" scopes during class lookup; better error reporting
	for unresolved exported types.

	* image/context.c, image/meta_build.c, image/misc_token.c,
	include/il_program.h: resolve export type references to files.

2003-11-24  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/meta_build.c: "redo" processing for nested and exported
	types, resolve TypeRef's that involve ModuleRef scopes.

	* image/image.h, image/link.c, image/meta_build.c: dynamic
	loading for images referred to via ModuleRef tokens.

	* image/meta_build.c: link a dynamically loaded module to
	the ModuleRef.

	* image/meta_types.c (ILTypeIdentical): check for class identity
	in a way that will work even if "redo" items are involved and the
	classes haven't been linked together yet.

	* image/meta_build.c (Load_ExportedType): don't add exported types
	to the "redo" list if the "no resolve" load flag is set.

	* doc/pnettools.texi, ildd/ildd.1, ildd/ildd.c: dump file and
	resource declarations from "ildd"; add the "-f" option to "ildd"
	to force filenames to be displayed even if there is only one name.

2003-11-23  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/context.c, image/image.h, image/link.c, image/meta_build.c,
	image/pecoff_loader.c: add a "redo" list to the program loading
	process, to allow recursive TypeRef's and MemberRef's to be
	resolved in a final pass after all recursive images have been loaded.

2003-11-21  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_oper.tc: implement a short-cut in the "==" and "!="
	operators for "IntPtr" arguments, to avoid a runtime call to the
	user-defined operator methods.

	* engine/cvmc_branch.c: add missing cases for type-I arguments
	to branch and compare opcodes.

	* cscc/csharp/cs_lvalue.c, codegen/cg_const.tc: expand "IntPtr.Zero"
	inline to "ldc.i4.0, conv.i", for greater runtime efficiency.

2003-11-20  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/marshal.c (ILPInvokeGetMarshalType): fix a typo
	(thanks to Miroslaw Dobrzanski-Neumann).

	* configure.in, support/ansi.c: change MB_CUR_MAX to MB_LEN_MAX
	because the former may not be constant on some platforms
	(thanks to Miroslaw Dobrzanski-Neumann).

	* engine/int_proto.h, engine/int_table.c, engine/lib_info.c:
	add the "InfoMethods.GetProcessorCount" internalcall.

2003-11-19  Rhys Weatherley  <rweather@southern-storm.com.au>

	* support/console.c, support/serial.c: work around missing termios
	definitions under Darwin.

2003-11-17  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/meta_index.c, image/pecoff_loader.c: add some support
	for IL object files that use a ".cormeta" section.

2003-11-15  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_reflect.c, ilalink/link_res.c, resgen/resgen_binary.c:
	resource sections should be padded to a multiple of 4 bytes.

2003-11-14  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_reflect.c:
	support static fields in "ClrField.GetValue" and "ClrField.SetValue".

	* support/serial.c: work around missing termio symbols under
	FreeBSD and OpenBSD.

	* resgen/resgen.c: perform the check for "/compile" and "-compile"
	in a different manner, to deal with "@name" option file references.

	* engine/lib_reflect.c: fix a segv in the previous checkin.

2003-11-13  Miroslaw Dobrzanski-Neumann  <mne@mosaic-ag.com>

	* configure.in: detect cc options such as "-fno-gcse" with a
	full compile and link because a compile on its own confuses
	IBM's AIX C compiler, xlc.

	* libgc/dyn_load.c: fixes for IBM's AIX compiler.

2003-11-12  Gopal.V  <gopalv82@symonds.net>

	* cscc/csharp/cs_stmt.tc: fix switch statement fall-through
	detection for nested switch statements (bug #6417) (applied by Rhys).
	
2003-11-12  Rhys Weatherley  <rweather@southern-storm.com.au>

	* support/console.c: add Win32 console support.

	* support/console.c: reset the co-ordinates to (0, 0) after a clear.

	* configure.in: don't attempt to detect termcap or curses under Win32.

	* support/sha384.c, support/sha512.c, support/thread.c,
	support/time.c, support/wait.c, support/wait_event.c:
	fix some warnings that were turned up by gcc 3.3.

	* configure.in: use the static version of libz under mingw32
	to avoid a dependency upon "mgwz.dll".

	* support/file.c: port the file locking primitives to Win32.

	* support/file.c: adjust a #ifdef so that the locking primitives
	compile properly with cygwin.

2003-11-11  Rhys Weatherley  <rweather@southern-storm.com.au>

	* Makefile.am, configure.in, ilgac/.cvsignore, ilgac/Makefile.am,
	ilgac/ilgac.c, support/dir.c, support/file.c, support/gen_errno.sh:
	add the "ilgac" program; fix some error-handling bugs in the
	file and directory support routines.

	* csant/csant.c, csant/csant_build.c, csant/csant_cscc.c,
	csant/csant_defs.h, csant/csant_task.c: add the <resgen> and
	<reslink> tags to csant; add --install and --uninstall options
	to csant.

	* ilgac/ilgac.1, ilgac/Makefile.am: add the manpage for "ilgac".

	* csant/csant.c: add the "--assembly-cache" option to csant.

	* csant/csant_cscc.c: perform the "newer" check for <resgen>
	and <reslink>.

2003-11-10  Stephen Compall  <s11@member.fsf.org>

	* support/file.c (ILSysIOLock, ILSysIOUnlock): Exclusive file
	locking support, only when fcntl and F_SETLKW are present.

	* configure.in: Check for F_SETLKW in fcntl.h.

2003-11-10  Rhys Weatherley  <rweather@southern-storm.com.au>

	* csant/csant_cscc.c, csant/csant_defs.h, csant/csant_parse.c:
	preserve the full profile values, not just true/false, so that
	non-boolean values can be defined.

	* ilsize/ilsize.c: dump the assembly version in the detailed
	output mode of "ilsize".

	* configure.in, support/console.c: implement terminfo-based
	console routines for systems that lack termcap, or a termcap
	that interfaces to terminfo.

	* image/link.c: rearrange the assembly resolution order so that
	CSCC_LIB_PATH always comes before libraries in the same directory
	as the parent, to avoid conflicts with third-party CLI's, and
	without needing hacks like "pnetlib.here".

	* image/link.c: look in a version-specific sub-directory
	before looking in the main directory during assembly resolution.

2003-11-09  Rhys Weatherley  <rweather@southern-storm.com.au>

	* configure.in, support/console.c: use a better detection mechanism
	for systems that use <term.h> instead of <termcap.h>.

2003-11-08  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_grammar.y (GetIndexerName): fix potential
	segv conditions.

	* support/console.c: if a special key corresponds to a single
	ASCII character, then return that character as well as the key code.

	* support/console.c: recognise metacharacter sequences like ESC-A
	and convert them into ALT-A.

	* engine/int_proto.h, engine/int_table.c, engine/lib_serial.c,
	include/Makefile.am, include/il_serial.h, support/Makefile.am,
	support/serial.c: add the support routines for serial port I/O
	and hook up the necessary internalcalls.

	* doc/pnetimg.texi: remove pnetimg.texi because it is woefully
	incomplete and out of date compared to the comments in il_program.h.

	* include/il_serial.h, support/serial.c: add the "RING" signal to
	the list of monitored serial line pins.

2003-11-07  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/cs_main.c: enable the "-fgenerics" option by default because
	the keyword ambiguities have been dealt with.

	* codegen/cg_misc.tc, codegen/cg_nodes.tc, codegen/jv_misc.tc,
	cscc/csharp/cs_grammar.y, cscc/csharp/cs_invoke.tc: add the
	"Type.default" idiom to the C# compiler, for C# 2.0 compatibility.

	* codegen/cg_defs.h, codegen/cg_misc.tc, codegen/cg_nodes.tc,
	cscc/csharp/cs_grammar.y, cscc/csharp/cs_invoke.tc, include/il_types.h:
	add some semantic analysis for "new X<T>(...)" expression forms.

	* image/link.c (ILPInvokeResolveModule): allow relative paths
	of the form "X/Y/Z" to be used for PInvoke module names (bug #5413).

	* engine/verify_call.c (MatchSignature): recognize method pointers
	as valid type-I values in signature verification (Gopal V).

	* support/console.c (ILConsoleWriteChar): the backspace character
	'\u0008' should not erase by default when output.

2003-11-06  Rhys Weatherley  <rweather@southern-storm.com.au>

	* support/console.c: add extra keycodes to the function/arrow key
	mapping table, to deal with codes that aren't typically present
	in the termcap entry for a terminal.

2003-11-05  Rhys Weatherley  <rweather@southern-storm.com.au>

	* include/Makefile.am: add "il_console.h" to "include/Makefile.am".

2003-11-04  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/Makefile.am, engine/int_proto.h, engine/int_table.c,
	engine/lib_serial.c: stub out internalcalls for "PortMethods".

2003-11-03  Rhys Weatherley  <rweather@southern-storm.com.au>

	* configure.in, engine/Makefile.am, engine/lib_stdio.c,
	engine/process.c, include/il_console.h, include/il_utils.h,
	support/Makefile.am, support/console.c, support/input.c:
	check in the new console implementation.

2003-11-02  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_stdio.c:
	stub out new interncalls for the "Platform.Stdio" class.

2003-11-01  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_task.c: use a slightly longer timeout gap within
	"Process.WaitForExit" to prevent the kernel from being overloaded
	by lots of small timeouts.

2003-10-31  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_task.c: pass environment variables from the "Process"
	class to the child process (Unix systems).

2003-10-30  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_stdio.c (StdRead): increment number of bytes
	read for current return value (Stephen Compall).

	* resgen/resgen.c: skip the "/compile" and "-compile" options
	to resgen, for backwards-compatibility with other vendors' tools.

2003-10-29  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/unroll.c: fix the VMA when dumping unrolled code
	with "objdump" (thanks to Miroslaw Dobrzanski-Neumann
	<mne@mosaic-ag.com>).

	* doc/pnettools.texi, resgen/resgen.1, resgen/resgen.c,
	resgen/resgen.h, resgen/resgen_po.c, resgen/resgen_text.c:
	add the "-l" option to "resgen", which converts Latin-1 into UTF-8.

2003-10-26  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_grammar.y, cscc/csharp/cs_internal.h,
	cscc/csharp/cs_scanner.l: handle special C# keywords like
	"get", "set", "add", "remove", and "where" in a slightly
	different way, to reduce the need for hacky flags and
	scanner states.

	* cscc/csharp/cs_grammar.y, cscc/csharp/cs_scanner.l:
	add new keywords and syntax for the C# 2.0 features anonymous
	methods, partial types, and iterators (semantics is not done yet).

2003-10-15  Rhys Weatherley  <rweather@southern-storm.com.au>

	* NEWS, configure.in: update version for the "0.6.0" release.

	* configure.in: update working version to "0.6.1".

2003-10-14  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/image.h, image/meta_build.c, image/misc_token.c:
	search for owned items in a way that avoids loading an
	item unless it is actually the one that was sought.

	* codegen/cg_gen.h, codegen/cg_stmt.tc, codegen/jv_stmt.tc:
	fixed a bug in "foreach" which caused it to use the wrong
	kind of jump when a "break" appeared in the loop body.

2003-10-13  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/Makefile.am, engine/ilrun.1, engine/ilverify.1:
	add a man page for "ilverify"; minor edits to the "ilrun" man page.

	* tests/Makefile.am, tests/test_thread.c, tests/test_varith.c,
	tests/test_vbranch.c, tests/test_vcompare.c, tests/test_vconst.c,
	tests/test_vconv.c, tests/test_verify.c, tests/test_verify.h,
	tests/test_vlocal.c, tests/test_vmisc.c: remove the "test_verify"
	program because it isn't used any more, and won't work since
	mscorlib.dll was moved out of pnet anyway.

	* Makefile.am, configure.in, ildiff/AUTHORS, ildiff/Makefile.am,
	ildiff/README, ildiff/TODO, ildiff/ildiff.1, ildiff/ildiff.c,
	ildiff/pretty.h: remove "ildiff" which is obsolete and slated to
	be rewritten in C#.

	* Makefile.am, configure.in, ildb/Makefile.am, ildb/README,
	ildb/ildb.1, ildb/ildb_cmd.c, ildb/ildb_cmd.h, ildb/ildb_context.c,
	ildb/ildb_context.h, ildb/ildb_display.c, ildb/ildb_errors.c,
	ildb/ildb_input.c, ildb/ildb_input.h, ildb/ildb_list.c,
	ildb/ildb_main.c, ildb/ildb_parse.c, ildb/ildb_run.c,
	ildb/ildb_search.c, ildb/ildb_search.h, ildb/ildb_set.c,
	ildb/ildb_show.c, ildb/ildb_source.c, ildb/ildb_source.h,
	ildb/ildb_system.c, ildb/ildb_utils.c, ildb/ildb_utils.h,
	ildb/xxildb: remove "ildb" which is obsolete and slated to be
	rewritten in C#.

	* doc/pnet_faq.html: update the linking exception to match
	GNU Classpath.

2003-10-12  Rhys Weatherley  <rweather@southern-storm.com.au>

	* doc/pnet_faq.html: more updates to the FAQ.

2003-10-10  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/process.c: set the "system" image when the standard
	classes are loaded so that types like "System.Array" get resolved
	properly by "ILClassResolveSystem".

	* engine/ilrun.c: use an alternative existence check for the
	IL binary to handle ".exe" extensions under Windows.

	* csant/csant_cscc.c (BuildMcsCommandLine): pass missing options
	like "-optimize" to "mcs" (Bug #5830).

	* doc/pnet_faq.html: update the FAQ.

2003-10-08  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_object.c:
	add the "Activator.CreateValueTypeInstance" internalcall.

	* libffi/src/x86/ffi.c: use an alternative mechanism for getting
	the argument address in closures, because the previous one didn't
	work on all platforms.

	* engine/cvm_conv.c, engine/engine.h, engine/lib_delegate.c,
	engine/lib_marshal.c, engine/pinvoke.c: add delegate objects
	to the GC handle table when they are converted into closures
	so that the object won't disappear out from underneath the
	closure.

2003-10-07  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/cvm.h, engine/cvm_conv.c, engine/cvm_dasm.c,
	engine/cvm_lengths.c, engine/cvmc_setup.c, engine/gen_marshal.tc,
	engine/lib_marshal.c, engine/pinvoke.c, image/marshal.c,
	include/il_program.h: marshal structures that contain delegate fields.

2003-10-03  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_type.c (InternalGetSerializableMembers): misplaced "++".

	* cscc/c/c_coerce.c (ApplyCoercion): handle constant coercions
	when the underlying machine type does not change.

	* cscc/c/c_coerce.c (GetCoerceRules): allow function pointer types
	to be coerced if they have the same basic "shape", even if some
	of the parameters differ in const or pointer types.

	* cscc/c/c_oper.tc (CreateBoolValue): the boolean type in C is "int".

2003-10-02  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_oper.tc: improve the handling of boolean constant
	values in the C compiler.

2003-09-30  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_delegate.c:
	stub out the "SetOutParams" internalcall.

	* engine/cvm_except.c, engine/cvmc_gen.h, ilasm/ilasm_output.c,
	ildasm/ildasm_class.c, ildasm/ildasm_java.c, image/writer.c,
	support/test_float.c: fix the "compact" profile.

2003-09-29  Rhys Weatherley  <rweather@southern-storm.com.au>

	* ilasm/ilasm_output.c (OutputDebugInfo): make sure that the
	proper filename is written to debug overflow blocks.

	* ilalink/link_create.c, ilalink/link_image.c, ilalink/linker.h,
	image/debug_writer.c, image/image.h, include/il_writer.h:
	add the link directory to the debug symbol table so that
	the full pathname of a source file can be recovered later.

	* doc/pnettools.texi: document how the link directory is stored
	in the debug symbol table.

2003-09-26  Rhys Weatherley  <rweather@southern-storm.com.au>

	* csant/csant.1, doc/pnettools.texi: update the documentation
	for csant to include information about the XML build file syntax.

2003-09-25  Adam Ballai  <Adam@thefrontnetworks.net>
	
	* engine/ilrun.c: add necessary code for compact profile
	to build correctly.

2003-09-25  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/meta_build.c: load the TypeRef/TypeDef names before doing
	dynamic linking, to make it easier to resolve cross-assembly
	type references in recursive situations.

	* image/image.h, image/meta_build.c, image/pecoff_loader.c:
	put some infrastructure in place to support on-demand loading
	of TypeRef tokens.

	* image/meta_build.c: remove some unnecessary code; convert
	MethodSpec tokens to on-demand loading.

2003-09-22  Rhys Weatherley  <rweather@southern-storm.com.au>

	* support/dns.c, support/socket.c: make sure that the socket
	functions are properly detected under mingw32 (bug #3511).

	* support/dns.c, support/socket.c: ensure that "WSAStartup" is
	called before any socket functions because Win32 refuses to
	perform socket operations without it.

2003-09-20  Rhys Weatherley  <rweather@southern-storm.com.au>

	* csant/csant_cscc.c: add the "--unsafe" option to the command-line
	for "mcs" where necessary.

2003-09-19  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_info.c,
	include/il_system.h, support/Makefile.am, support/path.c:
	add the "InfoMethods.GetPlatformName" internalcall to the engine.

	* ilasm/ilasm_output.c: parameter information was being added to
	the debug symbol table when it should not have been.

2003-09-13  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/common/cc_compat.c: be careful not to treat absolute
	pathnames as options in compat mode.

2003-09-12  Rhys Weatherley  <rweather@southern-storm.com.au>

	* csdoc/doc_valil.c: don't report extra classes that are
	marked with the "NonStandardExtra" attribute.

2003-09-06  Rhys Weatherley  <rweather@southern-storm.com.au>

	* csdoc/cssrc2html.1: fill in the missing parts of the manpage.

	* NEWS, configure.in: update version for the "0.5.12" release.

	* configure.in: update working version to "0.5.13".

2003-09-06  Andrew Mitchell  <ajmitch@gnu.org>

	* csdoc/Makefile.am, csdoc/cssrc2html.1: added manpage for cssrc2html
	
2003-09-05  Rhys Weatherley  <rweather@southern-storm.com.au>

	* csdoc/il2doc.c: remove assembly version qualifications when
	dumping type names in attributes for correct matching against
	pnetlib which uses version-agnostic type names.

	* codegen/cg_decls.tc, ilasm/ilasm_build.c, ilasm/ilasm_build.h,
	ilasm/ilasm_grammar.y, image/lib_attrs.c: convert instances of
	"SecurityPermissionAttribute" into security declarations;
	update the compiler and assembler to process security declarations.

2003-09-04  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_gather.c: report duplicates for "override"
	methods correctly (bug #4861).

	* csdoc/il2doc.c: abstract types that inherit from "ValueType"
	are classes, not structs.

2003-09-03  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/vb/vb_scanner.l: '$' is not valid in VB identifiers except
	as the terminating type character.

	* csdoc/doc_valil.c: handle long-form nested type names better.

2003-09-02  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_type.c: don't include static fields in the list
	of serializable members for a type.

2003-09-01  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/internal.c,
	engine/lib_type.c: new internalcall for "FormatterServices".

2003-08-31  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_info.c:
	new internalcalls in "InfoMethods" for getting the user
	storage and global configuration directories..

2003-08-30  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/engine.h: temporarily disable IMT's because they are
	causing some problems in the pnetlib winforms code.

2003-08-29  Rhys Weatherley  <rweather@southern-storm.com.au>

	* include/il_utils.h, support/.cvsignore, support/Makefile.am,
	support/mkcase.c, support/unicase.c, support/unicode.c:
	add support routines for performing Unicode case conversion.

	* engine/int_proto.h, engine/int_table.c, engine/lib_string.c:
	implement the "String.CompareInternal" internalcall in terms
	of the Unicode comparison support routines.

	* engine/int_proto.h, engine/int_table.c, engine/lib_string.c,
	include/il_utils.h, support/mkcase.c, support/unicase.c,
	support/unicode.c: internalcalls for TextInfo; remove the
	title case conversion table and functions because they are
	not required.

2003-08-28  Rhys Weatherley  <rweather@southern-storm.com.au>

	* configure.in, image/link.c, image/pecoff_loader.c,
	profiles/compact, profiles/compact-fp, profiles/full,
	profiles/kernel, profiles/kernel-fp, profiles/tiny:
	add support for gzip-compressed PE/COFF binaries.

	* image/pecoff_loader.c: disable in-place execution when
	the binary image has been compressed.

2003-08-23  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_reflect.c:
	new internalcalls for "Assembly"; implement "Module" internalcalls.

	* engine/int_proto.h, engine/int_table.c, engine/lib_thread.c:
	add the "Thread.SpinWait" interncall.

	* engine/verify_obj.c: change a "continue" into a "break" in
	the verifier that stopped the instruction pointer from being
	incremented.

2003-08-20  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_reflect.c:
	new internalcalls to support "Assembly" and "AssemblyName".

2003-08-19  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_file.c,
	include/il_sysio.h, support/file.c: stub out the internalcalls
	for "FileMethods.Lock" and "FileMethods.Unlock".

	* engine/engine.h, engine/int_proto.h, engine/int_table.c,
	engine/lib_security.c, engine/thread.c: remove the obsolete
	platform security manager classes, which will be superceded by CAS.

2003-08-18  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/pecoff_loader.c (MemoryRead): reversed test, causing segv
	(found by Chris Smith - bug #4807).

	* codegen/cg_nodes.tc, codegen/cg_stmt.tc: implement "GetType"
	and "GenValue" for scopes and compound statements, to support
	statement expressions in C (bug #4809).

	* codegen/cg_stmt.tc: fix the code generation for C switch
	statements to stop values being left on the stack during
	fall-through situations (bug #4822).

2003-08-15  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c_main.c, cscc/c/c_grammar.y, cscc/c/c_scanner.l:
	add some extra keywords to the C compiler, so that spaces
	and quotes can be avoided in the cpp options for MacOS X.

2003-08-14  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_reflect.c: "Assembly.GetLocation" should return
	the full pathname for the assembly, not just the directory.

2003-08-13  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c: regenerate the
	internalcall table to include "CodeTable.GetAddress".

	* cscc/c/c_types.c (CTypeDefineAnonEnum): incorrect length
	used in ILMalloc call, leading to segv in anoymous enum's
	inside functions (bug #4732).

	* cscc/c/c_grammar.y: rearrange the expression grammar so
	that "=" has higher precedence than "?:" (bug #4726).

2003-08-12  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_defs.tc, cscc/c/c_oper.tc: constant evaluation
	for conditional expressions.

	* cscc/c/c_types.c (CTypeDefineField): allow "long double"
	to be used inside non-native struct's and union's, even though
	it is a native type.

	* engine/lib_reflect.c (_IL_Assembly_LoadFromName): remove
	".dll" from the end of an assembly name.

2003-08-11  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_types.c (MD5HashType): bug in the value used for
	hashing primitive element types (bug #4528).

	* cscc/common/cc_main.c (LoadLibraryFromPath): ignore missing
	libraries when compiling C source, as C libraries are normally
	fixed up at link time, not compile time.

	* ilalink/link_library.c, ilalink/linker.h: report multiply
	defined global symbols only once (bug #4703).

	* cscc/c/c_grammar.y (Declaration): display an extra error line
	if a "two or more types" error might be a redeclaration of a
	typedef'ed name (bug #4701).

	* cscc/c/c_declspec.c (CDeclSpecCombine): handle typedef's
	that contain "short int" (bug #4702).

2003-08-10  CH Gowri Kumar  <gkumar@csa.iisc.ernet.in>

	* engine/Makefile.am, engine/cvm.c, engine/cvm_config.h,
	engine/cvmc_setup.c, engine/md_ia64.c, engine/md_ia64.h,
	engine/md_ia64_macros.h, engine/unroll.c, engine/unroll_arith.c,
	include/il_system.h, support/clflush.c: initial version of the
	ia64 unroller.

2003-08-10  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_grammar.y: modify struct declarators so that
	they can include typedef names as field names (bug #4689).

	* doc/unrolling.txt, engine/md_arm.h, engine/md_ia64.h,
	engine/md_ppc.h, engine/md_x86.h, engine/unroll_branch.c:
	add a "cond" parameter to the "md_cmp" macros to indicate
	the kind of condition that is being checked for; needed for
	PPC and ia64 where the condition codes are set in different
	ways for different tests.

2003-08-09  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_gather.c: fix a bug where "final virtual" was
	being added to methods that weren't interface implementations.

2003-08-08  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_reflect.c: fix a compile warning in previous checkin.

	* engine/int_proto.h, engine/int_table.c, engine/lib_type.c:
	update internalcalls for type generics to match Gyro 1.0.

	* engine/int_proto.h, engine/int_table.c, engine/lib_reflect.c:
	stub out internalcalls for method generics.

2003-08-07  Richard Baumann  <biochem333@nyc.rr.com>

	* engine/int_proto.h, engine/int_table.c: update for new internal calls
	in pnetlib.

	* engine/lib_reflect.c: add and implement Assembly.Location and
	AppDomain.GetAssemblies internal calls.

2003-08-06  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_reflect.c: implement the internalcall for
	MethodInfo.GetBaseDefinition (bug #4577).

	* support/decimal.c (MulByWord): correctly propagate carries
	from one word to the next in decimal multiplications (Bug #3529).

2003-08-05  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/md_ppc.h, engine/ppc_codegen.h: check in the early
	stages of the PPC unroller macros.

	* support/ansi.c: don't use the mb/wc routines if wchar.h is
	not present (needed for some Mac OS X systems that have the
	functions but not the header file definitions for mbstate_t).

2003-08-01  Gopal.V  <gopalv82@symonds.net>
	
	* ildasm/ildasm_internal.h, ildasm/ildasm_main.c, ildasm/ildasm.1: 
	Add new "--resolve-all" option to resolve types when disassembling.

	* engine/verify_obj.c: Allow primitive conversions for the InitObj
	instructions. (fix Bug #4535)

2003-07-28  Richard Baumann  <biochem333@nyc.rr.com>

	* engine/lib_type.c: change the GetMemberImpl internal call to check for an
	exact match first when inexact matches are permitted.

	* engine/lib_type.c: implement InterfaceNameMatch.

2003-07-28  Rhys Weatherley  <rweather@southern-storm.com.au>

	* csant/Makefile.am, csant/csant.1: add the "csant.1" man page
	to the Makefile; minor edits to the man page.

	* engine/Makefile.am, engine/.cvsignore, engine/cvmc.c,
	engine/cvmc_ptr.c, engine/cvmc_setup.c, engine/gen_marshal.tc,
	engine/null_coder.c, engine/verify.c, include/il_coder.h:
	start adding support for a treecc-based marshalling system,
	to eventually replace the "CVMCoder_SetupExtern" mess.

	* engine/cvmc.c, engine/cvmc_conv.c, engine/gen_marshal.tc,
	engine/null_coder.c, include/il_coder.h: parameter marshalling.

	* cscc/csdoc.c, csdoc/il2doc.c, dumpasm/dump_type.c,
	ildasm/ildasm_class.c, include/il_dumpasm.h: fix the quoting
	of '&' characters in csdoc output, and other places where
	types may be dumped in XML form.

	* engine/convert.c, support/dynlib.c: use DllNotFoundException
	and EntryPointNotFoundException instead of MissingMethodException
	during PInvoke operations.

2003-07-27  Gopal.V  <gopalv82@symonds.net>
	
	* engine/lib_type.c: Avoid boxing conversions when dealing with
	parameter checks.

	* csant/csant.1: Add a minimal man page for csant .

2003-07-26  Rhys Weatherley  <rweather@southern-storm.com.au>

	* NEWS, configure.in: update version for the "0.5.10" release.

	* configure.in: update working version to "0.5.11".

2003-07-26  Richard Baumann  <biochem333@nyc.rr.com>

	* engine/lib_reflect.c: implement GetAssembly for modules.

2003-07-26  Andrew Mitchell  <ajmitch@gnu.org>

	* tools/pnet_build.sh: Update test building script for the pnet suite.
	
2003-07-25  Richard Baumann  <biochem333@nyc.rr.com>

	* engine/int_proto.h, engine/int_table.c: updates for changes to pnetlib.

	* engine/lib_emit.c: get method body output working.

2003-07-24  Gopal.V  <gopalv82@symonds.net>
	
	* doc/pnet_faq.html: Update the FAQ to include information about 
	Windows.Forms , ADO.NET support and mention DGEE in connection with
	ASP.NET.

	* engine/verify_branch.c: Merge label and current stack by obtaining
	the common type. (Bug #4430)

	* engine/lib_type.c: Remove overriden methods from the search for 
	GetMembersImpl (fixes Bug #3520).

	* engine/verify_branch.c: Fix bug when using "null" types which are
	(ILType*)NULL.

2003-07-24  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/lib_attrs.c: begin adding support for converting security
	attributes into ".capability" blocks.

	* image/link.c: if we cannot find an assembly with the suffix
	".dll", try again with ".DLL".

	* engine/ilrun.c: try both ".EXE" and ".exe" for program suffixes.

2003-07-23  Richard Baumann  <biochem333@nyc.rr.com>

	* engine/int_proto.h, engine/int_table.c: updates for changes to pnetlib
	internal calls.

	* engine/lib_emit.c: implement method body output for dynamic
	assemblies.

2003-07-23  Gopal.V  <gopalv82@symonds.net>
	
	* engine/throw.c: Set stack traces appropriately for the various
	exception functions.

	* engine/lib_emit.c: Fix Module creation to use a null token and
	fix return value of ClrAssemblyCreate.

	* engine/lib_emit.c: Add version information to assemblies created.

	* engine/lib_emit.c: Do not check for parents for <Module> ,
	Interfaces and System.Object in ClrTypeCreate.

	* configure.in: Add the --enable-multilibs=no to allow compilation
	on FreeBSD.

2003-07-23  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/cvm_config.h, engine/dumpconfig.c: remove potentional
	macro redefinition warnings from cvm_config.h; take out the
	"Little Endian" configuration because CVM_LITTLE_ENDIAN doesn't
	actually indicate a little-endian CPU and so it would be confusing;
	use "ILHasThreads" to detect thread support rather than #ifdef's.

	* engine/lookup.c: slight bug in signature example - object refs
	use 'o', not 'O'.

	* engine/lib_stdio.c, include/il_utils.h, support/Makefile.am,
	support/input.c: move the console input code to "support" so that
	it is easier to redirect.

2003-07-23  Thong Nguyen  <tum@veridicus.com>

	* engine/process.c:  Unregister the main thread when a process
	is destroyed so the main thread can be reused.
	
2003-07-22  Gopal.V  <gopalv82@symonds.net>

	* ilnative/ilinternal.c: Add nested type support for dumpLookupType.
	
	* engine/int_table.c: Update internal call table after the ilinternal
	changes.

2003-07-22  Richard Baumann  <biochem333@nyc.rr.com>

	* engine/int_proto.h, engine/int_table.c: add and modify some
	SignatureHelper internal calls.

	* engine/lib_emit.c: implement the AssemblyBuilder.ClrSave,
	SignatureHelper.ClrSigFinalize, and SignatureHelper.ClrSigGetBytes
	internal calls.

	* include/il_types.h: remove my ILType_IsField macro.

	* image/writer.c, image/pecoff_writer.c: fix ILWriterSetStream behavior
	when its given a seekable stream.

	* engine/lib_emit.c: fix switch on PEFileKinds in ClrSave.

	* engine/lib_emit.c: add some null pointer checks and metadata locking
	to ClrModuleCreate.

2003-07-22  Gopal.V  <gopalv82@symonds.net>

	* configure.in, engine/dumpconfig.c, engine/Makefile.am,
	engine/ilrun.c, engine/cvm_config.h: Add a "--dump-config"
	option to list out the build options and multiple "-D" for
	more verbose output.

	* engine/dumpconfig.cs: Add GPL header.

2003-07-22  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/cscc.c, include/il_system.h, support/Makefile.am,
	support/path.c: move the cscc include directories from ${prefix}/lib
	to ${prefix}/share, to be consistent with Debian guidelines.

2003-07-21  Gopal.V  <gopalv82@symonds.net>
	
	* engine/lib_enum.c: Fix a sign extension issue with masking.

	* doc/pnet_faq.html: Solve a parsing problem for the faq.

2003-07-21  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_task.c:
	implement the internalcalls for "System.Diagnostics.Process".

	* engine/lib_task.c: fix Win32-specific compilation issues.

	* engine/lib_task.c: create Win32 pipes using the file descriptor
	functions, to be consistent with the routines in "file.c".

	* engine/ilrun.c, engine/cvmc_setup.c: remove unnecessary TODO markers.

	* engine/int_proto.h, engine/int_table.c, engine/lib_dir.c:
	remove "DirMethods.Copy" which is no longer used.

2003-07-20  Gopal.V  <gopalv82@symonds.net>
	
	* codegen/cg_relop.tc: Special handling for float types to correctly
	operate on NaN floats in <= , < , >= & > operations.

	* cscc/csharp/cs_oper.tc: Fix the EqualitySem to correctly lookup
	op_Equality operations after coercion (and minor typo).

	* engine/lib_enum.c: Fix masking features to retain the sign
	of the masked value.

	* engine/lib_enum.c: Use ", " instead of "," for seperating flagged
	enums.

	* engine/lib_enum.c: Allow enums to be cast to their underlying
	types and other enums with the same underlying type.

2003-07-20  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/unroll_arm.c, engine/unroll_arm_arith.c,
	engine/unroll_arm_branch.c, engine/unroll_arm_const.c,
	engine/unroll_arm_conv.c, engine/unroll_arm_ptr.c,
	engine/unroll_arm_var.c, engine/unroll_x86.c,
	engine/unroll_x86_arith.c, engine/unroll_x86_branch.c,
	engine/unroll_x86_const.c, engine/unroll_x86_conv.c,
	engine/unroll_x86_ptr.c, engine/unroll_x86_var.c: remove the
	old unroller code, since it is now obsolete.

2003-07-20  Richard Baumann  <biochem333@nyc.rr.com>

	* engine/int_proto.h, engine/int_table.c, engine/lib_emit.c: update for
	changes to System.Reflection.Emit.AssemblyBuilder in pnetlib.

	* engine/lib_emit.c: implement most of the remaining internal calls.

	* image/synthetic.c, include/il_types.h: export ILTypeHash for use in
	lib_emit internal calls.

	* image/writer.c, include/il_writer.h: add functions for resetting
	ILWriter properties normally provided on writer creation.

	* engine/lib_emit.c: implement a couple more internal calls.

	* image/pecoff_writer.c, image/writer.c, include/il_writer.h: modify
	ILWriterResetTypeAndFlags to fix the pe headers using back-patching and
	default seekable to false in ILWriterCreate if the supplied stream is
	null.

	* include/il_types.h: add ILType_IsField macro.

2003-07-19  Gopal.V  <gopalv82@symonds.net>
	
	* engine/lib_type.c: enable GetType of array expressions like
	"System.Int32[]".

	* engine/box.c, engine/lib_type.c: Add ILExecThreadPromoteAndUnbox
	method which promotes primitive types while unboxing.

	* engine/lib_array.c: Use ILExecThreadPromoteAndUnbox in array
	set and get methods.

2003-07-19  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_gather.c: centralize the extraction of method,
	property, and event names so that generic references can be
	handled properly.

2003-07-18  Aditya P. Bansod  <abansod@fullenergy.com>
	
	* engine/lib_info.c: Hack for GetNetBIOSName .
	(Patch #1464, Gopal)

2003-07-18  Gopal.V  <gopalv82@symonds.net>
	
	* engine/lib_type.c: Fix minor bug in Type.ToString() for arrays

	* engine/lib_array.c: Fix bug in MArray set_iii and get_iii to 
	compute the right offset.

2003-07-17  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_array.c, engine/lookup.c, engine/verify_ptr.c,
	image/meta_types.c, include/il_types.h: add the function
	"ILTypeFindOrCreateArray", which will attempt to locate an
	array type in the synthetic hash before creating a new one;
	this is used to prevent unlimited memory growth in loop bodies
	that allocate arrays.

	* engine/lib_reflect.c (DeserializeObject): missing ';' in the
	name of the type passed to "ILExecThreadLookupType".

	* engine/cvm.c: re-enable the PPC register assignment code.

2003-07-16  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/cvm.c: disable the PPC register assignment temporarily.

2003-07-16  Thong Nguyen  <tum@veridicus.com>

	* libgc/win32_threads.c:  Changed GC_CreateThread to return a
	duplicate handle to fix "Suspend Thread Failed" errors when
	the engine closes thread handles.
	
	* image/image.h, image/context.c: Added support for attaching
	user data to contexts.
	
	* include/il_engine.h: Added prototypes for ILExecDeinit,
	ILThreadRegisterForManagedExcecution and
	ILThreadUnregisterForManagedExecution.
	
	* include/il_image.h: Added prototypes for ILContextSetUserData
	and ILContextGetUserData.
		
	* include/il_thread.h: Added prototypes for ILThreadSetPriority,
	ILThreadGetPriority and ILSignalAndWait.
	
	* engine/engine.h, heap.c, ilrun.c, process.c, thread.c:
	Added support for abandoning finalization when the owner process
	of an (orphaned) object is destroyed.
	
	* engine/lib_thread.c: Add preliminary support for Thread.Abort
	
	* engine/process.c: Added support for aborting and waiting for
	"background" threads before the process is destroyed.
	Move GC & thread deinitialization into ILExecDeinit.
	
	* engine/monitor.c: Fixed memory leak in ILMonitorCreate
	that can occur if the system runs out of memory.
	
	* engine/throw.c: Added ILExecThreadThrowThreadAbortException.
	
	* support/hb_gc.c: Make ILGCDisableFinalizers block until
	all finalizers have finished.
	
	* support/thr_defs.h, support/no_defs.c, support/w32_defs.c,
	support/pt_defs.c, support/thread.c: Added support for thread
	priorities.
	
	* support/thr_defs.h: Added signalFunc field to ILWaitHandle.
	
	* support/wait.c: Added implementation of ILSignalAndWait.
	
	* support/wait_event.c, support/wait_mutex.c: Added support for
	WaitHandle signalFuncs (used by ILSignalAndWait) to Mutexes,
	Monitors and Events.
	
	* support/wakeup.c: Added support for cancelling interrupts.
	
2003-07-15  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/marshal.c, image/member.c, image/meta_build.c,
	image/program.h: load ParamDef records on demand so that we can
	eventually deprecate the "-fminimize-parameters" option in cscc.

2003-07-14  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/cs_main.c, cscc/csharp/cs_grammar.y, cscc/csharp/cs_scanner.l:
	introduce a flex scanner hack to distinguish between '<' used as
	an operator and '<' used as a generic type parameter designator;
	make "-fno-generics" the default, requiring "-fgenerics" to compile
	C# code that uses generics.

	* ilasm/ilasm_grammar.y, ilasm/ilasm_output.c, ilasm/ilasm_output.h:
	modify the assembler so that it can output debug information
	for local variable names and their scopes.

2003-07-13  Rhys Weatherley  <rweather@southern-storm.com.au>

	* doc/unrolling.txt, engine/md_arm.h, engine/md_x86.h,
	engine/unroll_branch.c: introduce some extra instructions for
	unsigned comparisons because PPC cannot set the condition
	codes for both signed and unsigned results at the same time
	like x86 and ARM can.

	* engine/cvm.c, engine/cvm_config.h: perform manual register
	assignment for PPC (doubles the PNetMark).

	* engine/cvm_call.c, engine/cvm_dasm.c, engine/cvmc_call.c,
	engine/engine.h, engine/layout.c, engine/process.c: change the
	interface dispatch logic to use IMT's like IBM's RVM, instead
	of the itable's approach we used to have.

2003-07-12  Richard Baumann  <biochem333@nyc.rr.com>

	* engine/lib_emit.c: implement the _IL_TypeBuilder_ClrTypeAddInterface,
	_IL_TypeBuilder_ClrTypeSetParent, _IL_TypeBuilder_ClrTypeImport,
	_IL_TypeBuilder_ClrTypeImportMember, and
	_IL_TypeBuilder_ClrTypeAddOverride internal calls.

	* image/call.c, include/il_program.h: add and implement the
	ILClassSetParent function.

	* engine/lib_emit.c: implement the _IL_MethodBuilder_ClrMethodCreate
	internal call.

2003-07-12  Thong Nguyen  <tum@veridicus.com>

	* support/wakeup.c:  Fix delayed signal race condition in
	ILWakeupWait.

2003-07-12  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/lib_emit.c: fix a warning.

	* engine/unroll.c, engine/unroll_ptr.c, engine/unroll_var.c:
	fix some ARM-related bugs in the generic unroller.

	* engine/md_arm.h, engine/arm_codegen.h: minor tweaks to ARM macros.

	* doc/unrolling.txt, engine/Makefile.am, engine/md_default.h,
	engine/md_x86.c, engine/md_x86.h, engine/unroll.c,
	engine/unroll_arith.c: unroll "fcmpl" and "fcmpg" for x86.

	* engine/md_arm.h, engine/md_x86.h, engine/unroll.c,
	engine/unroll_arith.c: unroll some 64-bit integer operations.

	* engine/lib_emit.c: fixes for 64-bit platforms; use the correct
	token value for the call to "ILClassCreate".

	* engine/unroll_ptr.c: tune short branches a little for x86
	to increase code density and hence CPU caching behaviour.

	* engine/Makefile.am, engine/md_arm.c, engine/md_x86.c:
	enable the generic unroller by default; only compile in the
	md_arm and md_x86 code for the respective platforms.

	* libffi/Makefile.am, libffi/Makefile.in: remove ffitest from
	the build because it breaks the ia64 version.

2003-07-11  Richard Baumann  <biochem333@nyc.rr.com>

	* engine/lib_emit.c: implement the _IL_TypeBuilder_ClrTypeCreate
	internal call.

2003-07-11  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/md_arm.h, engine/md_x86.c, engine/md_x86.h,
	engine/unroll.c, engine/unroll_const.c, engine/unroll_ptr.c:
	implement generic unrolling for constant and pointer operations.

	* engine/md_arm.h, engine/md_x86.c, engine/md_x86.h, engine/unroll.c,
	engine/unroll_branch.c, engine/unroll_conv.c: implement generic
	unrolling for branch and conversion opcodes.

	* engine/md_arm.h, engine/unroll.c: some slight fixes for ARM.

	* engine/md_arm.h, engine/arm_codegen.h: macro expansion bugs on ARM.

	* doc/unrolling.txt: update the generic unroller documentation
	to describe all of the code generation macros.

2003-07-10  Rhys Weatherley  <rweather@southern-storm.com.au>

	* ChangeLog, doc/ChangeLog-4: move the bulk of ChangeLog into
	doc/ChangeLog-4 to trim things down a little.

	* engine/md_arm.c, engine/md_arm.h, engine/md_default.h,
	engine/md_x86.c, engine/md_x86.h, engine/unroll.c,
	engine/unroll_arith.c: add some more code to the generic unroller.

2003-07-09  Gopal.V  <gopalv82@symonds.net>
	
	* engine/lib_reflect.c: Generate arrays of the attribute type 
	instead of generating Object[] arrays .

	* engine/verify_call.c: Fix minor bug (or typo) in verification
	of the ldvirtftn.

2003-07-09  Thong Nguyen  <tum@veridicus.com>

	* engine/thread.c, engine/process.c: Fix bug that caused the
	finalizer to destroy the main thread even though if
	ILProcessDestroy has already destroyed it.

2003-07-09  Rhys Weatherley  <rweather@southern-storm.com.au>

	* ilalink/link_main.c, ilalink/link_res.c, image/Makefile.am,
	image/image.h, image/winres_reader.c, image/winres_writer.c,
	include/il_linker.h, include/il_writer.h: put some of the
	support code in place for writing win32 resources and icons
	(not complete yet).

	* cscc/c/c_grammar.y: add some "error" declarations to the
	C grammar to improve error handling in the parser.

2003-07-08  Thong Nguyen  <tum@veridicus.com>

	* tests/test_thread.c: Made the test GC aware because
	on windows, threads go through the GC.
	
2003-07-08  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/common/cc_preproc.c: Modify to ignore escape sequences in
	literal strings.
	
2003-07-08  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/cvm_inline.c: use ILExecThreadCallVirtualV instead
	of ILExecThreadCallVirtual for the StringBuilder.Append
	inline because the va_list packing code doesn't work on
	PPC GNU/Linux.

	* engine/ilrun.c: modify "ilrun" to avoid va_list's also.

	* cscc/common/cc_compat.c, image/winres_reader.c, include/il_system.h,
	support/strings.c: add "ILStrNICmp" as a common support function.

2003-07-08  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_thread.c: Monitor speed improvements.  Prevent
	multiple threads from claiming the same monitor into their
	free lists.
	
	* include/il_thread.h, support/thr_defs.h, support/thread.c:
	Add support for registering thread cleanup handlers.
	
	* support/thread.c: Fix race condition bug in ILThreadJoin
	by reordering the ILWakeupSetLimit, _ILWakeupQueueAdd and
	_ILMutexLock calls.  This race condition would cause 
	ILThreadJoin to miss a signal and deadlock.
	
	* engine/engine.h: Added "isFinalizerThread" field to ILExecThread
	so finalizer threads can be treated specially when the process
	shutsdown.
	
	* engine/heap.c: Object finalizers are now responsible for
	registering the finalizer thread with the engine.

	* engine/process.c: On process shutdown, non-finalizer threads
	(both foreground and background) are now destroyed before the
	finalization thread performs its last run.
	
	* support/hb_gc: Improve startup time by delay-creating the
	finalizer thread.  Decoupled the GC code from the engine so that
	it needs to know nothing about the execution engine.  Added more
	comments.
	
	* support/thread.c: Add support for thread cleanup handlers.

2003-07-07  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/Makefile.am, image/image.h, image/pecoff_loader.c,
	image/winres_reader.c, include/il_image.h: add code to "image"
	to read the contents of the ".rsrc" section in an IL binary.

2003-07-07  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/csharp/cs_gather.c: Fully generate class members before
	generating nested classes.

2003-07-07  Thong Nguyen <tum@veridicus.com>
	
	* support/wakeup.c: Prevent ILWakeupWait from waiting on the
	condvar if the wakeup object is already at its limit to fix
	a race condition that can occur if wakeup objects are registered
	& subsequently signalled before ILWakeupWait is called.
		
2003-07-06  Thong Nguyen <tum@veridicus.com>

	* engine/lib_thread.c: Fixed monitor locking mismatch bug under
	Linux.
	
	* libgc/linux_threads.c: Fixed bug where pthread_create blocks
	instead of returning when thread creation fails.

2003-07-06  Rhys Weatherley  <rweather@southern-storm.com.au>

	* Makefile.am, configure.in, ilranlib/.cvsignore,
	ilranlib/Makefile.am, ilranlib/ilranlib.1, ilranlib/ilranlib.c:
	add the "ilranlib" program to the system.

	* cscc/Makefile.am, ilranlib/Makefile.am, ilsize/Makefile.am,
	ilstrip/Makefile.am: add some symlinks to make the IL tools
	look like a cross-compile toolchain with the prefix "cli-unknown".

	* configure.in, ilranlib/Makefile.am: locate the system version
	of "ar" and link it as "cli-unknown-ar".

2003-07-05  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_thread.c: Implemented internal calls Thread.Abort
	& Reset.  Fix for resource leak that occurs when threads are
	collected without ever starting.
	
	* engine/engine.h, engine/thread.c: Renamed a few fields to be
	more consistant.
	
	* support/thread.c: Changed ILThreads so that the underlying OS
	thread is not created until start is called.  ILThreadRun now 
	starts immediately rather than suspending until start is called.
	
	* libgc/win32_threads.c:  Changed MAX_THREADS to 1024.
	
	* engine/process.c, engine/thread.c, support/hb_gc.c,
	support/thread.c: Moved background threads support down to
	the "ILThread" level rather than the "ILExecThread" level.
	
	* libgc/win32_threads.c, libgc/configure.in, libgc/include/gc.h:
	Fix so that GC_CreateThread gets registered with the GC even if
	libgc is compiled under cygwin.
	
	* docs/libgc_changes.txt: Documents changes made to libgc.
	
2003-07-05  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_gather.c, image/member.c, include/il_program.h:
	search for the "virtual" method corresponding to an "override"
	and report a bug if one isn't present (Bug #4196); property
	signatures should never use the "hasthis" flag, as it is stored
	on the underlying accessor methods instead.

	* codegen/cg_gen.c, codegen/cg_gen.h, codegen/cg_nodemap.c,
	codegen/cg_nodemap.h, cscc/csharp/cs_cast.tc, cscc/csharp/cs_oper.tc:
	fix bug #4197 - "unchecked" is required for numeric constant
	casts such as "uint" to "int".

	* Makefile.am, configure.in, ilstrip/.cvsignore, ilstrip/Makefile.am,
	ilstrip/ilstrip.1, ilstrip/ilstrip.c: add the "ilstrip" program.

	* engine/convert.c, engine/cvm.c, engine/engine.h: lock out
	the method cache while the unroller is running.

2003-07-04  Gopal.V  <gopalv82@symonds.net>
	
	* include/il_sysio.h, support/socket.c: Partially implelement the 
	socket options.

2003-07-04  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/class.c (ILClassCreate): forcibly change TypeRef tokens
	into TypeDef tokens (fixes Bug #4107).

2003-07-03  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_grammar.y: make the C compiler more robust against
	failures of "CTypeDefineStructOrUnion".

	* cscc/c_main.c: quote cpp arguments that contain spaces on MacOS X.

	* cscc/cscc.c (IsSinglePlugin): single-file plugins end in "-s",
	not ".s".

	* cscc/c/c_oper.tc (ILNode_Conditional): handle function pointers
	as arguments to "?:".

	* cscc/c/c_ainit.tc, cscc/c/c_grammar.y: treat "union" initializers
	the same as "struct" initializers.

	* cscc/cscc.c, ilalink/link_main.c: change the default output
	file from "a.out.exe" to "a.exe" (Win32) or "a.out" (non-Win32),
	to be consistent with gcc.

	* image/pecoff_writer.c (_ILWriteFinal): move the ".ildebug"
	section to the end of the image so that it can be easily stripped.

2007-07-03  Thong Nguyen  <tum@veridicus.com>

	* support/hb_gc.c: ILGCDeinit now performs a garbage collection
	before calling the finalizers one last time.
	
	* engine/process.c: ILProcessDestroy now relies on ILGCDeinit
	to run final GC and finalization run.

2003-07-01  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/java/java_grammar.y: wrap For statements in a new scope
	(fixes bug #4127)

2003-07-01  Rhys Weatherley  <rweather@southern-storm.com.au>

	* doc/c_users_guide.html: update the user's guide for the C
	compiler to describe the latest conventions.

	* ilheader/ilheader.c: modify the "ilheader" program so
	that it only outputs the type definitions, because the
	methods, fields, etc, can be accessed via other means.

	* cscc/c/c_grammar.y, cscc/c/c_scanner.l: remove the "__invoke__"
	keyword from the C compiler, because it is no longer required.

2003-07-01  Thong Nguyen  <tum@veridicus.com>
	
	* engine/heap.c:  Make ILExecAllocAtomic registers finalizers.
	
	* support/time.c:  Map timezone to _timezone on windows builds.
	
	* support/hb_gc.c:  Prevent the finalizer thread from
	recursively calling finalizers.
	
2003-06-30  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_grammar.y, cscc/c/c_scanner.l: add "type::name" syntax
	to the C compiler, to replace the clumsy "__invoke__ type.name".

2003-06-30  Jeff Post  <j_post@pacbell.net>

	* csdoc/doc_html.c: add code to generate href links to the
	output of cssrc2html.

2003-06-30  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_thread.c: Fix argument exception instead of
	SyncLockException thrown.
	
	* engine/cvm_inline.c: Monitor.Enter and Monitor.Exit now
	properly save/restore the stack state.  Fixes case where
	exceptions not always thrown.
	
2003-06-29  Thong Nguyen  <tum@veridicus.com>

	* configure.in: Made gcc threading model detected occur only if
	the system isn't windows or linux (windows and linux have default
	forced threading models).
	
	* engine/layout.c: Fixed bug so that classes that don't implement
	interfaces nor have static fields are properly identified as
	managed or unmanaged.  

	* engine/method_cache.c: work around compilers that don't allow
	arithmetic on void * pointers.

	* support/thr_choose.h: make sure that CreateThread is redirected
	to GC_CreateThread under all Win32 environments, because the
	static library won't properly attach otherwise.

	* support/hb_gc.h: Refactored some code.  Finalizers now always halt
	the current thread.

2003-06-28  Rhys Weatherley  <rweather@southern-storm.com.au>

	* configure.in: add "mingw" to the set of detected platforms
	for Win32 threading support.

	* engine/cvm_ptr.c, engine/engine.h, engine/heap.c, engine/layout.c:
	use "_ILEngineAllocAtomic" to allocate objects that don't have any
	GC'able fields, to prevent the GC from scanning the large static
	data areas in C applications, which rarely include managed types.

	* cscc/c/c_grammar.y: recognise "__const__" as an attribute name,
	to compile code that uses glibc headers.

	* cscc/c/c_types.c: clone bit-field declarations when a struct
	type is cloned.

	* cscc/c/c_declspec.h, cscc/c/c_grammar.y: inhibit the "useless
	keyword" warning for anonymous enumerations.

	* ilalink/link_main.c: strip multiple "/" characters from the end
	of "ar" entry names because some archives have a "//" entry.

	* cscc/c/c_ainit.tc, cscc/c/c_const.tc, cscc/c/c_defs.tc,
	cscc/c/c_grammar.y, cscc/c/c_lexutils.c, cscc/c/c_scanner.l,
	cscc/c/c_types.c, cscc/c/c_types.h: add support for wide character
	and wide string constants.

	* cscc/c/c_internal.c (CGenSizeOf): the boxed form of "long double"
	is "OpenSystem.C.LongDouble", not "OpenSystem.C.NativeFloat".

	* cscc/c/c_oper.tc (ILNode_SizeOfExpr): special "sizeof" cases
	for calculating the size of string constants.

2003-06-27  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/csharp/cs_gather.c, cscc/csharp/cs_internal.h,
	cscc/csharp/cs_modifiers.c: report errors for "Finalize" methods
	that are not properly declared as constructors (Bug #4062).

	* engine/lib_dir.c, engine/lib_file.c, include/il_engine.h:
	convert '\' into '/' in pathnames to work around Windows programmers
	who don't use "Path.DirectorySeparatorChar" in their C# code.

	* cscc/c/c_ainit.tc (CArrayInitializerSize): further improvements
	to array size computation - handle nested structs within structs, etc.

	* cscc/c/c_ainit.tc, cscc/c/c_defs.tc, cscc/c/c_grammar.y,
	cscc/c/c_oper.tc: rearrange the array initialization code so that
	all code generation and semantic analysis is in "c_ainit.tc".

	* cscc/c/c_function.c, cscc/c/c_function.h, cscc/c/c_grammar.y,
	ilalink/link_class.c, ilalink/link_init.c: force the ".init"
	function to be called when a C library is used from a C#
	application which doesn't use the crt0 process.

	* doc/c_language_abi.html: update the ABI specification for the
	C compiler to match the latest changes.

	* cscc/c/c_ainit.tc, cscc/c/c_builtin.tc, cscc/c/c_defs.tc:
	initialization of arrays containing strings (e.g. char[] x = "abc").

	* cscc/c/c_ainit.tc: finish the implementation of array and
	structure initializers.

2003-06-27  Thong Nguyen <tum@veridicus.com>

	* support/wait_mutex.c: Fix recursive entry/leave bug in
	  ILWaitMonitorSpeculativeLeave/CompleteLeave.

	* engine/monitor.c: Added implementation of SetObjectMonitor for
	  hashing monitors.

2003-06-26  Gopal.V  <gopalv82@symonds.net>
	
	* engine/Makefile.a: Add monitor.c to the list of files

	* cscc/common/cc_options.c: Add a "--version" command line 
	option to cscc.

2003-06-26  Thong Nguyen  <tum@veridicus.com>

	* engine/lib_thread.c:  New monitor implementation.  Uses 
	thread local free monitor lists instead of GC.  This allows 
	monitors to be used with objects using GC "atomic" memory 
	regions (type of memory used by arrays and strings).

	* engine/ilrun.c, engine/process.c, engine/thread.c: New code to 
	prevent the process from exiting until all user threads have 
	finished executing.

	* engine/Makefile.am: Added monitor.c

	* engine/cvm_inline.c:	Added support for inlining Monitor.Enter
	and Monitor.Exit.

	* engine.h:  Added support for engine level monitors and 
	preliminary hashing monitors support.

	* engine/heap.c:  Add support fo abstracted object headers.
	Add support code to allow finalizers to run from finalizer 
	thread.

	* engine/int_proto.h, engine/int_table.h:  New internal method 
	imports for threading support.

	* engine/lib_defs.h:  Support macros for abstracting object 
	headers.  Support code for header and hash based monitors.

	* engine/lib_gc.c:  Changed code to support abstracted object 
	headers.

	* engine/lib_thread.c:  Implemented threading internal methods
	(Thread.Start etc). Implemented monitor support.  Added new 
	internal method InitializeThread.

	* engine/process.c:  Call to the new ILGCDeinit function.

	* engine/thread.c:  Implemented a couple more threading related 
	methods. GetCurrentClrThread and ILThreadRegisterForManagedExcution.
	
	* engine/monitor.c:  Implemention of memory saving hashing 
	monitors.

	* include/il_engine.h:  Added typedef for ILExecMonitor.

	* include/il_gc.h:  Added ILGCDeinit and and
	ILGCRegisterGeneralWeak.
	
	* include/il_thread.h:  IThreadRegisterForManaged  declaraction.

	* support/def_gc.h:  Added null implementations of new GC 
	methods.

	* support/hb_gc.c:  Moved GC finalizer into a seperate thread.
	Added waiting for pending finalizer support.  Implemented
	various new threading related methods (GCDeinit etc).
	(Patch #1657, Gopal)  

2003-06-26  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_lvalue.tc (ILNode_CDeref): decay array types in the
	result of the '*' operator.

	* cscc/c/c_types.c (CloneStruct): copy an entire field's type,
	including the modifier prefixes.

	* cscc/c/c_typeout.c (OutputPendingClass): don't output class
	references, as they aren't defined in the current module.

	* cscc/c/c_grammar.y, cscc/c/c_types.c, cscc/c/c_types.h:
	resolve anonymous enumerated types and constants to the
	underlying type because there is no way to define an
	enumerated type that will work across modules otherwise.

	* cscc/c/Makefile.am, cscc/c/c_ainit.tc, cscc/c/c_defs.tc,
	cscc/c/c_grammar.y, cscc/c/c_internal.h, cscc/c/c_lvalue.tc,
	cscc/c/c_oper.tc, cscc/c/c_stubs.tc, cscc/c/c_types.c,
	cscc/c/c_types.h: move the array initializer node types into
	"c_ainit.tc"; implement a better algorithm for calculating
	the size of an array initializer.

	* support/hb_gc.c: missing return value.

	* engine/lib_defs.h: make the object header access macros 64-bit safe.

	* engine/cvm_except.c, engine/throw.c: add the stack trace to
	exception objects that are created by "ILExecThreadThrowSystem".

	* engine/engine.h, engine/thread.c: fix some prototyping bugs.

2003-06-25  Rhys Weatherley  <rweather@southern-storm.com.au>

	* cscc/c/c_function.c, cscc/c/c_grammar.y: implement global
	initializer flushing in the C compiler.

	* cscc/c/c_grammar.y, ilalink/Makefile.am, ilalink/link_create.c,
	ilalink/link_image.c, ilalink/link_init.c, ilalink/link_library.c,
	ilalink/linker.h: link initializers and finalizers in C applications.

	* cscc/c/c_lvalue.tc (ILNode_CDeref): remove the '*' dereference
	layer if the argument is a function pointer, so that "(*f)()" works.

	* cscc/c/c_oper.tc (ILNode_Conditional): error in semantic analysis
	for the third sub-expression of "?:".

	* cscc/c/c_oper.tc (ILNode_CastType): it is always possible to
	cast to "void" in C.

	* cscc/c/c_grammar.y: permit "register" to be used in a
	formal parameter list.

	* cscc/c/c_types.c (CTypeGetElemType): preserve function pointer
	modifiers when dereferencing an array of function pointers.

	* codegen/cg_decls.tc, codegen/cg_nodes.tc, cscc/csharp/cs_decls.tc,
	cscc/csharp/cs_grammar.y, doc/c_users_guide.html: introduce some
	new syntax to make it easier to call C code from C#.

2003-06-24  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/java/.cvsignore, cscc/bf/.cvsignore : add generated
	files to .cvsignore to avoid being generated as a patch.

2003-06-24  Rhys Weatherley  <rweather@southern-storm.com.au>

	* support/dynlib.c: use the "LoadLibrary" function under both
	cygwin and non-cygwin win32 installations.

2003-06-24  Jeff Post  <j_post@pacbell.net>

	* csdoc/Makefile.am, csdoc/cssrc2html.c, csdoc/cssrc2html.h,
	csdoc/fontcolors.c, csdoc/fontcolors.h, csdoc/scanner.c,
	csdoc/scanner.h, csdoc/tokens.h: add the "cssrc2html" program
	to the tree.

2003-06-23  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/common/cc_options.c, cscc/cscc.1 , doc/pnettools.texi: Add
	a new "-winforms" option to simplify compiling WinForms applications.

	* cscc/vb/vb_grammar.y: Fix error with Bison 1.75

	* cscc/java/java_grammar.y: Fix error with Bison 1.75
	
	* cscc/java/java_grammar.y: Fixed another error with Bison 1.75

2003-06-23  Rhys Weatherley  <rweather@southern-storm.com.au>

	* image/class.c, image/context.c: fix a scope bug in class name
	lookup - it was sometimes finding nested classes when looking
	for global ones.

2003-06-22  Yannis Bres  <Yannis.BRES@sophia.inria.fr>

	* engine/cvmc.c, engine/ilrun.c, engine/method_cache.c,
	engine/method_cache.h, engine/null_coder.c, engine/process.c,
	ildb/ildb_run.c, include/il_coder.h, include/il_engine.h: Add 
	the '-C' option to control the size of the converted method cache.
	(Gopal, Patch #1643 and fixes Bug #1014)

2003-06-22  Gopal.V  <gopalv82@symonds.net>

	* codegen/cg_coerce.c: Fix indirect casting to use a 3 step conversion
	instead of obtaining rules.

	* engine/ilrun.c: Explicitly call the static constructor of the class
	containing the entry point function. (fixes Bug #3593)
	
2003-06-22  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/process.c (ILExecProcessDestroy): run a final garbage
	collection and finalizer pass just before engine shutdown.

	* csdoc/doc_tree.h, engine/lib_string.c, ilalink/link_library.c,
	image/image.h, support/hashtab.c, support/intern.c: adjust some
	hash table sizes to be prime numbers rather than powers of two,
	to help spread items more evenly across the table.

2003-06-21  Gopal.V  <gopalv82@symonds.net>
	
	* cscc/cs_main.c , cscc/csharp/cs_scanner.l , cscc/csharp/cs_internal.h:
	Use CSLatin1Charset to detect the -flatin1-charset option in cs_main.

2003-06-21  Thong Nguen  <tum@veridicus.com>

	* engine/lib_enum.c: fixed bug where flag enums don't return correct
	string format if the enum value matches exactly one value.

	* support/thread.c: fixed bug where ILThreadJoin incorrectly evaluates
	state of the thread to join.

2003-06-21  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/int_proto.h, engine/int_table.c, engine/lib_info.c:
	add the "InfoMethods.GetPlatformID" internalcall.

	* libffi/src/x86/sysv.S, libffi/src/x86/win32.S: make the x86 libffi
	code more robust in the face of callee-pop winapi conventions.

	* codegen/cg_cast.tc: fix incorrect code generation for
	casting "uint" to "byte".

2003-06-20  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/cvm.h: duplicate opcode value where it shouldn't be.

	* ilalink/link_library.c (ClassHash_Match): resolve nested types
	properly in the linker, so that if the same nested type name is used
	in two contexts, it will find the right context.

2003-06-19  Rhys Weatherley  <rweather@southern-storm.com.au>

	* engine/verify.c: enable the verifier's debug mode by default.

	* engine/cvm.h, engine/cvm_call.c, engine/cvm_dasm.c,
	engine/cvm_lengths.c, engine/cvmc.c, engine/cvmc_call.c,
	engine/null_coder.c, engine/verify.c, engine/verify_call.c,
	include/il_coder.h: re-implement tail calls in the verifier,
	coder, and interpreter.

2003-06-17  Rhys Weatherley  <rweather@southern-storm.com.au>

	* support/dynlib.c: put the MacOS X version of dynamic loading
	before the generic "dlopen" version, as some MacOS X systems
	have "dlopen", but it doesn't do the right thing.

	* csant/csant_dir.c, cscc/bf/bf_grammar.y, engine/lib_math.c,
	engine/lib_socket.c, ildb/ildb_input.c, support/allocate.c,
	support/dns.c, support/dynlib.c, support/filemap.c,
	support/socket.c, support/test_float.c: #include fixes for
	non-cygwin win32 builds.

	* support/dns.c: #include fix for cygwin win32 builds.

	* configure.in, support/dns.c: detect sin6_scope_id because some
	older OS'es don't have it in struct sockaddr_in6.

	* NEWS, configure.in: update version for the "0.5.8" release.

	* configure.in: update working version to "0.5.9".

	* engine/lib_reflect.c: closures are not available if libffi
	is disabled.


